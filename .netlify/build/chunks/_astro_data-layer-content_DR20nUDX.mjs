const _astro_dataLayerContent = [["Map",1,2,9,10,1004,1005],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.6.1","content-config-digest","72677483a36bf21d","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://evaaaaawu-tech-blog.netlify.app\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"always\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image/\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\",\"zh-tw\"],\"routing\":{\"prefixDefaultLocale\":true,\"redirectToDefaultLocale\":true,\"fallbackType\":\"redirect\"}},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"svg\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","en",["Map",11,12,43,44,91,92,126,127,221,222,285,286,336,337,362,363,415,416,470,471,500,501,526,527,607,608,634,635,680,681,706,707,732,733,776,777,802,803,843,844,901,902,939,940,977,978],"about-javascript-data-types",{id:11,data:13,body:24,filePath:25,digest:26,rendered:27,legacyId:42},{title:14,subtitle:15,author:16,imageWebp:17,imagePng:18,imgAlt:14,creationDate:19,updateDate:20,tags:21,featured:23},"About JavaScript Data Types","JavaScript has two main data types: primitives and objects. Primitives include String, Boolean, Number, BigInt, Undefined, Null, and Symbol; objects include Array, Function, and Objects.","src/content/authors/eva.json","/images/articles/webp/about-javascript-data-types.webp","/images/articles/png/about-javascript-data-types.png",["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],"JavaScript",false,"JavaScript has two main data types: primitives and objects. Primitives include String, Boolean, Number, BigInt, Undefined, Null, and Symbol. They are immutable, meaning we cannot change the value itself. When you want to update data, you can only \"create a new value to replace the old one.\" Objects include Array, Function, and Objects. They are mutable and exist as references. So when we mutate an object or array in a variable, the reference of that variable doesn't change, only the content is modified. Therefore, when you want to change a variable's reference or avoid modifying the content of an existing object or array, you should create a brand new object or array to replace the old one.\n\nTo identify a variable's data type, you can use the typeof method. However, there's one exception: typeof null returns \"object,\" which is a historical artifact in JavaScript. Because the cost of fixing this bug was too high, this error still exists today. Another thing to note is that typeof function () { } returns \"function,\" but typeof [ ] returns \"object.\" So to determine whether a variable is an object or an array, you should use the Array.isArray() or Object.prototype.toString.call() method.\n\nHere are examples of Array.isArray() and Object.prototype.toString.call() methods:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[JavaScript 有哪些資料型別 (data types)? 該怎麼辨別一個變數的資料型別?｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/js-data-types)","src/content/en/about-javascript-data-types.md","cf57b48e27a51d1e",{html:28,metadata:29},"<p>JavaScript has two main data types: primitives and objects. Primitives include String, Boolean, Number, BigInt, Undefined, Null, and Symbol. They are immutable, meaning we cannot change the value itself. When you want to update data, you can only “create a new value to replace the old one.” Objects include Array, Function, and Objects. They are mutable and exist as references. So when we mutate an object or array in a variable, the reference of that variable doesn’t change, only the content is modified. Therefore, when you want to change a variable’s reference or avoid modifying the content of an existing object or array, you should create a brand new object or array to replace the old one.</p>\n<p>To identify a variable’s data type, you can use the typeof method. However, there’s one exception: typeof null returns “object,” which is a historical artifact in JavaScript. Because the cost of fixing this bug was too high, this error still exists today. Another thing to note is that typeof function () { } returns “function,” but typeof [ ] returns “object.” So to determine whether a variable is an object or an array, you should use the Array.isArray() or Object.prototype.toString.call() method.</p>\n<p>Here are examples of Array.isArray() and Object.prototype.toString.call() methods:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-data-types\">JavaScript 有哪些資料型別 (data types)? 該怎麼辨別一個變數的資料型別?｜ ExplainThis</a></p>",{headings:30,localImagePaths:35,remoteImagePaths:36,frontmatter:37,imagePaths:41},[31],{depth:32,slug:33,text:34},2,"reference","Reference",[],[],{title:14,subtitle:15,author:16,imageWebp:17,imagePng:18,imgAlt:14,creationDate:38,updateDate:39,tags:40,featured:23},["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],[],"about-javascript-data-types.md","css-display-layout-modes",{id:43,data:45,body:54,filePath:55,digest:56,rendered:57,legacyId:90},{title:46,subtitle:47,author:16,imageWebp:48,imagePng:49,imgAlt:46,creationDate:50,updateDate:51,tags:52,featured:23},"CSS Display Layout Modes","The CSS display property determines how an element is arranged on a page and affects the layout of its internal and surrounding elements.","/images/articles/webp/css-display-layout-modes.webp","/images/articles/png/css-display-layout-modes.png",["Date","2023-01-22T00:00:00.000Z"],["Date","2023-01-22T00:00:00.000Z"],[53],"CSS","### display: block\r\n\r\nBy default, it occupies the entire width of the container, pushing adjacent elements to the next line.\r\n\r\n### display: inline\r\n\r\nSimilar to naturally flowing text, it occupies space determined by its content, with subsequent elements positioned immediately after it. You cannot arbitrarily control the width and height of inline elements.\r\n\r\n### display: inline-block\r\n\r\nLaid out as inline, but with block properties meaning you have absolute control over its dimensions. However, it doesn't occupy the entire horizontal space, allowing elements to be adjacent to each other.\r\n\r\n### display: flex\r\n\r\nPlease refer to my article [CSS Flexbox Implementation Cheatsheet](/articles/css-flexbox-implementation-cheatsheet)\r\n\r\n### display: grid\r\n\r\nPlease refer to my article [CSS GRID Implementation Cheatsheet](/articles/css-grid-implementation-cheatsheet)\r\n\r\n### display: none\r\n\r\nThis setting makes the element disappear.\r\n\r\n### Others\r\n\r\nThe website [htmlreference.io](https://htmlreference.io) allows you to quickly view elements and their display properties.","src/content/en/css-display-layout-modes.md","8e33d64ffcea6a31",{html:58,metadata:59},"<h3 id=\"display-block\">display: block</h3>\n<p>By default, it occupies the entire width of the container, pushing adjacent elements to the next line.</p>\n<h3 id=\"display-inline\">display: inline</h3>\n<p>Similar to naturally flowing text, it occupies space determined by its content, with subsequent elements positioned immediately after it. You cannot arbitrarily control the width and height of inline elements.</p>\n<h3 id=\"display-inline-block\">display: inline-block</h3>\n<p>Laid out as inline, but with block properties meaning you have absolute control over its dimensions. However, it doesn’t occupy the entire horizontal space, allowing elements to be adjacent to each other.</p>\n<h3 id=\"display-flex\">display: flex</h3>\n<p>Please refer to my article <a href=\"/articles/css-flexbox-implementation-cheatsheet\">CSS Flexbox Implementation Cheatsheet</a></p>\n<h3 id=\"display-grid\">display: grid</h3>\n<p>Please refer to my article <a href=\"/articles/css-grid-implementation-cheatsheet\">CSS GRID Implementation Cheatsheet</a></p>\n<h3 id=\"display-none\">display: none</h3>\n<p>This setting makes the element disappear.</p>\n<h3 id=\"others\">Others</h3>\n<p>The website <a href=\"https://htmlreference.io\">htmlreference.io</a> allows you to quickly view elements and their display properties.</p>",{headings:60,localImagePaths:83,remoteImagePaths:84,frontmatter:85,imagePaths:89},[61,65,68,71,74,77,80],{depth:62,slug:63,text:64},3,"display-block","display: block",{depth:62,slug:66,text:67},"display-inline","display: inline",{depth:62,slug:69,text:70},"display-inline-block","display: inline-block",{depth:62,slug:72,text:73},"display-flex","display: flex",{depth:62,slug:75,text:76},"display-grid","display: grid",{depth:62,slug:78,text:79},"display-none","display: none",{depth:62,slug:81,text:82},"others","Others",[],[],{title:46,subtitle:47,author:16,imageWebp:48,imagePng:49,imgAlt:46,creationDate:86,updateDate:87,tags:88,featured:23},["Date","2023-01-22T00:00:00.000Z"],["Date","2023-01-22T00:00:00.000Z"],[53],[],"css-display-layout-modes.md","differences-between-equals-strict-equals-and-objectis-in-javascript",{id:91,data:93,body:101,filePath:102,digest:103,rendered:104,legacyId:125},{title:94,subtitle:95,author:16,imageWebp:96,imagePng:97,imgAlt:94,creationDate:98,updateDate:99,tags:100,featured:23},"Differences between ==, === and Object.is() in JavaScript","== performs type coercion and value comparison; === doesn't perform type coercion but compares values; Object.is() compares if two values are the same.","/images/articles/webp/differences-between-equals-strict-equals-and-objectis-in-javascript.webp","/images/articles/png/differences-between-equals-strict-equals-and-objectis-in-javascript.png",["Date","2024-10-27T00:00:00.000Z"],["Date","2024-10-27T00:00:00.000Z"],[22],"## == Loose Equality\n\nBefore comparing two values, it performs type coercion and value conversion\n\n- `console.log(1 == \"1\");` // true\n\n- `console.log(0 == false);` // true\n\n- `console.log(undefined == null);` // true\n\n## === Strict Equality\n\nIt doesn't perform type coercion or value conversion, but there are two exceptions:\n\n- `console.log(+0 === -0);` // true\n\n- `console.log(NaN === NaN);` // false\n\n## Object.is() Same-Value Equality\n\nAs the name suggests, it compares if two values are the same (despite starting with \"Object\", it can compare any two values). The two issues encountered with === mentioned above can be effectively distinguished using Object.is:\n\n- `console.log(Object.is(+0, -0));` // false\n\n- `console.log(Object.is(NaN, NaN));` // true\n\n## Reference\n\n[Differences between ==, === and Object.is() in JavaScript | ExplainThis](https://www.explainthis.io/zh-hant/swe/js-equality)","src/content/en/differences-between-equals-strict-equals-and-objectis-in-javascript.md","5f936501ff1fd8bf",{html:105,metadata:106},"<h2 id=\"-loose-equality\">== Loose Equality</h2>\n<p>Before comparing two values, it performs type coercion and value conversion</p>\n<ul>\n<li>\n<p><code>console.log(1 == \"1\");</code> // true</p>\n</li>\n<li>\n<p><code>console.log(0 == false);</code> // true</p>\n</li>\n<li>\n<p><code>console.log(undefined == null);</code> // true</p>\n</li>\n</ul>\n<h2 id=\"-strict-equality\">=== Strict Equality</h2>\n<p>It doesn’t perform type coercion or value conversion, but there are two exceptions:</p>\n<ul>\n<li>\n<p><code>console.log(+0 === -0);</code> // true</p>\n</li>\n<li>\n<p><code>console.log(NaN === NaN);</code> // false</p>\n</li>\n</ul>\n<h2 id=\"objectis-same-value-equality\">Object.is() Same-Value Equality</h2>\n<p>As the name suggests, it compares if two values are the same (despite starting with “Object”, it can compare any two values). The two issues encountered with === mentioned above can be effectively distinguished using Object.is:</p>\n<ul>\n<li>\n<p><code>console.log(Object.is(+0, -0));</code> // false</p>\n</li>\n<li>\n<p><code>console.log(Object.is(NaN, NaN));</code> // true</p>\n</li>\n</ul>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-equality\">Differences between ==, === and Object.is() in JavaScript | ExplainThis</a></p>",{headings:107,localImagePaths:118,remoteImagePaths:119,frontmatter:120,imagePaths:124},[108,111,114,117],{depth:32,slug:109,text:110},"-loose-equality","== Loose Equality",{depth:32,slug:112,text:113},"-strict-equality","=== Strict Equality",{depth:32,slug:115,text:116},"objectis-same-value-equality","Object.is() Same-Value Equality",{depth:32,slug:33,text:34},[],[],{title:94,subtitle:95,author:16,imageWebp:96,imagePng:97,imgAlt:94,creationDate:121,updateDate:122,tags:123,featured:23},["Date","2024-10-27T00:00:00.000Z"],["Date","2024-10-27T00:00:00.000Z"],[22],[],"differences-between-equals-strict-equals-and-objectis-in-javascript.md","css-grid-implementation-cheatsheet",{id:126,data:128,body:137,filePath:138,digest:139,rendered:140,legacyId:220},{title:129,subtitle:130,author:16,imageWebp:131,imagePng:132,imgAlt:129,creationDate:133,updateDate:134,tags:135,featured:136},"CSS GRID Implementation Cheatsheet","CSS Grid is a powerful two-dimensional layout system that helps us control the arrangement and size of web elements more flexibly.","/images/articles/webp/css-grid-implementation-cheatsheet.webp","/images/articles/png/css-grid-implementation-cheatsheet.png",["Date","2024-02-11T00:00:00.000Z"],["Date","2024-02-11T00:00:00.000Z"],[53],true,"CSS Grid is a powerful two-dimensional layout system that helps us control the arrangement and size of web elements more flexibly.\r\n\r\nIt allows designers to have precise control over rows and columns, creating complex layouts without relying on traditional techniques like floats or positioning.\r\n\r\nHere I'm sharing my implementation notes on CSS GRID after reading the article [CSS Grid Layout Guide](https://css-tricks.com/snippets/css/complete-guide-grid/).\r\n\r\n## Table of Contents\r\n\r\n- [Properties for the Parent (Grid Container)](#properties-for-the-parent-grid-container)\r\n  - [Declaration](#declaration)\r\n    - [display](#display)\r\n  - [Grid](#grid)\r\n    - [grid-template-columns / grid-template-rows](#grid-template-columns--grid-template-rows)\r\n    - [grid-template-areas](#grid-template-areas)\r\n    - [grid-auto-rows / grid-auto-columns](#grid-auto-rows--grid-auto-columns)\r\n    - [grid-auto-flow](#grid-auto-flow)\r\n  - [Container Overall](#container-overall)\r\n    - [align-content](#align-content)\r\n    - [justify-content](#justify-content)\r\n    - [place-content](#place-content)\r\n  - [Within Container](#within-container)\r\n    - [align-items](#align-items)\r\n    - [justify-items](#justify-items)\r\n    - [place-items](#place-items)\r\n  - [Grid Gaps](#grid-gaps)\r\n    - [row-gap / column-gap](#row-gap--column-gap)\r\n    - [gap](#gap)\r\n- [Properties for the Children (Grid Items)](#properties-for-the-children-grid-items)\r\n  - [grid-column-start / grid-column-end / grid-row-start / grid-row-end](#grid-column-start--grid-column-end--grid-row-start--grid-row-end)\r\n  - [grid-column / grid-row](#grid-column--grid-row)\r\n  - [grid-area](#grid-area)\r\n  - [align-self](#align-self)\r\n  - [justify-self](#justify-self)\r\n  - [place-self](#place-self)\r\n- [Reference](#reference)\r\n\r\n## Properties for the Parent (Grid Container)\r\n\r\n### **Declaration**\r\n\r\n#### **display**\r\n\r\n- Declaring that I want to use grid\r\n\r\n<!-- ```css\r\n.container {\r\n  display: grid | inline-grid;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/display.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **Grid**\r\n\r\n#### **grid-template-columns / grid-template-rows**\r\n\r\n- Grid line length & intersection point names\r\n- Can directly write width / height numbers, or add \\[custom names\\] to name the grid lines\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\r\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n- A single grid line can have multiple names\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n- You can use repeat() to simplify content\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: repeat(3, 20px [col-start]);\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **grid-template-areas**\r\n\r\n- Grid area layout (to be used with grid-area)\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-area: header;\r\n}\r\n.item-b {\r\n  grid-area: main;\r\n}\r\n.item-c {\r\n  grid-area: sidebar;\r\n}\r\n.item-d {\r\n  grid-area: footer;\r\n}\r\n\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 50px 50px 50px 50px;\r\n  grid-template-rows: auto;\r\n  grid-template-areas:\r\n    \"header header header header\"\r\n    \"main main . sidebar\"\r\n    \"footer footer footer footer\";\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **grid-auto-rows / grid-auto-columns**\r\n\r\n- Implicit grid line length\r\n- Specifies the length of any automatically generated implicit grid lines. We can understand how grid-auto-rows / grid-auto-columns are created based on the following process:\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-rows: 90px 90px;\r\n  grid-template-columns: 60px 60px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-column: 1 / 2;\r\n  grid-row: 2 / 3;\r\n}\r\n.item-b {\r\n  grid-column: 5 / 6;\r\n  grid-row: 2 / 3;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-auto-columns: 60px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **grid-auto-flow**\r\n\r\n- Flow direction for unpositioned items\r\n- If we have items that are not explicitly positioned on the grid, the auto-placement algorithm will automatically place these items on the grid. This property controls how the auto-placement algorithm works, determining the flow direction of unpositioned items.\r\n\r\nHere's an example:\r\n\r\n<!-- ```css\r\n<section class=\"container\">\r\n  <div class=\"item-a\">item-a</div>\r\n  <div class=\"item-b\">item-b</div>\r\n  <div class=\"item-c\">item-c</div>\r\n  <div class=\"item-d\">item-d</div>\r\n  <div class=\"item-e\">item-e</div>\r\n</section>\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nWe defined a grid with five columns and two rows, and set grid-auto-flow to row (which is also the default value):\r\n\r\n<!-- ```css\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 60px 60px 60px 60px 60px;\r\n  grid-template-rows: 30px 30px;\r\n  grid-auto-flow: row;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nWhen placing items on the grid, we only specified positions for two of the items:\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-column: 1;\r\n  grid-row: 1 / 3;\r\n}\r\n.item-e {\r\n  grid-column: 5;\r\n  grid-row: 1 / 3;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nBecause we set grid-auto-flow to row, the grid will look like this:\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\nIf we change grid-auto-flow to column, then item-b, item-c, and item-d will flow down along the columns:\r\n\r\n<!-- ```css\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 60px 60px 60px 60px 60px;\r\n  grid-template-rows: 30px 30px;\r\n  grid-auto-flow: column;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(5).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(6).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **Container Overall**\r\n\r\n#### **align-content**\r\n\r\n- Vertical alignment of the entire container\r\n\r\n<!-- ```css\r\n.container {\r\n  align-content: start | end | center | stretch | space-around | space-between | space-evenly;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-content**\r\n\r\n- Horizontal alignment of the entire container\r\n\r\n<!-- ```css\r\n.container {\r\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **place-content**\r\n\r\n- Vertical + horizontal alignment of the entire container\r\n- Usage: place-content: align-content justify-content; You can also set just one value, which means align-content = justify-content\r\n\r\n<!-- ```css\r\n.center {\r\n  display: grid;\r\n  place-content: center;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **Within Container**\r\n\r\n#### **align-items**\r\n\r\n- Vertical alignment of content within each grid cell\r\n\r\n<!-- ```css\r\n.container {\r\n  align-items: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-items**\r\n\r\n- Horizontal alignment of content within each grid cell\r\n\r\n<!-- ```css\r\n.container {\r\n  justify-items: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **place-items**\r\n\r\n- Vertical + horizontal alignment of content within each grid cell\r\n- Usage: place-items: align-items justify-items; You can also set just one value, which means align-items = justify-items\r\n\r\n<!-- ```css\r\n.center {\r\n  display: grid;\r\n  place-items: center;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **Grid Gaps**\r\n\r\n#### **row-gap / column-gap**\r\n\r\n- Gaps between grid cells\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: 100px 50px 100px;\r\n  grid-template-rows: 80px auto 80px;\r\n  row-gap: 15px;\r\n  column-gap: 10px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **gap**\r\n\r\n- Gaps between grid cells\r\n- Usage: gap: row-gap column-gap; You can also set just one value, which means row-gap = column-gap\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: 100px 50px 100px;\r\n  grid-template-rows: 80px auto 80px;\r\n  gap: 15px 10px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Properties for the Children(Grid Items)\r\n\r\n#### **grid-column-start / grid-column-end / grid-row-start / grid-row-end**\r\n\r\n- Determines which grid cell the item starts and ends at\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-column-start: 2;\r\n  grid-column-end: five;\r\n  grid-row-start: row1-start;\r\n  grid-row-end: 3;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```css\r\n.item-b {\r\n  grid-column-start: 1;\r\n  grid-column-end: span col4-start;\r\n  grid-row-start: 2;\r\n  grid-row-end: span 2;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n- Notes\r\n  - If grid-column-end or grid-row-end is not declared, the item will span 1 grid track by default.\r\n  - Items can overlap each other. You can use z-index to control their stacking order.\r\n\r\n#### **grid-column / grid-row**\r\n\r\n- Determines which grid cell the item starts and ends at\r\n\r\n<!-- ```css\r\n.item-c {\r\n  grid-column: 3 / span 2;\r\n  grid-row: third-line / 4;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n- Notes\r\n  - If the end line value is not declared, the item will span 1 track by default.\r\n\r\n#### **grid-area**\r\n\r\n- Determines which grid cell the item starts and ends at\r\n\r\n<!-- ```css\r\n.item {\r\n  grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n- As a way to assign a name to an item:\r\n\r\n<!-- ```css\r\n.item-d {\r\n  grid-area: header;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n- As a shorthand (short-shorthand) to set grid-row-start + grid-column-start + grid-row-end + grid-column-end simultaneously:\r\n\r\n<!-- ```css\r\n.item-d {\r\n  grid-area: 1 / col4-start / last-line / 6;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(5).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **align-self**\r\n\r\n- Vertical alignment of this grid content\r\n\r\n<!-- ```css\r\n.item {\r\n  align-self: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-self**\r\n\r\n- Horizontal alignment of this grid content\r\n\r\n<!-- ```css\r\n.item {\r\n  justify-self: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-self.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **place-self**\r\n\r\n- Vertical + horizontal alignment of this grid content\r\n- Usage: place-self: align-self justify-self; You can also set just one value, which means align-self = justify-self\r\n\r\n<!-- ```css\r\n.item-a {\r\n  place-self: center;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Reference\r\n\r\n[CSS Grid Layout Guide | CSS-Tricks](https://css-tricks.com/snippets/css/complete-guide-grid/)","src/content/en/css-grid-implementation-cheatsheet.md","d874cbd256baaac5",{html:141,metadata:142},"<p>CSS Grid is a powerful two-dimensional layout system that helps us control the arrangement and size of web elements more flexibly.</p>\n<p>It allows designers to have precise control over rows and columns, creating complex layouts without relying on traditional techniques like floats or positioning.</p>\n<p>Here I’m sharing my implementation notes on CSS GRID after reading the article <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS Grid Layout Guide</a>.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#properties-for-the-parent-grid-container\">Properties for the Parent (Grid Container)</a>\n<ul>\n<li><a href=\"#declaration\">Declaration</a>\n<ul>\n<li><a href=\"#display\">display</a></li>\n</ul>\n</li>\n<li><a href=\"#grid\">Grid</a>\n<ul>\n<li><a href=\"#grid-template-columns--grid-template-rows\">grid-template-columns / grid-template-rows</a></li>\n<li><a href=\"#grid-template-areas\">grid-template-areas</a></li>\n<li><a href=\"#grid-auto-rows--grid-auto-columns\">grid-auto-rows / grid-auto-columns</a></li>\n<li><a href=\"#grid-auto-flow\">grid-auto-flow</a></li>\n</ul>\n</li>\n<li><a href=\"#container-overall\">Container Overall</a>\n<ul>\n<li><a href=\"#align-content\">align-content</a></li>\n<li><a href=\"#justify-content\">justify-content</a></li>\n<li><a href=\"#place-content\">place-content</a></li>\n</ul>\n</li>\n<li><a href=\"#within-container\">Within Container</a>\n<ul>\n<li><a href=\"#align-items\">align-items</a></li>\n<li><a href=\"#justify-items\">justify-items</a></li>\n<li><a href=\"#place-items\">place-items</a></li>\n</ul>\n</li>\n<li><a href=\"#grid-gaps\">Grid Gaps</a>\n<ul>\n<li><a href=\"#row-gap--column-gap\">row-gap / column-gap</a></li>\n<li><a href=\"#gap\">gap</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#properties-for-the-children-grid-items\">Properties for the Children (Grid Items)</a>\n<ul>\n<li><a href=\"#grid-column-start--grid-column-end--grid-row-start--grid-row-end\">grid-column-start / grid-column-end / grid-row-start / grid-row-end</a></li>\n<li><a href=\"#grid-column--grid-row\">grid-column / grid-row</a></li>\n<li><a href=\"#grid-area\">grid-area</a></li>\n<li><a href=\"#align-self\">align-self</a></li>\n<li><a href=\"#justify-self\">justify-self</a></li>\n<li><a href=\"#place-self\">place-self</a></li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"properties-for-the-parent-grid-container\">Properties for the Parent (Grid Container)</h2>\n<h3 id=\"declaration\"><strong>Declaration</strong></h3>\n<h4 id=\"display\"><strong>display</strong></h4>\n<ul>\n<li>Declaring that I want to use grid</li>\n</ul>\n<!-- ```css\n.container {\n  display: grid | inline-grid;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/display.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"grid\"><strong>Grid</strong></h3>\n<h4 id=\"grid-template-columns--grid-template-rows\"><strong>grid-template-columns / grid-template-rows</strong></h4>\n<ul>\n<li>Grid line length &#x26; intersection point names</li>\n<li>Can directly write width / height numbers, or add [custom names] to name the grid lines</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<ul>\n<li>A single grid line can have multiple names</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<ul>\n<li>You can use repeat() to simplify content</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: repeat(3, 20px [col-start]);\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h4 id=\"grid-template-areas\"><strong>grid-template-areas</strong></h4>\n<ul>\n<li>Grid area layout (to be used with grid-area)</li>\n</ul>\n<!-- ```css\n.item-a {\n  grid-area: header;\n}\n.item-b {\n  grid-area: main;\n}\n.item-c {\n  grid-area: sidebar;\n}\n.item-d {\n  grid-area: footer;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"header header header header\"\n    \"main main . sidebar\"\n    \"footer footer footer footer\";\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"grid-auto-rows--grid-auto-columns\"><strong>grid-auto-rows / grid-auto-columns</strong></h4>\n<ul>\n<li>Implicit grid line length</li>\n<li>Specifies the length of any automatically generated implicit grid lines. We can understand how grid-auto-rows / grid-auto-columns are created based on the following process:</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-rows: 90px 90px;\n  grid-template-columns: 60px 60px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<!-- ```css\n.item-a {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n}\n.item-b {\n  grid-column: 5 / 6;\n  grid-row: 2 / 3;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<!-- ```css\n.container {\n  grid-auto-columns: 60px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"grid-auto-flow\"><strong>grid-auto-flow</strong></h4>\n<ul>\n<li>Flow direction for unpositioned items</li>\n<li>If we have items that are not explicitly positioned on the grid, the auto-placement algorithm will automatically place these items on the grid. This property controls how the auto-placement algorithm works, determining the flow direction of unpositioned items.</li>\n</ul>\n<p>Here’s an example:</p>\n<!-- ```css\n<section class=\"container\">\n  <div class=\"item-a\">item-a</div>\n  <div class=\"item-b\">item-b</div>\n  <div class=\"item-c\">item-c</div>\n  <div class=\"item-d\">item-d</div>\n  <div class=\"item-e\">item-e</div>\n</section>\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>We defined a grid with five columns and two rows, and set grid-auto-flow to row (which is also the default value):</p>\n<!-- ```css\n.container {\n  display: grid;\n  grid-template-columns: 60px 60px 60px 60px 60px;\n  grid-template-rows: 30px 30px;\n  grid-auto-flow: row;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>When placing items on the grid, we only specified positions for two of the items:</p>\n<!-- ```css\n.item-a {\n  grid-column: 1;\n  grid-row: 1 / 3;\n}\n.item-e {\n  grid-column: 5;\n  grid-row: 1 / 3;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Because we set grid-auto-flow to row, the grid will look like this:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<p>If we change grid-auto-flow to column, then item-b, item-c, and item-d will flow down along the columns:</p>\n<!-- ```css\n.container {\n  display: grid;\n  grid-template-columns: 60px 60px 60px 60px 60px;\n  grid-template-rows: 30px 30px;\n  grid-auto-flow: column;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(5).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(6).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h3 id=\"container-overall\"><strong>Container Overall</strong></h3>\n<h4 id=\"align-content\"><strong>align-content</strong></h4>\n<ul>\n<li>Vertical alignment of the entire container</li>\n</ul>\n<!-- ```css\n.container {\n  align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-content\"><strong>justify-content</strong></h4>\n<ul>\n<li>Horizontal alignment of the entire container</li>\n</ul>\n<!-- ```css\n.container {\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"place-content\"><strong>place-content</strong></h4>\n<ul>\n<li>Vertical + horizontal alignment of the entire container</li>\n<li>Usage: place-content: align-content justify-content; You can also set just one value, which means align-content = justify-content</li>\n</ul>\n<!-- ```css\n.center {\n  display: grid;\n  place-content: center;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"within-container\"><strong>Within Container</strong></h3>\n<h4 id=\"align-items\"><strong>align-items</strong></h4>\n<ul>\n<li>Vertical alignment of content within each grid cell</li>\n</ul>\n<!-- ```css\n.container {\n  align-items: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-items\"><strong>justify-items</strong></h4>\n<ul>\n<li>Horizontal alignment of content within each grid cell</li>\n</ul>\n<!-- ```css\n.container {\n  justify-items: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"place-items\"><strong>place-items</strong></h4>\n<ul>\n<li>Vertical + horizontal alignment of content within each grid cell</li>\n<li>Usage: place-items: align-items justify-items; You can also set just one value, which means align-items = justify-items</li>\n</ul>\n<!-- ```css\n.center {\n  display: grid;\n  place-items: center;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"grid-gaps\"><strong>Grid Gaps</strong></h3>\n<h4 id=\"row-gap--column-gap\"><strong>row-gap / column-gap</strong></h4>\n<ul>\n<li>Gaps between grid cells</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: 100px 50px 100px;\n  grid-template-rows: 80px auto 80px;\n  row-gap: 15px;\n  column-gap: 10px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"gap\"><strong>gap</strong></h4>\n<ul>\n<li>Gaps between grid cells</li>\n<li>Usage: gap: row-gap column-gap; You can also set just one value, which means row-gap = column-gap</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: 100px 50px 100px;\n  grid-template-rows: 80px auto 80px;\n  gap: 15px 10px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"properties-for-the-childrengrid-items\">Properties for the Children(Grid Items)</h2>\n<h4 id=\"grid-column-start--grid-column-end--grid-row-start--grid-row-end\"><strong>grid-column-start / grid-column-end / grid-row-start / grid-row-end</strong></h4>\n<ul>\n<li>Determines which grid cell the item starts and ends at</li>\n</ul>\n<!-- ```css\n.item-a {\n  grid-column-start: 2;\n  grid-column-end: five;\n  grid-row-start: row1-start;\n  grid-row-end: 3;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<!-- ```css\n.item-b {\n  grid-column-start: 1;\n  grid-column-end: span col4-start;\n  grid-row-start: 2;\n  grid-row-end: span 2;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<ul>\n<li>Notes\n<ul>\n<li>If grid-column-end or grid-row-end is not declared, the item will span 1 grid track by default.</li>\n<li>Items can overlap each other. You can use z-index to control their stacking order.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"grid-column--grid-row\"><strong>grid-column / grid-row</strong></h4>\n<ul>\n<li>Determines which grid cell the item starts and ends at</li>\n</ul>\n<!-- ```css\n.item-c {\n  grid-column: 3 / span 2;\n  grid-row: third-line / 4;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<ul>\n<li>Notes\n<ul>\n<li>If the end line value is not declared, the item will span 1 track by default.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"grid-area\"><strong>grid-area</strong></h4>\n<ul>\n<li>Determines which grid cell the item starts and ends at</li>\n</ul>\n<!-- ```css\n.item {\n  grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<ul>\n<li>As a way to assign a name to an item:</li>\n</ul>\n<!-- ```css\n.item-d {\n  grid-area: header;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<ul>\n<li>As a shorthand (short-shorthand) to set grid-row-start + grid-column-start + grid-row-end + grid-column-end simultaneously:</li>\n</ul>\n<!-- ```css\n.item-d {\n  grid-area: 1 / col4-start / last-line / 6;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(5).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"align-self\"><strong>align-self</strong></h4>\n<ul>\n<li>Vertical alignment of this grid content</li>\n</ul>\n<!-- ```css\n.item {\n  align-self: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-self\"><strong>justify-self</strong></h4>\n<ul>\n<li>Horizontal alignment of this grid content</li>\n</ul>\n<!-- ```css\n.item {\n  justify-self: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-self.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"place-self\"><strong>place-self</strong></h4>\n<ul>\n<li>Vertical + horizontal alignment of this grid content</li>\n<li>Usage: place-self: align-self justify-self; You can also set just one value, which means align-self = justify-self</li>\n</ul>\n<!-- ```css\n.item-a {\n  place-self: center;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS Grid Layout Guide | CSS-Tricks</a></p>",{headings:143,localImagePaths:213,remoteImagePaths:214,frontmatter:215,imagePaths:219},[144,147,150,153,156,159,162,164,167,169,172,174,176,178,181,183,185,187,190,193,195,198,201,204,206,208,210,212],{depth:32,slug:145,text:146},"table-of-contents","Table of Contents",{depth:32,slug:148,text:149},"properties-for-the-parent-grid-container","Properties for the Parent (Grid Container)",{depth:62,slug:151,text:152},"declaration","Declaration",{depth:154,slug:155,text:155},4,"display",{depth:62,slug:157,text:158},"grid","Grid",{depth:154,slug:160,text:161},"grid-template-columns--grid-template-rows","grid-template-columns / grid-template-rows",{depth:154,slug:163,text:163},"grid-template-areas",{depth:154,slug:165,text:166},"grid-auto-rows--grid-auto-columns","grid-auto-rows / grid-auto-columns",{depth:154,slug:168,text:168},"grid-auto-flow",{depth:62,slug:170,text:171},"container-overall","Container Overall",{depth:154,slug:173,text:173},"align-content",{depth:154,slug:175,text:175},"justify-content",{depth:154,slug:177,text:177},"place-content",{depth:62,slug:179,text:180},"within-container","Within Container",{depth:154,slug:182,text:182},"align-items",{depth:154,slug:184,text:184},"justify-items",{depth:154,slug:186,text:186},"place-items",{depth:62,slug:188,text:189},"grid-gaps","Grid Gaps",{depth:154,slug:191,text:192},"row-gap--column-gap","row-gap / column-gap",{depth:154,slug:194,text:194},"gap",{depth:32,slug:196,text:197},"properties-for-the-childrengrid-items","Properties for the Children(Grid Items)",{depth:154,slug:199,text:200},"grid-column-start--grid-column-end--grid-row-start--grid-row-end","grid-column-start / grid-column-end / grid-row-start / grid-row-end",{depth:154,slug:202,text:203},"grid-column--grid-row","grid-column / grid-row",{depth:154,slug:205,text:205},"grid-area",{depth:154,slug:207,text:207},"align-self",{depth:154,slug:209,text:209},"justify-self",{depth:154,slug:211,text:211},"place-self",{depth:32,slug:33,text:34},[],[],{title:129,subtitle:130,author:16,imageWebp:131,imagePng:132,imgAlt:129,creationDate:216,updateDate:217,tags:218,featured:136},["Date","2024-02-11T00:00:00.000Z"],["Date","2024-02-11T00:00:00.000Z"],[53],[],"css-grid-implementation-cheatsheet.md","css-flexbox-implementation-cheatsheet",{id:221,data:223,body:231,filePath:232,digest:233,rendered:234,legacyId:284},{title:224,subtitle:225,author:16,imageWebp:226,imagePng:227,imgAlt:224,creationDate:228,updateDate:229,tags:230,featured:136},"CSS Flexbox Implementation Cheatsheet","CSS Flexbox is a powerful layout model that helps us simplify and make webpage element layouts more flexible.","/images/articles/webp/css-flexbox-implementation-cheatsheet.webp","/images/articles/png/css-flexbox-implementation-cheatsheet.png",["Date","2024-02-04T00:00:00.000Z"],["Date","2024-02-04T00:00:00.000Z"],[53],"CSS Flexbox is a powerful layout model that helps us simplify and make webpage element layouts more flexible.\r\n\r\nIt's particularly suitable for responsive design scenarios, automatically adjusting element sizes and arrangements to adapt to different devices and screen dimensions.\r\n\r\nHere I'm sharing my implementation notes on CSS Flexbox after reading the article [CSS Flexbox Layout Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).\r\n\r\n## Table of Contents\r\n\r\n- [Properties for the Parent (flex container)](#properties-for-the-parent-flex-container)\r\n  - [Declaration](#declaration)\r\n    - [display](#display)\r\n  - [Direction and Wrapping](#direction-and-wrapping)\r\n    - [flex-direction](#flex-direction)\r\n    - [flex-wrap](#flex-wrap)\r\n    - [flex-flow](#flex-flow)\r\n  - [Alignment](#alignment)\r\n    - [align-content](#align-content)\r\n    - [justify-content](#justify-content)\r\n    - [align-items](#align-items)\r\n  - [Spacing](#spacing)\r\n    - [row-gap / column-gap](#row-gap--column-gap)\r\n    - [gap](#gap)\r\n- [Properties for the Children (flex items)](#properties-for-the-children-flex-items)\r\n  - [order](#order)\r\n  - [flex-grow / flex-shrink / flex-basis and their shorthand flex](#flex-grow--flex-shrink--flex-basis-and-their-shorthand-flex)\r\n  - [align-self](#align-self)\r\n- [Other Recommendations](#other-recommendations)\r\n- [Reference](#reference)\r\n\r\n## Properties for the Parent (flex container)\r\n\r\n### Declaration\r\n\r\n#### **display**\r\n\r\n- Declaring that I want to use flex\r\n\r\n<!-- ```css\r\n.container {\r\n  display: flex | inline-flex;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/display.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### Direction and Wrapping\r\n\r\n#### **flex-direction**\r\n\r\n<!-- ```css\r\n.container {\r\n  flex-direction: row | row-reverse | column | column-reverse;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-direction.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-direction.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **flex-wrap**\r\n\r\n<!-- ```css\r\n.container {\r\n  flex-wrap: nowrap | wrap | wrap-reverse;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-wrap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-wrap.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **flex-flow**\r\n\r\n- = flex-direction + flex-wrap\r\n- Default value is row nowrap\r\n\r\n<!-- ```css\r\n.container {\r\n  flex-flow: column wrap;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-flow.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-flow.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### Alignment\r\n\r\n#### **align-content**\r\n\r\n<!-- NOTE: This code will make UI broken. -->\r\n<!-- ```css\r\n.container {\r\n  align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-content**\r\n\r\n<!-- NOTE: This code will make UI broken. -->\r\n<!-- ```css\r\n.container {\r\n  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **align-items**\r\n\r\n<!-- NOTE: This code will make UI broken. -->\r\n<!-- ```css\r\n.container {\r\n  align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **Spacing**\r\n\r\n#### **row-gap / column-gap**\r\n\r\n<!-- ```css\r\n.container {\r\n  display: flex;\r\n  ...\r\n  row-gap: 10px;\r\n  column-gap: 20px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/row-gap+column-gap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/row-gap+column-gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **gap**\r\n\r\n<!-- ```css\r\n.container {\r\n  display: flex;\r\n  ...\r\n  gap: 10px;\r\n  gap: 10px 20px; /* row-gap column gap */\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Properties for the Children (flex items)\r\n\r\n#### **order**\r\n\r\n<!-- ```css\r\n.item {\r\n  order: 5; /* default is 0 */\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/order.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/order.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **flex-grow / flex-shrink / flex-basis and their shorthand flex**\r\n\r\nI feel like I don't fully understand this part yet, and I'm also questioning whether these properties are commonly used in implementation. I've decided to learn more about them when I actually need to use them.\r\n\r\n<!-- NOTE: Save the picture temporarily -->\r\n<!-- <picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture> -->\r\n\r\n#### **align-self**\r\n\r\n<!-- ```css\r\n.item {\r\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Other Recommendations\r\n\r\nYou can test the actual effects at the [Flexbox Playground](https://flexiting.com/playground/) website.\r\n\r\n## Reference\r\n\r\n[CSS Flexbox Layout Guide | CSS-Tricks](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)","src/content/en/css-flexbox-implementation-cheatsheet.md","7a056f95b5791d2f",{html:235,metadata:236},"<p>CSS Flexbox is a powerful layout model that helps us simplify and make webpage element layouts more flexible.</p>\n<p>It’s particularly suitable for responsive design scenarios, automatically adjusting element sizes and arrangements to adapt to different devices and screen dimensions.</p>\n<p>Here I’m sharing my implementation notes on CSS Flexbox after reading the article <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS Flexbox Layout Guide</a>.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#properties-for-the-parent-flex-container\">Properties for the Parent (flex container)</a>\n<ul>\n<li><a href=\"#declaration\">Declaration</a>\n<ul>\n<li><a href=\"#display\">display</a></li>\n</ul>\n</li>\n<li><a href=\"#direction-and-wrapping\">Direction and Wrapping</a>\n<ul>\n<li><a href=\"#flex-direction\">flex-direction</a></li>\n<li><a href=\"#flex-wrap\">flex-wrap</a></li>\n<li><a href=\"#flex-flow\">flex-flow</a></li>\n</ul>\n</li>\n<li><a href=\"#alignment\">Alignment</a>\n<ul>\n<li><a href=\"#align-content\">align-content</a></li>\n<li><a href=\"#justify-content\">justify-content</a></li>\n<li><a href=\"#align-items\">align-items</a></li>\n</ul>\n</li>\n<li><a href=\"#spacing\">Spacing</a>\n<ul>\n<li><a href=\"#row-gap--column-gap\">row-gap / column-gap</a></li>\n<li><a href=\"#gap\">gap</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#properties-for-the-children-flex-items\">Properties for the Children (flex items)</a>\n<ul>\n<li><a href=\"#order\">order</a></li>\n<li><a href=\"#flex-grow--flex-shrink--flex-basis-and-their-shorthand-flex\">flex-grow / flex-shrink / flex-basis and their shorthand flex</a></li>\n<li><a href=\"#align-self\">align-self</a></li>\n</ul>\n</li>\n<li><a href=\"#other-recommendations\">Other Recommendations</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"properties-for-the-parent-flex-container\">Properties for the Parent (flex container)</h2>\n<h3 id=\"declaration\">Declaration</h3>\n<h4 id=\"display\"><strong>display</strong></h4>\n<ul>\n<li>Declaring that I want to use flex</li>\n</ul>\n<!-- ```css\n.container {\n  display: flex | inline-flex;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/display.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"direction-and-wrapping\">Direction and Wrapping</h3>\n<h4 id=\"flex-direction\"><strong>flex-direction</strong></h4>\n<!-- ```css\n.container {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-direction.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-direction.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"flex-wrap\"><strong>flex-wrap</strong></h4>\n<!-- ```css\n.container {\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-wrap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-wrap.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"flex-flow\"><strong>flex-flow</strong></h4>\n<ul>\n<li>= flex-direction + flex-wrap</li>\n<li>Default value is row nowrap</li>\n</ul>\n<!-- ```css\n.container {\n  flex-flow: column wrap;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-flow.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-flow.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"alignment\">Alignment</h3>\n<h4 id=\"align-content\"><strong>align-content</strong></h4>\n<!-- NOTE: This code will make UI broken. -->\n<!-- ```css\n.container {\n  align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-content\"><strong>justify-content</strong></h4>\n<!-- NOTE: This code will make UI broken. -->\n<!-- ```css\n.container {\n  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"align-items\"><strong>align-items</strong></h4>\n<!-- NOTE: This code will make UI broken. -->\n<!-- ```css\n.container {\n  align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h3 id=\"spacing\"><strong>Spacing</strong></h3>\n<h4 id=\"row-gap--column-gap\"><strong>row-gap / column-gap</strong></h4>\n<!-- ```css\n.container {\n  display: flex;\n  ...\n  row-gap: 10px;\n  column-gap: 20px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/row-gap+column-gap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/row-gap+column-gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h4 id=\"gap\"><strong>gap</strong></h4>\n<!-- ```css\n.container {\n  display: flex;\n  ...\n  gap: 10px;\n  gap: 10px 20px; /* row-gap column gap */\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"properties-for-the-children-flex-items\">Properties for the Children (flex items)</h2>\n<h4 id=\"order\"><strong>order</strong></h4>\n<!-- ```css\n.item {\n  order: 5; /* default is 0 */\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/order.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/order.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"flex-grow--flex-shrink--flex-basis-and-their-shorthand-flex\"><strong>flex-grow / flex-shrink / flex-basis and their shorthand flex</strong></h4>\n<p>I feel like I don’t fully understand this part yet, and I’m also questioning whether these properties are commonly used in implementation. I’ve decided to learn more about them when I actually need to use them.</p>\n<!-- NOTE: Save the picture temporarily -->\n<!-- <picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture> -->\n<h4 id=\"align-self\"><strong>align-self</strong></h4>\n<!-- ```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h2 id=\"other-recommendations\">Other Recommendations</h2>\n<p>You can test the actual effects at the <a href=\"https://flexiting.com/playground/\">Flexbox Playground</a> website.</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS Flexbox Layout Guide | CSS-Tricks</a></p>",{headings:237,localImagePaths:277,remoteImagePaths:278,frontmatter:279,imagePaths:283},[238,239,242,243,244,247,249,251,253,256,257,258,259,262,263,264,267,269,272,273,276],{depth:32,slug:145,text:146},{depth:32,slug:240,text:241},"properties-for-the-parent-flex-container","Properties for the Parent (flex container)",{depth:62,slug:151,text:152},{depth:154,slug:155,text:155},{depth:62,slug:245,text:246},"direction-and-wrapping","Direction and Wrapping",{depth:154,slug:248,text:248},"flex-direction",{depth:154,slug:250,text:250},"flex-wrap",{depth:154,slug:252,text:252},"flex-flow",{depth:62,slug:254,text:255},"alignment","Alignment",{depth:154,slug:173,text:173},{depth:154,slug:175,text:175},{depth:154,slug:182,text:182},{depth:62,slug:260,text:261},"spacing","Spacing",{depth:154,slug:191,text:192},{depth:154,slug:194,text:194},{depth:32,slug:265,text:266},"properties-for-the-children-flex-items","Properties for the Children (flex items)",{depth:154,slug:268,text:268},"order",{depth:154,slug:270,text:271},"flex-grow--flex-shrink--flex-basis-and-their-shorthand-flex","flex-grow / flex-shrink / flex-basis and their shorthand flex",{depth:154,slug:207,text:207},{depth:32,slug:274,text:275},"other-recommendations","Other Recommendations",{depth:32,slug:33,text:34},[],[],{title:224,subtitle:225,author:16,imageWebp:226,imagePng:227,imgAlt:224,creationDate:280,updateDate:281,tags:282,featured:136},["Date","2024-02-04T00:00:00.000Z"],["Date","2024-02-04T00:00:00.000Z"],[53],[],"css-flexbox-implementation-cheatsheet.md","git-implementation-cheatsheet-for-beginners",{id:285,data:287,body:296,filePath:297,digest:298,rendered:299,legacyId:335},{title:288,subtitle:289,author:16,imageWebp:290,imagePng:291,imgAlt:288,creationDate:292,updateDate:293,tags:294,featured:136},"Git Implementation Cheatsheet for Beginners","Git is a distributed version control system primarily used to manage and track code changes, particularly suitable for collaborative development projects.","/images/articles/webp/git-implementation-cheatsheet-for-beginners.webp","/images/articles/png/git-implementation-cheatsheet-for-beginners.png",["Date","2023-06-15T00:00:00.000Z"],["Date","2023-06-15T00:00:00.000Z"],[295],"Git","The first time I encountered Git, I immediately fell in love with it. Before I started learning programming, I never imagined that files could be managed in such a systematic way, clearly showing the differences between versions and who wrote what. If you regret making changes, you can easily revert to previous versions.\r\n\r\nWith Git, version control and collaboration become much easier and clearer. I even think all non-engineers should learn to use version control systems like this for file management.\r\n\r\nSo in this article, I want to organize my current Git usage habits (workflow).\r\n\r\nAlthough there are still many Git features I don't know how to use, I can share my typical usage patterns as a personal implementation cheat sheet, helping beginners to quickly get started!\r\n\r\nThe content is mainly divided into two parts: **[Basic Workflow](#basic-workflow)** and **[Collaboration](#collaboration)**, with some additional explanations at the end.\r\n\r\n## Table of Contents\r\n\r\n- [Basic Workflow](#basic-workflow)\r\n- [Additional: What if you regret after committing (before pushing to GitHub)?](#additional-what-if-you-regret-after-committing-before-pushing-to-github)\r\n  - [Scenario 1: You committed by mistake (you want to keep your code changes in the working directory)](#scenario-1-you-committed-by-mistake-you-want-to-keep-your-code-changes-in-the-working-directory)\r\n  - [Scenario 2: You broke your code (you want to completely revert)](#scenario-2-you-broke-your-code-you-want-to-completely-revert)\r\n- [Collaboration](#collaboration)\r\n- [Additional: Reviewing Others' PRs](#additional-reviewing-others-prs)\r\n- [Other Knowledge](#other-knowledge)\r\n- [Other Commands](#other-commands)\r\n\r\n### **Basic Workflow**\r\n\r\n1. `git init`\r\n\r\n   Initialize a project (start version control for this folder)\r\n\r\n2. `touch .gitignore`\r\n\r\n   Create a file to specify which files to ignore\r\n\r\n3. `git add .`\r\n\r\n   When code changes are complete, add all files to the version control system\r\n\r\n4. `git commit -m \"[commit message]\"`\r\n\r\n   Submit a change and write your change message (commit content)\r\n\r\n   **Recommended git commit message format\r\n   (I referenced this article: [git commit message recommended format](https://wadehuanglearning.blogspot.com/2019/05/commit-commit-commit-why-what-commit.html)):**\r\n\r\n   1. feat: Add/modify features.\r\n   2. fix: Fix bugs.\r\n   3. docs: Documentation.\r\n   4. style: Formatting (changes that don't affect code execution like white-space, formatting, missing semi-colons, etc).\r\n   5. refactor: Refactoring (code changes that are neither new features nor bug fixes).\r\n   6. perf: Performance improvements (A code change that improves performance).\r\n   7. test: Adding tests (when adding missing tests).\r\n   8. chore: Changes to build processes or auxiliary tools (maintain).\r\n   9. revert: Undo previous commits, e.g., revert: type(scope): subject (reverting version: xxxx).\r\n\r\nSteps 3 & 4 will be repeated continuously\r\n\r\n5. GitHub + new repository\r\n\r\n   Upload your project to GitHub (follow the instructions provided by GitHub)\r\n\r\n6. `git push origin [branch name]`\r\n\r\n   After committing, you can push this branch to GitHub\r\n\r\nWhenever you want to update your code on GitHub to the latest status, execute step 6\r\n\r\n### **Additional: What if you regret after committing (before pushing to GitHub)?**\r\n\r\n(For detailed version, refer to [What if I regret my recent commit and want to undo it... - Learn Git for Yourself | Kang-Chung Kao](https://gitbook.tw/chapters/using-git/reset-commit))\r\n\r\n#### Scenario 1: You committed by mistake (you want to keep your code changes in the working directory)\r\n\r\n- `git log --oneline`\r\n\r\n  View a summary of version history\r\n\r\n- `git reset b339b8d^` (replace the number as needed)\r\n  Restore to the version before b339b8d (but the code changes remain)\r\n\r\n#### Scenario 2: You broke your code (you want to completely revert)\r\n\r\n- `git reset --hard HEAD`\r\n\r\n  Restore to the latest committed version\r\n\r\n- `git reset --hard HEAD~1`\r\n  Restore to the previous committed version (to go back further: ~2, ~3, ~4...)\r\n\r\n### **Collaboration**\r\n\r\n1. `git checkout -b [branch name]`\r\n\r\n   Create a new branch and switch to it\r\n\r\n   Alternative approach:\r\n\r\n   1. `git branch [branch name]`\r\n\r\n      Create a new branch\r\n\r\n   2. `git checkout [branch name]`\r\n\r\n      Switch to the branch\r\n\r\n2. (Write code... repeat basic workflow steps 3 & 4)\r\n\r\n3. `git push origin [branch name]`\r\n\r\n   Push to GitHub\r\n\r\n4. Go to your repo and write & create a PR (Pull Request)\r\n\r\n5. Copy the PR link and give it to your partners (like managers, colleagues, etc.)\r\n\r\n6. (After your partner reviews and merges) `git checkout main`\r\n\r\n   Switch to main\r\n\r\n7. `git pull origin main`\r\n\r\n   Pull down the latest changes\r\n\r\n   Alternative approach:\r\n\r\n   1. `git fetch origin`\r\n\r\n      Fetch remote updates\r\n\r\n   2. `git merge origin/main`\r\n\r\n      Merge remote updates\r\n\r\nAfter developing or updating a feature, before creating a PR, it's best to execute steps 6 & 7, then merge the latest main into your branch that's ready for PR. If conflicts occur, resolving them locally before creating the PR is a better approach.\r\n\r\nOne of the biggest differences between collaboration and coding alone is the need to resolve conflicts, which requires more experience.\r\n\r\n### **Additional: Reviewing Others' PRs**\r\n\r\nIf you want to review locally, use steps 1 + 2:\r\n\r\n1. `git fetch origin`\r\n\r\n   Fetch remote updates\r\n\r\n2. `git checkout [branch name]`\r\n\r\n   Switch to the branch\r\n\r\n3. (After checking and approving) `git checkout main`\r\n\r\n   Switch back to the main branch first\r\n\r\n4. `git merge [branch name]`\r\n\r\n   Merge on the main branch\r\n\r\n5. If there are no conflicts, you can smoothly merge into the main branch, but if there are conflicts, you need to resolve them before merging\r\n\r\n   - How to reduce the need to resolve conflicts?\r\n\r\n     1. The art of work distribution\r\n     2. Merge the latest main into your branch before creating a PR\r\n\r\n   - Topic for future collaboration discussions: If there are conflicts, should the reviewer merge or the PR creator merge?\r\n\r\n     Theoretically, the reviewer should merge into the main branch after checking and approving, but in case of conflicts, the PR creator actually understands the code better (since they wrote it). Should the PR creator resolve the conflicts in this case?\r\n\r\n### **Other Knowledge**\r\n\r\n(I referenced [mentor-program-5th/examples/week1](https://github.com/Lidemy/mentor-program-5th/tree/master/examples/week1))\r\n\r\n- When doing version control, the clever Git actually stores \"file differences,\" not creating a folder for each branch or copying files for each commit. Additionally, Git has its own compression algorithm for each file, so it's normal that Git repositories are smaller than your actual files.\r\n\r\n- main/master is just the \"default branch,\" or usually the main branch, but this doesn't mean it's the \"latest branch.\" For example, you can create a branch called \"test\" and keep adding to it without ever merging back to main/master, making \"test\" the latest branch in your project. So master is just a default branch, and the latest content isn't necessarily there.\r\n\r\n- When creating a PR, if you want to change something, you can make changes on your computer, commit, and push again. The PR on GitHub will update automatically - you don't need to do anything else, and certainly don't need to close and reopen the PR. Since a PR is based on a \"branch,\" when the branch updates, the PR content naturally updates with it.\r\n\r\n### **Other Commands**\r\n\r\n- `git clone URL`\r\n\r\n  Copy a GitHub project to your local machine\r\n\r\n- `git status`\r\n\r\n  Check status\r\n\r\n- `git log`\r\n\r\n  View history\r\n\r\n- `git diff`\r\n\r\n  Compare differences (if no parameters are added after the command, it directly compares your working code with the latest version; in this case, looking at the GUI is clearer)\r\n\r\n- `git diff [SHA-1] [SHA-1]`\r\n\r\n  What code changes occurred from version A to version B\r\n\r\n- `git branch`\r\n\r\n  List all current branch names (only local branches)\r\n\r\n- `git branch -v`\r\n\r\n  View the latest commit of each branch\r\n\r\n- `git branch --all`\r\n\r\n  List all current branch names (including remote branches)\r\n\r\n- `git branch -m [original branch name] [new name]`\r\n\r\n  Rename a branch\r\n\r\n- `git branch -d [branch name]`\r\n\r\n  (Scenario) Delete a branch that has been merged\r\n\r\n- `git rebase` workflow\r\n\r\n  1. `git checkout [branch name]`\r\n  2. `git rebase main`\r\n  3. If there are conflicts, start resolving them. After resolving a conflict, use `git add .`\r\n\r\n     -`git rebase --continue`\r\n\r\n     - A vi editor will appear; you can directly save the default commit by pressing :wq, which means save & exit\r\n\r\n- `git rebase squash`\r\n  Combine multiple commits into one (too detailed; when needed, refer to [How to Combine Multiple Commits into One Commit - Learn Git for Yourself | Kang-Chung Kao](https://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit))","src/content/en/git-implementation-cheatsheet-for-beginners.md","8d52293bfebdd319",{html:300,metadata:301},"<p>The first time I encountered Git, I immediately fell in love with it. Before I started learning programming, I never imagined that files could be managed in such a systematic way, clearly showing the differences between versions and who wrote what. If you regret making changes, you can easily revert to previous versions.</p>\n<p>With Git, version control and collaboration become much easier and clearer. I even think all non-engineers should learn to use version control systems like this for file management.</p>\n<p>So in this article, I want to organize my current Git usage habits (workflow).</p>\n<p>Although there are still many Git features I don’t know how to use, I can share my typical usage patterns as a personal implementation cheat sheet, helping beginners to quickly get started!</p>\n<p>The content is mainly divided into two parts: <strong><a href=\"#basic-workflow\">Basic Workflow</a></strong> and <strong><a href=\"#collaboration\">Collaboration</a></strong>, with some additional explanations at the end.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#basic-workflow\">Basic Workflow</a></li>\n<li><a href=\"#additional-what-if-you-regret-after-committing-before-pushing-to-github\">Additional: What if you regret after committing (before pushing to GitHub)?</a>\n<ul>\n<li><a href=\"#scenario-1-you-committed-by-mistake-you-want-to-keep-your-code-changes-in-the-working-directory\">Scenario 1: You committed by mistake (you want to keep your code changes in the working directory)</a></li>\n<li><a href=\"#scenario-2-you-broke-your-code-you-want-to-completely-revert\">Scenario 2: You broke your code (you want to completely revert)</a></li>\n</ul>\n</li>\n<li><a href=\"#collaboration\">Collaboration</a></li>\n<li><a href=\"#additional-reviewing-others-prs\">Additional: Reviewing Others’ PRs</a></li>\n<li><a href=\"#other-knowledge\">Other Knowledge</a></li>\n<li><a href=\"#other-commands\">Other Commands</a></li>\n</ul>\n<h3 id=\"basic-workflow\"><strong>Basic Workflow</strong></h3>\n<ol>\n<li>\n<p><code>git init</code></p>\n<p>Initialize a project (start version control for this folder)</p>\n</li>\n<li>\n<p><code>touch .gitignore</code></p>\n<p>Create a file to specify which files to ignore</p>\n</li>\n<li>\n<p><code>git add .</code></p>\n<p>When code changes are complete, add all files to the version control system</p>\n</li>\n<li>\n<p><code>git commit -m \"[commit message]\"</code></p>\n<p>Submit a change and write your change message (commit content)</p>\n<p><strong>Recommended git commit message format\r\n(I referenced this article: <a href=\"https://wadehuanglearning.blogspot.com/2019/05/commit-commit-commit-why-what-commit.html\">git commit message recommended format</a>):</strong></p>\n<ol>\n<li>feat: Add/modify features.</li>\n<li>fix: Fix bugs.</li>\n<li>docs: Documentation.</li>\n<li>style: Formatting (changes that don’t affect code execution like white-space, formatting, missing semi-colons, etc).</li>\n<li>refactor: Refactoring (code changes that are neither new features nor bug fixes).</li>\n<li>perf: Performance improvements (A code change that improves performance).</li>\n<li>test: Adding tests (when adding missing tests).</li>\n<li>chore: Changes to build processes or auxiliary tools (maintain).</li>\n<li>revert: Undo previous commits, e.g., revert: type(scope): subject (reverting version: xxxx).</li>\n</ol>\n</li>\n</ol>\n<p>Steps 3 &#x26; 4 will be repeated continuously</p>\n<ol start=\"5\">\n<li>\n<p>GitHub + new repository</p>\n<p>Upload your project to GitHub (follow the instructions provided by GitHub)</p>\n</li>\n<li>\n<p><code>git push origin [branch name]</code></p>\n<p>After committing, you can push this branch to GitHub</p>\n</li>\n</ol>\n<p>Whenever you want to update your code on GitHub to the latest status, execute step 6</p>\n<h3 id=\"additional-what-if-you-regret-after-committing-before-pushing-to-github\"><strong>Additional: What if you regret after committing (before pushing to GitHub)?</strong></h3>\n<p>(For detailed version, refer to <a href=\"https://gitbook.tw/chapters/using-git/reset-commit\">What if I regret my recent commit and want to undo it… - Learn Git for Yourself | Kang-Chung Kao</a>)</p>\n<h4 id=\"scenario-1-you-committed-by-mistake-you-want-to-keep-your-code-changes-in-the-working-directory\">Scenario 1: You committed by mistake (you want to keep your code changes in the working directory)</h4>\n<ul>\n<li>\n<p><code>git log --oneline</code></p>\n<p>View a summary of version history</p>\n</li>\n<li>\n<p><code>git reset b339b8d^</code> (replace the number as needed)\r\nRestore to the version before b339b8d (but the code changes remain)</p>\n</li>\n</ul>\n<h4 id=\"scenario-2-you-broke-your-code-you-want-to-completely-revert\">Scenario 2: You broke your code (you want to completely revert)</h4>\n<ul>\n<li>\n<p><code>git reset --hard HEAD</code></p>\n<p>Restore to the latest committed version</p>\n</li>\n<li>\n<p><code>git reset --hard HEAD~1</code>\r\nRestore to the previous committed version (to go back further: ~2, ~3, ~4…)</p>\n</li>\n</ul>\n<h3 id=\"collaboration\"><strong>Collaboration</strong></h3>\n<ol>\n<li>\n<p><code>git checkout -b [branch name]</code></p>\n<p>Create a new branch and switch to it</p>\n<p>Alternative approach:</p>\n<ol>\n<li>\n<p><code>git branch [branch name]</code></p>\n<p>Create a new branch</p>\n</li>\n<li>\n<p><code>git checkout [branch name]</code></p>\n<p>Switch to the branch</p>\n</li>\n</ol>\n</li>\n<li>\n<p>(Write code… repeat basic workflow steps 3 &#x26; 4)</p>\n</li>\n<li>\n<p><code>git push origin [branch name]</code></p>\n<p>Push to GitHub</p>\n</li>\n<li>\n<p>Go to your repo and write &#x26; create a PR (Pull Request)</p>\n</li>\n<li>\n<p>Copy the PR link and give it to your partners (like managers, colleagues, etc.)</p>\n</li>\n<li>\n<p>(After your partner reviews and merges) <code>git checkout main</code></p>\n<p>Switch to main</p>\n</li>\n<li>\n<p><code>git pull origin main</code></p>\n<p>Pull down the latest changes</p>\n<p>Alternative approach:</p>\n<ol>\n<li>\n<p><code>git fetch origin</code></p>\n<p>Fetch remote updates</p>\n</li>\n<li>\n<p><code>git merge origin/main</code></p>\n<p>Merge remote updates</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>After developing or updating a feature, before creating a PR, it’s best to execute steps 6 &#x26; 7, then merge the latest main into your branch that’s ready for PR. If conflicts occur, resolving them locally before creating the PR is a better approach.</p>\n<p>One of the biggest differences between collaboration and coding alone is the need to resolve conflicts, which requires more experience.</p>\n<h3 id=\"additional-reviewing-others-prs\"><strong>Additional: Reviewing Others’ PRs</strong></h3>\n<p>If you want to review locally, use steps 1 + 2:</p>\n<ol>\n<li>\n<p><code>git fetch origin</code></p>\n<p>Fetch remote updates</p>\n</li>\n<li>\n<p><code>git checkout [branch name]</code></p>\n<p>Switch to the branch</p>\n</li>\n<li>\n<p>(After checking and approving) <code>git checkout main</code></p>\n<p>Switch back to the main branch first</p>\n</li>\n<li>\n<p><code>git merge [branch name]</code></p>\n<p>Merge on the main branch</p>\n</li>\n<li>\n<p>If there are no conflicts, you can smoothly merge into the main branch, but if there are conflicts, you need to resolve them before merging</p>\n<ul>\n<li>\n<p>How to reduce the need to resolve conflicts?</p>\n<ol>\n<li>The art of work distribution</li>\n<li>Merge the latest main into your branch before creating a PR</li>\n</ol>\n</li>\n<li>\n<p>Topic for future collaboration discussions: If there are conflicts, should the reviewer merge or the PR creator merge?</p>\n<p>Theoretically, the reviewer should merge into the main branch after checking and approving, but in case of conflicts, the PR creator actually understands the code better (since they wrote it). Should the PR creator resolve the conflicts in this case?</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"other-knowledge\"><strong>Other Knowledge</strong></h3>\n<p>(I referenced <a href=\"https://github.com/Lidemy/mentor-program-5th/tree/master/examples/week1\">mentor-program-5th/examples/week1</a>)</p>\n<ul>\n<li>\n<p>When doing version control, the clever Git actually stores “file differences,” not creating a folder for each branch or copying files for each commit. Additionally, Git has its own compression algorithm for each file, so it’s normal that Git repositories are smaller than your actual files.</p>\n</li>\n<li>\n<p>main/master is just the “default branch,” or usually the main branch, but this doesn’t mean it’s the “latest branch.” For example, you can create a branch called “test” and keep adding to it without ever merging back to main/master, making “test” the latest branch in your project. So master is just a default branch, and the latest content isn’t necessarily there.</p>\n</li>\n<li>\n<p>When creating a PR, if you want to change something, you can make changes on your computer, commit, and push again. The PR on GitHub will update automatically - you don’t need to do anything else, and certainly don’t need to close and reopen the PR. Since a PR is based on a “branch,” when the branch updates, the PR content naturally updates with it.</p>\n</li>\n</ul>\n<h3 id=\"other-commands\"><strong>Other Commands</strong></h3>\n<ul>\n<li>\n<p><code>git clone URL</code></p>\n<p>Copy a GitHub project to your local machine</p>\n</li>\n<li>\n<p><code>git status</code></p>\n<p>Check status</p>\n</li>\n<li>\n<p><code>git log</code></p>\n<p>View history</p>\n</li>\n<li>\n<p><code>git diff</code></p>\n<p>Compare differences (if no parameters are added after the command, it directly compares your working code with the latest version; in this case, looking at the GUI is clearer)</p>\n</li>\n<li>\n<p><code>git diff [SHA-1] [SHA-1]</code></p>\n<p>What code changes occurred from version A to version B</p>\n</li>\n<li>\n<p><code>git branch</code></p>\n<p>List all current branch names (only local branches)</p>\n</li>\n<li>\n<p><code>git branch -v</code></p>\n<p>View the latest commit of each branch</p>\n</li>\n<li>\n<p><code>git branch --all</code></p>\n<p>List all current branch names (including remote branches)</p>\n</li>\n<li>\n<p><code>git branch -m [original branch name] [new name]</code></p>\n<p>Rename a branch</p>\n</li>\n<li>\n<p><code>git branch -d [branch name]</code></p>\n<p>(Scenario) Delete a branch that has been merged</p>\n</li>\n<li>\n<p><code>git rebase</code> workflow</p>\n<ol>\n<li>\n<p><code>git checkout [branch name]</code></p>\n</li>\n<li>\n<p><code>git rebase main</code></p>\n</li>\n<li>\n<p>If there are conflicts, start resolving them. After resolving a conflict, use <code>git add .</code></p>\n<p>-<code>git rebase --continue</code></p>\n<ul>\n<li>A vi editor will appear; you can directly save the default commit by pressing :wq, which means save &#x26; exit</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><code>git rebase squash</code>\r\nCombine multiple commits into one (too detailed; when needed, refer to <a href=\"https://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit\">How to Combine Multiple Commits into One Commit - Learn Git for Yourself | Kang-Chung Kao</a>)</p>\n</li>\n</ul>",{headings:302,localImagePaths:328,remoteImagePaths:329,frontmatter:330,imagePaths:334},[303,304,307,310,313,316,319,322,325],{depth:32,slug:145,text:146},{depth:62,slug:305,text:306},"basic-workflow","Basic Workflow",{depth:62,slug:308,text:309},"additional-what-if-you-regret-after-committing-before-pushing-to-github","Additional: What if you regret after committing (before pushing to GitHub)?",{depth:154,slug:311,text:312},"scenario-1-you-committed-by-mistake-you-want-to-keep-your-code-changes-in-the-working-directory","Scenario 1: You committed by mistake (you want to keep your code changes in the working directory)",{depth:154,slug:314,text:315},"scenario-2-you-broke-your-code-you-want-to-completely-revert","Scenario 2: You broke your code (you want to completely revert)",{depth:62,slug:317,text:318},"collaboration","Collaboration",{depth:62,slug:320,text:321},"additional-reviewing-others-prs","Additional: Reviewing Others’ PRs",{depth:62,slug:323,text:324},"other-knowledge","Other Knowledge",{depth:62,slug:326,text:327},"other-commands","Other Commands",[],[],{title:288,subtitle:289,author:16,imageWebp:290,imagePng:291,imgAlt:288,creationDate:331,updateDate:332,tags:333,featured:136},["Date","2023-06-15T00:00:00.000Z"],["Date","2023-06-15T00:00:00.000Z"],[295],[],"git-implementation-cheatsheet-for-beginners.md","javascript-scope-and-scope-chain-explained",{id:336,data:338,body:346,filePath:347,digest:348,rendered:349,legacyId:361},{title:339,subtitle:340,author:16,imageWebp:341,imagePng:342,imgAlt:339,creationDate:343,updateDate:344,tags:345,featured:23},"JavaScript Scope and Scope Chain Explained","Scope is like a concept of range, which can be divided into global, function scope, and block scope.","/images/articles/webp/javascript-scope-and-scope-chain-explained.webp","/images/articles/png/javascript-scope-and-scope-chain-explained.png",["Date","2024-12-01T00:00:00.000Z"],["Date","2024-12-01T00:00:00.000Z"],[22],"Scope is like a concept of range, defining the area where a value or an expression can be used and found.\n\nIn JavaScript, scope can be divided into global, function scope, and block scope.\n\n- Global scope refers to the global execution environment created when JavaScript code begins execution. Variables defined outside of functions or blocks belong to the global scope. These variables are also called global variables and can be accessed from anywhere in the code.\n\n- Function scope refers to the scope created by a function.\n\n- Block scope appeared after ES6 and is defined within a pair of curly braces. It's important to note that only variables defined with `let` and `const` belong to block scope. Variables defined with `var` only have function scope.\n\nThe scope chain refers to how JavaScript looks up variables. When JavaScript uses a variable, it first tries to find it in the current scope. If the variable isn't found in the current scope, it continues searching up through parent scopes until it reaches the global scope. If the variable still isn't found in the global scope, an error is thrown. This layer-by-layer relationship is called the scope chain.\n\nThe scope chain can be understood through the following code:\n\n<!-- ```js\nlet a = 100;\nfunction find() {\n  console.log(a); // 100\n}\nfind();\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/javascript-scope-and-scope-chain-explained/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/javascript-scope-and-scope-chain-explained/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[Javascript 的作用域 (Scope) 與作用域鏈 (Scope Chain) 是什麼?｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/what-is-scope-and-scope-chain)","src/content/en/javascript-scope-and-scope-chain-explained.md","407988bcb0c6bae3",{html:350,metadata:351},"<p>Scope is like a concept of range, defining the area where a value or an expression can be used and found.</p>\n<p>In JavaScript, scope can be divided into global, function scope, and block scope.</p>\n<ul>\n<li>\n<p>Global scope refers to the global execution environment created when JavaScript code begins execution. Variables defined outside of functions or blocks belong to the global scope. These variables are also called global variables and can be accessed from anywhere in the code.</p>\n</li>\n<li>\n<p>Function scope refers to the scope created by a function.</p>\n</li>\n<li>\n<p>Block scope appeared after ES6 and is defined within a pair of curly braces. It’s important to note that only variables defined with <code>let</code> and <code>const</code> belong to block scope. Variables defined with <code>var</code> only have function scope.</p>\n</li>\n</ul>\n<p>The scope chain refers to how JavaScript looks up variables. When JavaScript uses a variable, it first tries to find it in the current scope. If the variable isn’t found in the current scope, it continues searching up through parent scopes until it reaches the global scope. If the variable still isn’t found in the global scope, an error is thrown. This layer-by-layer relationship is called the scope chain.</p>\n<p>The scope chain can be understood through the following code:</p>\n<!-- ```js\nlet a = 100;\nfunction find() {\n  console.log(a); // 100\n}\nfind();\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/javascript-scope-and-scope-chain-explained/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/javascript-scope-and-scope-chain-explained/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-scope-and-scope-chain\">Javascript 的作用域 (Scope) 與作用域鏈 (Scope Chain) 是什麼?｜ ExplainThis</a></p>",{headings:352,localImagePaths:354,remoteImagePaths:355,frontmatter:356,imagePaths:360},[353],{depth:32,slug:33,text:34},[],[],{title:339,subtitle:340,author:16,imageWebp:341,imagePng:342,imgAlt:339,creationDate:357,updateDate:358,tags:359,featured:23},["Date","2024-12-01T00:00:00.000Z"],["Date","2024-12-01T00:00:00.000Z"],[22],[],"javascript-scope-and-scope-chain-explained.md","javascript-object-vs-map",{id:362,data:364,body:372,filePath:373,digest:374,rendered:375,legacyId:414},{title:365,subtitle:366,author:16,imageWebp:367,imagePng:368,imgAlt:365,creationDate:369,updateDate:370,tags:371,featured:23},"JavaScript Object v.s. Map","Map is a syntax added in ES6, so before ES6, Object was always used as a Map.","/images/articles/webp/javascript-object-vs-map.webp","/images/articles/png/javascript-object-vs-map.png",["Date","2024-11-10T00:00:00.000Z"],["Date","2024-11-10T00:00:00.000Z"],[22],"Map is a syntax added in ES6, so before ES6, Object was always used as a Map. The newly added Map has several differences compared to the original Object:\n\n## Map Advantages\n\n### Map has no prototype, making it safer and avoiding accidental key naming conflicts\n\n- Map is safer: When setting user-provided key-value pairs with an Object, attackers might be able to overwrite the Object's prototype, potentially leading to object injection attacks.\n\n- Map avoids accidental key naming conflicts: With Objects, you need to be careful about default keys that might conflict with keys you add yourself.\n\n- NOTE: Although these issues can be resolved by using Object.create(null), we rarely do this.\n\n### Map keys can be any value, while Object keys can only be String or Symbol\n\nMap won't cause accidental naming conflicts due to keys being automatically converted to String: When handling data with key-value pairs, developers often use various types as keys. However, in JavaScript, when using Objects, whatever you use as a key will be converted to a string, which can cause errors. For example, when converted to strings, two originally different keys might become the same string, leading to key collision issues. Map objects solve this problem, allowing developers to use anything as keys.\n\n### Map supports iteration\n\nWe can directly iterate over a Map using for...of or forEach, but to iterate over an Object, we need to use additional methods like Object.entries or Object.keys.\n\n### Map keys maintain insertion order\n\nAs mentioned above, Map is iterable, and it has a related advantage of maintaining order during iteration. In the past, when using Objects, even with object methods (like Object.entries or Object.keys to assist iteration), the iteration results might not follow the order in which we inserted the key-value pairs. However, sometimes when writing algorithms, we need to preserve order, which makes Map objects much more useful.\n\n### Map provides many commonly used methods for key-value pairs\n\nFor example, to know the size of a key-value collection, Map has a size method, which is simple and useful; but with original Objects, we might need to use Object.keys and then .length to find out how many keys the object has, which is more cumbersome. Additionally, Map also provides a clear method that can delete all key-value pairs at once; with original Objects, you would need to delete them one by one.\n\n### Map performs better in situations with frequent key-value pair modifications\n\nMap is suitable for scenarios requiring efficient lookup, insertion, and deletion operations.\n\n## Map Disadvantages\n\n### Map has no native support for serialization or parsing\n\nObjects can be serialized and parsed using JSON.stringify() and JSON.parse() respectively, but Map does not have native support for serialization and parsing, requiring custom implementation.\n\n## Reference\n\n- [Map - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n- [What's the difference between Map and object in JavaScript? Why do we need Map when we have object? | ExplainThis](https://www.explainthis.io/zh-hant/swe/map-vs-object)","src/content/en/javascript-object-vs-map.md","1851ecd46582e116",{html:376,metadata:377},"<p>Map is a syntax added in ES6, so before ES6, Object was always used as a Map. The newly added Map has several differences compared to the original Object:</p>\n<h2 id=\"map-advantages\">Map Advantages</h2>\n<h3 id=\"map-has-no-prototype-making-it-safer-and-avoiding-accidental-key-naming-conflicts\">Map has no prototype, making it safer and avoiding accidental key naming conflicts</h3>\n<ul>\n<li>\n<p>Map is safer: When setting user-provided key-value pairs with an Object, attackers might be able to overwrite the Object’s prototype, potentially leading to object injection attacks.</p>\n</li>\n<li>\n<p>Map avoids accidental key naming conflicts: With Objects, you need to be careful about default keys that might conflict with keys you add yourself.</p>\n</li>\n<li>\n<p>NOTE: Although these issues can be resolved by using Object.create(null), we rarely do this.</p>\n</li>\n</ul>\n<h3 id=\"map-keys-can-be-any-value-while-object-keys-can-only-be-string-or-symbol\">Map keys can be any value, while Object keys can only be String or Symbol</h3>\n<p>Map won’t cause accidental naming conflicts due to keys being automatically converted to String: When handling data with key-value pairs, developers often use various types as keys. However, in JavaScript, when using Objects, whatever you use as a key will be converted to a string, which can cause errors. For example, when converted to strings, two originally different keys might become the same string, leading to key collision issues. Map objects solve this problem, allowing developers to use anything as keys.</p>\n<h3 id=\"map-supports-iteration\">Map supports iteration</h3>\n<p>We can directly iterate over a Map using for…of or forEach, but to iterate over an Object, we need to use additional methods like Object.entries or Object.keys.</p>\n<h3 id=\"map-keys-maintain-insertion-order\">Map keys maintain insertion order</h3>\n<p>As mentioned above, Map is iterable, and it has a related advantage of maintaining order during iteration. In the past, when using Objects, even with object methods (like Object.entries or Object.keys to assist iteration), the iteration results might not follow the order in which we inserted the key-value pairs. However, sometimes when writing algorithms, we need to preserve order, which makes Map objects much more useful.</p>\n<h3 id=\"map-provides-many-commonly-used-methods-for-key-value-pairs\">Map provides many commonly used methods for key-value pairs</h3>\n<p>For example, to know the size of a key-value collection, Map has a size method, which is simple and useful; but with original Objects, we might need to use Object.keys and then .length to find out how many keys the object has, which is more cumbersome. Additionally, Map also provides a clear method that can delete all key-value pairs at once; with original Objects, you would need to delete them one by one.</p>\n<h3 id=\"map-performs-better-in-situations-with-frequent-key-value-pair-modifications\">Map performs better in situations with frequent key-value pair modifications</h3>\n<p>Map is suitable for scenarios requiring efficient lookup, insertion, and deletion operations.</p>\n<h2 id=\"map-disadvantages\">Map Disadvantages</h2>\n<h3 id=\"map-has-no-native-support-for-serialization-or-parsing\">Map has no native support for serialization or parsing</h3>\n<p>Objects can be serialized and parsed using JSON.stringify() and JSON.parse() respectively, but Map does not have native support for serialization and parsing, requiring custom implementation.</p>\n<h2 id=\"reference\">Reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map - JavaScript | MDN</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/map-vs-object\">What’s the difference between Map and object in JavaScript? Why do we need Map when we have object? | ExplainThis</a></li>\n</ul>",{headings:378,localImagePaths:407,remoteImagePaths:408,frontmatter:409,imagePaths:413},[379,382,385,388,391,394,397,400,403,406],{depth:32,slug:380,text:381},"map-advantages","Map Advantages",{depth:62,slug:383,text:384},"map-has-no-prototype-making-it-safer-and-avoiding-accidental-key-naming-conflicts","Map has no prototype, making it safer and avoiding accidental key naming conflicts",{depth:62,slug:386,text:387},"map-keys-can-be-any-value-while-object-keys-can-only-be-string-or-symbol","Map keys can be any value, while Object keys can only be String or Symbol",{depth:62,slug:389,text:390},"map-supports-iteration","Map supports iteration",{depth:62,slug:392,text:393},"map-keys-maintain-insertion-order","Map keys maintain insertion order",{depth:62,slug:395,text:396},"map-provides-many-commonly-used-methods-for-key-value-pairs","Map provides many commonly used methods for key-value pairs",{depth:62,slug:398,text:399},"map-performs-better-in-situations-with-frequent-key-value-pair-modifications","Map performs better in situations with frequent key-value pair modifications",{depth:32,slug:401,text:402},"map-disadvantages","Map Disadvantages",{depth:62,slug:404,text:405},"map-has-no-native-support-for-serialization-or-parsing","Map has no native support for serialization or parsing",{depth:32,slug:33,text:34},[],[],{title:365,subtitle:366,author:16,imageWebp:367,imagePng:368,imgAlt:365,creationDate:410,updateDate:411,tags:412,featured:23},["Date","2024-11-10T00:00:00.000Z"],["Date","2024-11-10T00:00:00.000Z"],[22],[],"javascript-object-vs-map.md","key-notes-from-chatgpt-prompt-engineering-for-developers-course",{id:415,data:417,body:426,filePath:427,digest:428,rendered:429,legacyId:469},{title:418,subtitle:419,author:16,imageWebp:420,imagePng:421,imgAlt:418,creationDate:422,updateDate:423,tags:424,featured:136},"Key Notes from \"ChatGPT Prompt Engineering for Developers\" Course","ChatGPT Prompt Engineering for Developers is a famous course launched by DeepLearning.AI after the emergence of generative AI, serving as a comprehensive AI prompt guide suitable for everyone.","/images/articles/webp/key-notes-from-chatgpt-prompt-engineering-for-developers-course.webp","/images/articles/png/key-notes-from-chatgpt-prompt-engineering-for-developers-course.png",["Date","2023-11-05T00:00:00.000Z"],["Date","2023-11-05T00:00:00.000Z"],[425],"AI","\"ChatGPT Prompt Engineering for Developers\" is a famous course launched by [DeepLearning.AI](DeepLearning.AI) after the emergence of generative AI. Despite its name suggesting it's for developers, it's actually more like a comprehensive AI prompt guide suitable for everyone.\r\n\r\nHere I'm sharing my key notes from the course:\r\n\r\n## Table of Contents\r\n\r\n- [Introduction](#introduction)\r\n- [Prompting Principles](#prompting-principles)\r\n  - [Principle 1: Write Clear and Specific Instructions](#principle-1-write-clear-and-specific-instructions)\r\n  - [Principle 2: Give the Model Time to \"Think\"](#principle-2-give-the-model-time-to-think)\r\n- [Practical Applications](#practical-applications)\r\n  - [Summarizing](#summarizing)\r\n  - [Inferring](#inferring)\r\n  - [Transforming](#transforming)\r\n  - [Expanding](#expanding)\r\n- [Reference](#Reference)\r\n\r\n## Introduction\r\n\r\nLLMs (Large Language Models) can be categorized into two types: Base LLMs and Instruction Tuned LLMs.\r\n\r\n- Base LLMs predict the next word based on text training data.\r\n\r\n- Instruction Tuned LLMs attempt to follow instructions.\r\n\r\n## Prompting Principles\r\n\r\n### Principle 1: Write Clear and Specific Instructions\r\n\r\n- **Use delimiters (e.g., < >) to clearly mark different parts of the input.**\r\n\r\n  e.g.,\r\n\r\n  Summarize the text delimited by < > into a single sentence.\r\n\r\n- **Ask for structured output (e.g., HTML, JSON format).**\r\n\r\n  e.g.,\r\n\r\n  Generate a list of three made-up book titles along with their authors and genres.\r\n\r\n  Provide them in JSON format with the following keys:\r\n\r\n  book_id, title, author, genre.\r\n\r\n- **Ask the model to check whether conditions are satisfied (verify assumptions needed for the task).**\r\n\r\n  e.g.,\r\n\r\n  If it contains a sequence of instructions, re-write those instructions in the following format: Step 1 / Step 2 / Step N… If the text does not contain a sequence of instructions, then simply write \"No steps provided.\"\r\n\r\n  You will be provided with text delimited by triple quotes.\r\n  If it contains a sequence of instructions,\r\n  re-write those instructions in the following format:\r\n\r\n  Step 1 - …\r\n  Step 2 - …\r\n  …\r\n  Step N - …\r\n\r\n  If the text does not contain a sequence of instructions,\r\n  then simply write \"No steps provided.\"\r\n\r\n  {text_1}\r\n\r\n- **Provide examples of successful task completion, then ask the model to perform the same task.**\r\n\r\n  e.g.,\r\n\r\n  Your task is to answer in a consistent style....\r\n\r\n### Principle 2: Give the Model Time to \"Think\"\r\n\r\n- **Specify the steps required to complete a task.**\r\n\r\n  e.g.,  \r\n  Perform the following actions: 1…/2…/3…/4…Separate your answers with line breaks.\r\n\r\n  Perform the following actions:\r\n\r\n  1 - Summarize the following text delimited by triple backticks with 1 sentence.\r\n\r\n  2 - Translate the summary into French.\r\n\r\n  3 - List each name in the French summary.\r\n\r\n  4 - Output a json object that contains the following keys: french_summary, num_names.\r\n\r\n  Separate your answers with line breaks.\r\n\r\n  Text:\r\n  {text}\r\n\r\n  e.g., Perform the following actions: 1…/2…/3…/4…Use the following format: ...\r\n\r\n  Your task is to perform the following actions:\r\n\r\n  1 - Summarize the following text delimited by <> with 1 sentence.\r\n\r\n  2 - Translate the summary into French.\r\n\r\n  3 - List each name in the French summary.\r\n\r\n  4 - Output a json object that contains the following keys: french_summary, num_names.\r\n\r\n  Use the following format:\r\n\r\n  Text: text to summarize\r\n\r\n  Summary: summary\r\n\r\n  Translation: summary translation\r\n\r\n  Names: list of names in summary\r\n\r\n  Output JSON: json with summary and num_names\r\n\r\n  Text:\r\n  {text}\r\n\r\n- **Instruct the model to work out its own solution before rushing to a conclusion.**\r\n\r\n  e.g.,\r\n\r\n  Your task is to determine if the student's solution is correct or not.\r\n  To solve the problem do the following:\r\n\r\n  - First, work out your own solution to the problem including the final total.\r\n\r\n  - Then compare your solution to the student's solution and evaluate if the student's solution is correct or not. Don't decide if the student's solution is correct until you have done the problem yourself.\r\n\r\n  Use the following format:\r\n\r\n  Question:\r\n  question here\r\n\r\n  Student's solution:\r\n  student's solution here\r\n\r\n  Actual solution:\r\n  steps to work out the solution and your solution here\r\n\r\n  Is the student's solution the same as actual solution\r\n  just calculated:\r\n  yes or no\r\n\r\n  Student grade:\r\n  correct or incorrect\r\n\r\n## Practical Applications\r\n\r\n### Summarizing\r\n\r\n- **Summaries with word or sentence limits**\r\n\r\n  e.g.,\r\n\r\n  Your task is to generate a short summary of a product review from an ecommerce site.\r\n\r\n  Summarize the review below, delimited by triple backticks, in at most 30 words.\r\n\r\n  Review: {prod_review}\r\n\r\n- **Summaries focused on specific topics**\r\n\r\n  e.g.,\r\n\r\n  Your task is to generate a short summary of a product review from an ecommerce site to give feedback to the Shipping deparmtment.\r\n\r\n  Summarize the review below, delimited by triple backticks, in at most 30 words, and focusing on any aspects that mention shipping and delivery of the product.\r\n\r\n  Review: {prod_review}\r\n\r\n- **Using \"extraction\" instead of \"summarization\"**\r\n\r\n  e.g.,\r\n\r\n  Your task is to extract relevant information from a product review from an ecommerce site to give feedback to the Shipping department.\r\n\r\n  From the review below, delimited by triple quotes extract the information relevant to shipping and delivery. Limit to 30 words.\r\n  Review: {prod_review}\r\n\r\n### Inferring\r\n\r\n- **Sentiment inference**\r\n\r\n  - **Sentiment judgment (positive/negative)**\r\n\r\n  e.g.,\r\n\r\n  What is the sentiment of the following product review, which is delimited with triple backticks?\r\n\r\n  Give your answer as a single word, either \"positive\" or \"negative\".\r\n\r\n  Review text: {lamp_review}\r\n\r\n  - **Identifying emotion types**\r\n\r\n  e.g.,\r\n\r\n  Identify a list of emotions that the writer of the following review is expressing. Include no more than five items in the list.\r\n\r\n  Format your answer as a list of lower-case words separated by commas.\r\n\r\n  Review text: {lamp_review}\r\n\r\n  - **Identifying anger**\r\n\r\n  e.g.,\r\n\r\n  Is the writer of the following review expressing anger?\r\n\r\n  The review is delimited with triple backticks.\r\n\r\n  Give your answer as either yes or no.\r\n\r\n  Review text: {lamp_review}\r\n\r\n- **Extracting specific information**\r\n\r\n  e.g.,\r\n\r\n  Identify the following items from the review text:\r\n\r\n  - Item purchased by reviewer\r\n\r\n  - Company that made the item\r\n\r\n  The review is delimited with triple backticks.\r\n\r\n  Format your response as a JSON object with \"Item\" and \"Brand\" as the keys.\r\n\r\n  If the information isn't present, use \"unknown\" as the value.\r\n\r\n  Make your response as short as possible.\r\n\r\n  Review text: {lamp_review}\r\n\r\n- **Topic inference**\r\n\r\n  e.g.,\r\n\r\n  Determine five topics that are being discussed in the following text, which is delimited by triple backticks.\r\n\r\n  Make each item one or two words long.\r\n\r\n  Format your response as a list of items separated by commas.\r\n\r\n  Text sample: {story}\r\n\r\n- **Generating news alerts for specific topics**\r\n\r\n  e.g.,\r\n\r\n  Determine whether each item in the following list of topics is a topic in the text below, which is delimited with triple backticks.\r\n\r\n  Give your answer as list with 0 or 1 for each topic.\r\n\r\n  List of topics: {\",\".join(topic_list)}\r\n\r\n  Text sample: {story}\r\n\r\n### Transforming\r\n\r\n- **Translation**\r\n\r\n  e.g., Translate the following English text to Mandarin in Taiwan: ...\r\n\r\n  e.g., Translate the following text to Mandarin in Taiwan and English pirate: ...\r\n\r\n  e.g., Translate the following text to English in both the formal and informal forms: ...\r\n\r\n  e.g., Tell me which language this is: ...\r\n\r\n- **Tone transformation**\r\n\r\n  e.g., Translate the following from slang to a business letter: ...\r\n\r\n- **Format conversion**\r\n\r\n  e.g., Translate the following python dictionary from JSON to an HTML table with column headers and title: ...\r\n\r\n- **Spelling/grammar check**\r\n\r\n  e.g.,\r\n\r\n  Proofread and correct the following text and rewrite the corrected version.\r\n\r\n  If you don't find and errors, just say \"No errors found\".\r\n\r\n  <br>\r\n\r\n  e.g.,\r\n\r\n  proofread and correct this review.\r\n\r\n  Make it more compelling.\r\n\r\n  Ensure it follows APA style guide and targets an advanced reader.\r\n\r\n  Output in markdown format.\r\n\r\n### Expanding\r\n\r\n- **Email replies**\r\n\r\n  e.g.,\r\n\r\n  You are a customer service AI assistant.\r\n\r\n  Your task is to send an email reply to a valued customer.\r\n\r\n  Given the customer email delimited by <>,\r\n\r\n  Generate a reply to thank the customer for their review.\r\n\r\n  If the sentiment is positive or neutral, thank them for their review.\r\n\r\n  If the sentiment is negative, apologize and suggest that they can reach out to customer service.\r\n\r\n  Make sure to use specific details from the review.\r\n\r\n  Write in a concise and professional tone.\r\n\r\n  Sign the email as `AI customer agent`.\r\n\r\n## Reference\r\n\r\n[ChatGPT Prompt Engineering for Developers](https://learn.deeplearning.ai/chatgpt-prompt-eng/lesson/1/introduction)","src/content/en/key-notes-from-chatgpt-prompt-engineering-for-developers-course.md","34cb6e18e4243717",{html:430,metadata:431},"<p>“ChatGPT Prompt Engineering for Developers” is a famous course launched by <a href=\"DeepLearning.AI\">DeepLearning.AI</a> after the emergence of generative AI. Despite its name suggesting it’s for developers, it’s actually more like a comprehensive AI prompt guide suitable for everyone.</p>\n<p>Here I’m sharing my key notes from the course:</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#prompting-principles\">Prompting Principles</a>\n<ul>\n<li><a href=\"#principle-1-write-clear-and-specific-instructions\">Principle 1: Write Clear and Specific Instructions</a></li>\n<li><a href=\"#principle-2-give-the-model-time-to-think\">Principle 2: Give the Model Time to “Think”</a></li>\n</ul>\n</li>\n<li><a href=\"#practical-applications\">Practical Applications</a>\n<ul>\n<li><a href=\"#summarizing\">Summarizing</a></li>\n<li><a href=\"#inferring\">Inferring</a></li>\n<li><a href=\"#transforming\">Transforming</a></li>\n<li><a href=\"#expanding\">Expanding</a></li>\n</ul>\n</li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"introduction\">Introduction</h2>\n<p>LLMs (Large Language Models) can be categorized into two types: Base LLMs and Instruction Tuned LLMs.</p>\n<ul>\n<li>\n<p>Base LLMs predict the next word based on text training data.</p>\n</li>\n<li>\n<p>Instruction Tuned LLMs attempt to follow instructions.</p>\n</li>\n</ul>\n<h2 id=\"prompting-principles\">Prompting Principles</h2>\n<h3 id=\"principle-1-write-clear-and-specific-instructions\">Principle 1: Write Clear and Specific Instructions</h3>\n<ul>\n<li>\n<p><strong>Use delimiters (e.g., &#x3C; >) to clearly mark different parts of the input.</strong></p>\n<p>e.g.,</p>\n<p>Summarize the text delimited by &#x3C; > into a single sentence.</p>\n</li>\n<li>\n<p><strong>Ask for structured output (e.g., HTML, JSON format).</strong></p>\n<p>e.g.,</p>\n<p>Generate a list of three made-up book titles along with their authors and genres.</p>\n<p>Provide them in JSON format with the following keys:</p>\n<p>book_id, title, author, genre.</p>\n</li>\n<li>\n<p><strong>Ask the model to check whether conditions are satisfied (verify assumptions needed for the task).</strong></p>\n<p>e.g.,</p>\n<p>If it contains a sequence of instructions, re-write those instructions in the following format: Step 1 / Step 2 / Step N… If the text does not contain a sequence of instructions, then simply write “No steps provided.”</p>\n<p>You will be provided with text delimited by triple quotes.\r\nIf it contains a sequence of instructions,\r\nre-write those instructions in the following format:</p>\n<p>Step 1 - …\r\nStep 2 - …\r\n…\r\nStep N - …</p>\n<p>If the text does not contain a sequence of instructions,\r\nthen simply write “No steps provided.”</p>\n<p>{text_1}</p>\n</li>\n<li>\n<p><strong>Provide examples of successful task completion, then ask the model to perform the same task.</strong></p>\n<p>e.g.,</p>\n<p>Your task is to answer in a consistent style…</p>\n</li>\n</ul>\n<h3 id=\"principle-2-give-the-model-time-to-think\">Principle 2: Give the Model Time to “Think”</h3>\n<ul>\n<li>\n<p><strong>Specify the steps required to complete a task.</strong></p>\n<p>e.g.,<br>\nPerform the following actions: 1…/2…/3…/4…Separate your answers with line breaks.</p>\n<p>Perform the following actions:</p>\n<p>1 - Summarize the following text delimited by triple backticks with 1 sentence.</p>\n<p>2 - Translate the summary into French.</p>\n<p>3 - List each name in the French summary.</p>\n<p>4 - Output a json object that contains the following keys: french_summary, num_names.</p>\n<p>Separate your answers with line breaks.</p>\n<p>Text:\r\n{text}</p>\n<p>e.g., Perform the following actions: 1…/2…/3…/4…Use the following format: …</p>\n<p>Your task is to perform the following actions:</p>\n<p>1 - Summarize the following text delimited by &#x3C;> with 1 sentence.</p>\n<p>2 - Translate the summary into French.</p>\n<p>3 - List each name in the French summary.</p>\n<p>4 - Output a json object that contains the following keys: french_summary, num_names.</p>\n<p>Use the following format:</p>\n<p>Text: text to summarize</p>\n<p>Summary: summary</p>\n<p>Translation: summary translation</p>\n<p>Names: list of names in summary</p>\n<p>Output JSON: json with summary and num_names</p>\n<p>Text:\r\n{text}</p>\n</li>\n<li>\n<p><strong>Instruct the model to work out its own solution before rushing to a conclusion.</strong></p>\n<p>e.g.,</p>\n<p>Your task is to determine if the student’s solution is correct or not.\r\nTo solve the problem do the following:</p>\n<ul>\n<li>\n<p>First, work out your own solution to the problem including the final total.</p>\n</li>\n<li>\n<p>Then compare your solution to the student’s solution and evaluate if the student’s solution is correct or not. Don’t decide if the student’s solution is correct until you have done the problem yourself.</p>\n</li>\n</ul>\n<p>Use the following format:</p>\n<p>Question:\r\nquestion here</p>\n<p>Student’s solution:\r\nstudent’s solution here</p>\n<p>Actual solution:\r\nsteps to work out the solution and your solution here</p>\n<p>Is the student’s solution the same as actual solution\r\njust calculated:\r\nyes or no</p>\n<p>Student grade:\r\ncorrect or incorrect</p>\n</li>\n</ul>\n<h2 id=\"practical-applications\">Practical Applications</h2>\n<h3 id=\"summarizing\">Summarizing</h3>\n<ul>\n<li>\n<p><strong>Summaries with word or sentence limits</strong></p>\n<p>e.g.,</p>\n<p>Your task is to generate a short summary of a product review from an ecommerce site.</p>\n<p>Summarize the review below, delimited by triple backticks, in at most 30 words.</p>\n<p>Review: {prod_review}</p>\n</li>\n<li>\n<p><strong>Summaries focused on specific topics</strong></p>\n<p>e.g.,</p>\n<p>Your task is to generate a short summary of a product review from an ecommerce site to give feedback to the Shipping deparmtment.</p>\n<p>Summarize the review below, delimited by triple backticks, in at most 30 words, and focusing on any aspects that mention shipping and delivery of the product.</p>\n<p>Review: {prod_review}</p>\n</li>\n<li>\n<p><strong>Using “extraction” instead of “summarization”</strong></p>\n<p>e.g.,</p>\n<p>Your task is to extract relevant information from a product review from an ecommerce site to give feedback to the Shipping department.</p>\n<p>From the review below, delimited by triple quotes extract the information relevant to shipping and delivery. Limit to 30 words.\r\nReview: {prod_review}</p>\n</li>\n</ul>\n<h3 id=\"inferring\">Inferring</h3>\n<ul>\n<li>\n<p><strong>Sentiment inference</strong></p>\n<ul>\n<li><strong>Sentiment judgment (positive/negative)</strong></li>\n</ul>\n<p>e.g.,</p>\n<p>What is the sentiment of the following product review, which is delimited with triple backticks?</p>\n<p>Give your answer as a single word, either “positive” or “negative”.</p>\n<p>Review text: {lamp_review}</p>\n<ul>\n<li><strong>Identifying emotion types</strong></li>\n</ul>\n<p>e.g.,</p>\n<p>Identify a list of emotions that the writer of the following review is expressing. Include no more than five items in the list.</p>\n<p>Format your answer as a list of lower-case words separated by commas.</p>\n<p>Review text: {lamp_review}</p>\n<ul>\n<li><strong>Identifying anger</strong></li>\n</ul>\n<p>e.g.,</p>\n<p>Is the writer of the following review expressing anger?</p>\n<p>The review is delimited with triple backticks.</p>\n<p>Give your answer as either yes or no.</p>\n<p>Review text: {lamp_review}</p>\n</li>\n<li>\n<p><strong>Extracting specific information</strong></p>\n<p>e.g.,</p>\n<p>Identify the following items from the review text:</p>\n<ul>\n<li>\n<p>Item purchased by reviewer</p>\n</li>\n<li>\n<p>Company that made the item</p>\n</li>\n</ul>\n<p>The review is delimited with triple backticks.</p>\n<p>Format your response as a JSON object with “Item” and “Brand” as the keys.</p>\n<p>If the information isn’t present, use “unknown” as the value.</p>\n<p>Make your response as short as possible.</p>\n<p>Review text: {lamp_review}</p>\n</li>\n<li>\n<p><strong>Topic inference</strong></p>\n<p>e.g.,</p>\n<p>Determine five topics that are being discussed in the following text, which is delimited by triple backticks.</p>\n<p>Make each item one or two words long.</p>\n<p>Format your response as a list of items separated by commas.</p>\n<p>Text sample: {story}</p>\n</li>\n<li>\n<p><strong>Generating news alerts for specific topics</strong></p>\n<p>e.g.,</p>\n<p>Determine whether each item in the following list of topics is a topic in the text below, which is delimited with triple backticks.</p>\n<p>Give your answer as list with 0 or 1 for each topic.</p>\n<p>List of topics: {”,“.join(topic_list)}</p>\n<p>Text sample: {story}</p>\n</li>\n</ul>\n<h3 id=\"transforming\">Transforming</h3>\n<ul>\n<li>\n<p><strong>Translation</strong></p>\n<p>e.g., Translate the following English text to Mandarin in Taiwan: …</p>\n<p>e.g., Translate the following text to Mandarin in Taiwan and English pirate: …</p>\n<p>e.g., Translate the following text to English in both the formal and informal forms: …</p>\n<p>e.g., Tell me which language this is: …</p>\n</li>\n<li>\n<p><strong>Tone transformation</strong></p>\n<p>e.g., Translate the following from slang to a business letter: …</p>\n</li>\n<li>\n<p><strong>Format conversion</strong></p>\n<p>e.g., Translate the following python dictionary from JSON to an HTML table with column headers and title: …</p>\n</li>\n<li>\n<p><strong>Spelling/grammar check</strong></p>\n<p>e.g.,</p>\n<p>Proofread and correct the following text and rewrite the corrected version.</p>\n<p>If you don’t find and errors, just say “No errors found”.</p>\n<br>\n<p>e.g.,</p>\n<p>proofread and correct this review.</p>\n<p>Make it more compelling.</p>\n<p>Ensure it follows APA style guide and targets an advanced reader.</p>\n<p>Output in markdown format.</p>\n</li>\n</ul>\n<h3 id=\"expanding\">Expanding</h3>\n<ul>\n<li>\n<p><strong>Email replies</strong></p>\n<p>e.g.,</p>\n<p>You are a customer service AI assistant.</p>\n<p>Your task is to send an email reply to a valued customer.</p>\n<p>Given the customer email delimited by &#x3C;>,</p>\n<p>Generate a reply to thank the customer for their review.</p>\n<p>If the sentiment is positive or neutral, thank them for their review.</p>\n<p>If the sentiment is negative, apologize and suggest that they can reach out to customer service.</p>\n<p>Make sure to use specific details from the review.</p>\n<p>Write in a concise and professional tone.</p>\n<p>Sign the email as <code>AI customer agent</code>.</p>\n</li>\n</ul>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://learn.deeplearning.ai/chatgpt-prompt-eng/lesson/1/introduction\">ChatGPT Prompt Engineering for Developers</a></p>",{headings:432,localImagePaths:462,remoteImagePaths:463,frontmatter:464,imagePaths:468},[433,434,437,440,443,446,449,452,455,458,461],{depth:32,slug:145,text:146},{depth:32,slug:435,text:436},"introduction","Introduction",{depth:32,slug:438,text:439},"prompting-principles","Prompting Principles",{depth:62,slug:441,text:442},"principle-1-write-clear-and-specific-instructions","Principle 1: Write Clear and Specific Instructions",{depth:62,slug:444,text:445},"principle-2-give-the-model-time-to-think","Principle 2: Give the Model Time to “Think”",{depth:32,slug:447,text:448},"practical-applications","Practical Applications",{depth:62,slug:450,text:451},"summarizing","Summarizing",{depth:62,slug:453,text:454},"inferring","Inferring",{depth:62,slug:456,text:457},"transforming","Transforming",{depth:62,slug:459,text:460},"expanding","Expanding",{depth:32,slug:33,text:34},[],[],{title:418,subtitle:419,author:16,imageWebp:420,imagePng:421,imgAlt:418,creationDate:465,updateDate:466,tags:467,featured:136},["Date","2023-11-05T00:00:00.000Z"],["Date","2023-11-05T00:00:00.000Z"],[425],[],"key-notes-from-chatgpt-prompt-engineering-for-developers-course.md","introduction-to-big-o-notation",{id:470,data:472,body:481,filePath:482,digest:483,rendered:484,legacyId:499},{title:473,subtitle:474,author:16,imageWebp:475,imagePng:476,imgAlt:473,creationDate:477,updateDate:478,tags:479,featured:23},"Introduction to Big O Notation","Big O is a mathematical notation used to describe algorithm efficiency, primarily focusing on input scale, growth patterns, and worst-case scenarios.","/images/articles/webp/introduction-to-big-o-notation.webp","/images/articles/png/introduction-to-big-o-notation.png",["Date","2024-11-05T00:00:00.000Z"],["Date","2024-11-05T00:00:00.000Z"],[480],"Algorithm","Big O is a mathematical notation used to describe algorithm efficiency, but it doesn't focus on precision (e.g., actual execution time or CPU usage). Instead, it focuses on input scale, growth patterns, and worst-case scenarios.\n\nTherefore, the three key concepts of Big O Time Complexity are: \"growth is relative to input,\" \"constants are ignored,\" and \"worst-case scenarios are typically what we measure.\"\n\nCommon Big O notations include O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n), and O(n!). These notations primarily focus on algorithm performance in worst-case scenarios, helping us make effective comparisons and judgments when designing and selecting algorithms.\n\n### The common complexities\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/introduction-to-big-o-notation/big-o-complexity.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/introduction-to-big-o-notation/big-o-complexity.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\nThis is why we use Big O: it typically helps us decide which data structures and algorithms to use. Understanding their performance can maximally help us write the best code.\n\n## Reference\n\n[Algorithms & Data Structures | Learn Algorithms with TypeScript for Interviews | Frontend Masters](https://frontendmasters.com/courses/algorithms/)","src/content/en/introduction-to-big-o-notation.md","f2e4edbae2767541",{html:485,metadata:486},"<p>Big O is a mathematical notation used to describe algorithm efficiency, but it doesn’t focus on precision (e.g., actual execution time or CPU usage). Instead, it focuses on input scale, growth patterns, and worst-case scenarios.</p>\n<p>Therefore, the three key concepts of Big O Time Complexity are: “growth is relative to input,” “constants are ignored,” and “worst-case scenarios are typically what we measure.”</p>\n<p>Common Big O notations include O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n), and O(n!). These notations primarily focus on algorithm performance in worst-case scenarios, helping us make effective comparisons and judgments when designing and selecting algorithms.</p>\n<h3 id=\"the-common-complexities\">The common complexities</h3>\n<picture>\n  <source srcset=\"/images/article-contents/webp/introduction-to-big-o-notation/big-o-complexity.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/introduction-to-big-o-notation/big-o-complexity.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>This is why we use Big O: it typically helps us decide which data structures and algorithms to use. Understanding their performance can maximally help us write the best code.</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://frontendmasters.com/courses/algorithms/\">Algorithms &#x26; Data Structures | Learn Algorithms with TypeScript for Interviews | Frontend Masters</a></p>",{headings:487,localImagePaths:492,remoteImagePaths:493,frontmatter:494,imagePaths:498},[488,491],{depth:62,slug:489,text:490},"the-common-complexities","The common complexities",{depth:32,slug:33,text:34},[],[],{title:473,subtitle:474,author:16,imageWebp:475,imagePng:476,imgAlt:473,creationDate:495,updateDate:496,tags:497,featured:23},["Date","2024-11-05T00:00:00.000Z"],["Date","2024-11-05T00:00:00.000Z"],[480],[],"introduction-to-big-o-notation.md","mastering-responsive-web-design-rwd",{id:500,data:502,body:510,filePath:511,digest:512,rendered:513,legacyId:525},{title:503,subtitle:504,author:16,imageWebp:505,imagePng:506,imgAlt:503,creationDate:507,updateDate:508,tags:509,featured:136},"Mastering Responsive Web Design","RWD is a design approach that allows websites to adjust across various devices and screen sizes, presenting content in an optimized way.","/images/articles/webp/mastering-responsive-web-design-rwd.webp","/images/articles/png/mastering-responsive-web-design-rwd.png",["Date","2024-03-10T00:00:00.000Z"],["Date","2024-03-10T00:00:00.000Z"],[53],"RWD = Responsive Web Design, a design approach that allows websites to adapt and display appropriately across various devices and screen sizes.\r\n\r\nThis means that regardless of whether users are on desktop computers, laptops, tablets, or mobile phones, the website will adjust according to the device's screen size, presenting content in an optimized way.\r\n\r\nThe core goal of RWD is to provide a consistent and excellent user experience without needing to develop multiple versions of a website for different devices.\r\n\r\nAfter taking the course [Conquering Responsive Layouts](https://courses.kevinpowell.co/conquering-responsive-layouts) by CSS master [Kevin Powell](https://www.youtube.com/kevinpowell), I'd like to share some key points and mindsets I've compiled for creating effective responsive websites:\r\n\r\n- Layouts are responsive by default; it's our CSS settings that break this natural responsiveness.\r\n\r\n- Avoid setting fixed widths, as they prevent automatic adjustment across multiple screens. **Use percentages instead**.\r\n\r\n- Avoid using heights whenever possible, as they can disrupt layouts across different screen sizes.\r\n\r\n- When setting font-size, using rem as a relative unit references the font-size of the html element (default is 16px); using em as a relative unit references the font-size of the parent element (default is 16px).\r\n\r\n- When setting margin, padding, and other non-font-size CSS properties, using rem as a relative unit references the font-size of the html element; using em as a relative unit references the font-size of the same element.\r\n\r\n- In most cases, rem is more suitable for setting font-size, while em is better for setting margin and padding.\r\n\r\n- Using relative units makes implementing responsive layouts much simpler.\r\n\r\n  e.g., Simply changing the font-size of the html element in a media query can easily scale the entire webpage on larger screens.\r\n\r\n  <!-- ```css\r\n  @media (min-width: 700px) {\r\n    html {\r\n      font-size: 25px;\r\n    }\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-1.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n- Use max-width to prevent excessive width on large screens. For example:\r\n\r\n  <!-- ```css\r\n  .container {\r\n    background: #23424a;\r\n    color: white;\r\n\r\n    width: 80%;\r\n    max-width: 750px;\r\n    margin: 0 auto;\r\n\r\n    padding: 2em;\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-2.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n- CSS Units: vh, vw, vmin, vmax\r\n\r\n  - vh = viewport height, vw = viewport width.\r\n\r\n  - If you want to center an element in the layout, you can set its height to 100vh and use align-items/justify-content: center.\r\n\r\n  - If you want an image to take up half the total layout width, that would be 50vw.\r\n\r\n  - The difference between vmin and vmax is that vmin refers to the smaller dimension between vw and vh, while vmax refers to the larger dimension. For example, in a window with dimensions 1280px _ 1600px, vmin refers to 1280px and vmax refers to 1600px. The settings are ratios - 120vmin means 1280px _ 120%, while 80vmax means 1600px \\* 80%.\r\n\r\n- The two settings below are essentially the same, but the first approach is more intuitive, so I prefer to use it:\r\n\r\n  <!-- ```css\r\n  .container {\r\n    width: 100%;\r\n    max-width: 600px;\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-3.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n  <br />\r\n\r\n  <!-- ```css\r\n  .container {\r\n    width: 600px;\r\n    max-width: 100%;\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-4.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n- Additional notes: min(), max() and clamp()\r\n\r\n  - min() syntax:\r\n\r\n    <!-- ```css\r\n    .content {\r\n      width: min(500px, 70%);\r\n    }\r\n    ``` -->\r\n\r\n    <picture>\r\n      <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-5.webp\" type=\"image/webp\">\r\n      <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n    </picture>\r\n\r\n    The above syntax is equivalent to:\r\n\r\n    <!-- ```css\r\n    .content {\r\n      width: 70%\r\n      max-width: 500px;\r\n    }\r\n    ``` -->\r\n\r\n    <picture>\r\n      <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-6.webp\" type=\"image/webp\">\r\n      <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n    </picture>\r\n\r\n  - clamp() syntax:\r\n\r\n    <!-- ```css\r\n    .title {\r\n      font-size: clamp(2rem, 5vw, 5rem);\r\n    }\r\n\r\n    .p {\r\n      font-size: clamp(1rem, 1.25vw, 1.25rem);\r\n    }\r\n    ``` -->\r\n\r\n    <picture>\r\n      <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-7.webp\" type=\"image/webp\">\r\n      <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n    </picture>\r\n\r\n### Reference\r\n\r\n[Conquering Responsive Layouts](https://courses.kevinpowell.co/view/courses/conquering-responsive-layouts)","src/content/en/mastering-responsive-web-design-rwd.md","ff77080e374c08a4",{html:514,metadata:515},"<p>RWD = Responsive Web Design, a design approach that allows websites to adapt and display appropriately across various devices and screen sizes.</p>\n<p>This means that regardless of whether users are on desktop computers, laptops, tablets, or mobile phones, the website will adjust according to the device’s screen size, presenting content in an optimized way.</p>\n<p>The core goal of RWD is to provide a consistent and excellent user experience without needing to develop multiple versions of a website for different devices.</p>\n<p>After taking the course <a href=\"https://courses.kevinpowell.co/conquering-responsive-layouts\">Conquering Responsive Layouts</a> by CSS master <a href=\"https://www.youtube.com/kevinpowell\">Kevin Powell</a>, I’d like to share some key points and mindsets I’ve compiled for creating effective responsive websites:</p>\n<ul>\n<li>\n<p>Layouts are responsive by default; it’s our CSS settings that break this natural responsiveness.</p>\n</li>\n<li>\n<p>Avoid setting fixed widths, as they prevent automatic adjustment across multiple screens. <strong>Use percentages instead</strong>.</p>\n</li>\n<li>\n<p>Avoid using heights whenever possible, as they can disrupt layouts across different screen sizes.</p>\n</li>\n<li>\n<p>When setting font-size, using rem as a relative unit references the font-size of the html element (default is 16px); using em as a relative unit references the font-size of the parent element (default is 16px).</p>\n</li>\n<li>\n<p>When setting margin, padding, and other non-font-size CSS properties, using rem as a relative unit references the font-size of the html element; using em as a relative unit references the font-size of the same element.</p>\n</li>\n<li>\n<p>In most cases, rem is more suitable for setting font-size, while em is better for setting margin and padding.</p>\n</li>\n<li>\n<p>Using relative units makes implementing responsive layouts much simpler.</p>\n<p>e.g., Simply changing the font-size of the html element in a media query can easily scale the entire webpage on larger screens.</p>\n<!-- ```css\n@media (min-width: 700px) {\n  html {\n    font-size: 25px;\n  }\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>Use max-width to prevent excessive width on large screens. For example:</p>\n<!-- ```css\n.container {\n  background: #23424a;\n  color: white;\n\n  width: 80%;\n  max-width: 750px;\n  margin: 0 auto;\n\n  padding: 2em;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>CSS Units: vh, vw, vmin, vmax</p>\n<ul>\n<li>\n<p>vh = viewport height, vw = viewport width.</p>\n</li>\n<li>\n<p>If you want to center an element in the layout, you can set its height to 100vh and use align-items/justify-content: center.</p>\n</li>\n<li>\n<p>If you want an image to take up half the total layout width, that would be 50vw.</p>\n</li>\n<li>\n<p>The difference between vmin and vmax is that vmin refers to the smaller dimension between vw and vh, while vmax refers to the larger dimension. For example, in a window with dimensions 1280px _ 1600px, vmin refers to 1280px and vmax refers to 1600px. The settings are ratios - 120vmin means 1280px _ 120%, while 80vmax means 1600px * 80%.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The two settings below are essentially the same, but the first approach is more intuitive, so I prefer to use it:</p>\n<!-- ```css\n.container {\n  width: 100%;\n  max-width: 600px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<br>\n<!-- ```css\n.container {\n  width: 600px;\n  max-width: 100%;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>Additional notes: min(), max() and clamp()</p>\n<ul>\n<li>\n<p>min() syntax:</p>\n<!-- ```css\n.content {\n  width: min(500px, 70%);\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>The above syntax is equivalent to:</p>\n<!-- ```css\n.content {\n  width: 70%\n  max-width: 500px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-6.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>clamp() syntax:</p>\n<!-- ```css\n.title {\n  font-size: clamp(2rem, 5vw, 5rem);\n}\n\n.p {\n  font-size: clamp(1rem, 1.25vw, 1.25rem);\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-7.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"reference\">Reference</h3>\n<p><a href=\"https://courses.kevinpowell.co/view/courses/conquering-responsive-layouts\">Conquering Responsive Layouts</a></p>",{headings:516,localImagePaths:518,remoteImagePaths:519,frontmatter:520,imagePaths:524},[517],{depth:62,slug:33,text:34},[],[],{title:503,subtitle:504,author:16,imageWebp:505,imagePng:506,imgAlt:503,creationDate:521,updateDate:522,tags:523,featured:136},["Date","2024-03-10T00:00:00.000Z"],["Date","2024-03-10T00:00:00.000Z"],[53],[],"mastering-responsive-web-design-rwd.md","react-overview",{id:526,data:528,body:537,filePath:538,digest:539,rendered:540,legacyId:606},{title:529,subtitle:530,author:16,imageWebp:531,imagePng:532,imgAlt:529,creationDate:533,updateDate:534,tags:535,featured:136},"React Overview","An overview of React based on the book \"React Thinking Evolution\", aiming to provide a big picture of the entire React ecosystem.","/images/articles/webp/react-overview.webp","/images/articles/png/react-overview.png",["Date","2024-08-18T00:00:00.000Z"],["Date","2024-08-18T00:00:00.000Z"],[536],"React","I've spent a considerable amount of time recently trying to understand React. I want to document my current understanding of its basic structure, so this article will attempt to provide an overview perspective, hoping to show the big picture of React. If I want to delve into more specific details, I'll write separate articles for those topics.\n\n## Table of Contents\n\n- [Origin](#origin)\n- [Two Concepts You Need to Know Before Starting](#two-concepts-you-need-to-know-before-starting)\n  - [Browser API Interface for Other Programming Languages: DOM](#browser-api-interface-for-other-programming-languages-dom)\n  - [Design Pattern: Unidirectional Data Flow](#design-pattern-unidirectional-data-flow)\n- [DOM Rendering Strategy to Implement Unidirectional Data Flow](#dom-rendering-strategy-to-implement-unidirectional-data-flow)\n- [Using the Virtual DOM Concept for Complete Redrawing to Solve Performance Issues of Direct DOM Redrawing](#using-the-virtual-dom-concept-for-complete-redrawing-to-solve-performance-issues-of-direct-dom-redrawing)\n  - [Additional Benefit of Using Virtual DOM: Separating Screen Management into Two Independent Phases - \"Definition Phase\" and \"Actual Rendering Phase\"](#additional-benefit-of-using-virtual-dom-separating-screen-management-into-two-independent-phases---definition-phase-and-actual-rendering-phase)\n- [Implementation of Virtual DOM Concept in React: React Element](#implementation-of-virtual-dom-concept-in-react-react-element)\n- [\"Syntactic Sugar\" for Creating React Elements: JSX Syntax](#syntactic-sugar-for-creating-react-elements-jsx-syntax)\n- [Developer-Defined UI Component Blueprint: Component](#developer-defined-ui-component-blueprint-component)\n  - [Mechanism for Passing Specific Parameters from Outside to Inside a Component: Props](#mechanism-for-passing-specific-parameters-from-outside-to-inside-a-component-props)\n  - [Special Functions That Can Only Be Called in the Top-Level Scope of Function Components aka React APIs: Hooks](#special-functions-that-can-only-be-called-in-the-top-level-scope-of-function-components-aka-react-apis-hooks)\n- [Three Major Lifecycle Phases of a Component](#three-major-lifecycle-phases-of-a-component)\n  - [mount = render](#mount--render)\n  - [update = re-render = reconciliation](#update--re-render--reconciliation)\n  - [unmount](#unmount)\n- [The Core Entity of the Latest Application State and UI Structure: Fiber Node](#the-core-entity-of-the-latest-application-state-and-ui-structure-fiber-node)\n- [Summary](#summary)\n- [Reference](#reference)\n\n## Origin\n\nI don't intend to discuss the origins of React here, but if you're interested, I highly recommend watching the YouTube documentary [How A Small Team of Developers Created React at Facebook | React.js: The Documentary](https://www.youtube.com/watch?v=8pDqJVdNa44) by the [Honeypot](https://www.youtube.com/@Honeypotio/videos) channel. Alternatively, you can read the reflections on this documentary written by [ExplainThis](https://www.explainthis.io/zh-hant): [React Documentary Reflections 1 — Rethinking Best Practices](https://www.explainthis.io/zh-hant/swe/react-documentary/part1) and [React Documentary Reflections 2 — Community-Driven Innovation](https://www.explainthis.io/zh-hant/swe/react-documentary/part2).\n\n## Two Concepts You Need to Know Before Starting\n\n### Browser API Interface for Other Programming Languages: DOM\n\nReact is a JavaScript UI library. When writing web applications, if you want to manipulate the browser's UI, you must do so through the browser's API interface for other programming languages: the DOM. The DOM uses a tree structure to store web elements, with each part of the tree called a node. The root node at the top is the document, representing the webpage itself.\n\n### Design Pattern: Unidirectional Data Flow\n\nReact uses a \"unidirectional data flow\" design pattern. The core concept of unidirectional data flow is \"data-driven UI,\" meaning the UI only updates when the data changes. Since this is a one-way process, the UI won't change for any reason other than data changes. This ensures that the main factor affecting UI is limited to \"data,\" and when data updates, the corresponding bound UI elements automatically change, thereby improving the reliability and maintainability of frontend applications.\n\n## DOM Rendering Strategy to Implement Unidirectional Data Flow\n\nAfter understanding the concepts of DOM and unidirectional data flow, we need to understand how React uses the unidirectional data flow design pattern to manipulate the DOM for browser rendering/updating.\n\nBefore explaining React's approach, we should recognize that directly manipulating the DOM is performance-intensive because it triggers the browser's rendering engine to redraw the screen. Therefore, a key aspect of frontend performance optimization is reducing DOM operations by minimizing the scope of DOM manipulations needed for UI changes.\n\nGiven this premise, a more intuitive approach to implementing unidirectional data flow for DOM rendering would be \"manually modifying all DOM elements that should be updated when data changes.\" The advantage of this approach is reducing unnecessary DOM operations, but the disadvantage is relying entirely on manual DOM manipulation, which becomes extremely difficult to manage comprehensively in complex applications. Vue.js is a framework that adopts this method while solving the challenges of manual DOM manipulation.\n\nAnother more radical approach to implementing unidirectional data flow for DOM rendering is \"clearing all DOM elements of the entire screen when data updates, then completely redrawing based on the latest data.\" This directly solves the difficulty of manual DOM manipulation mentioned above. Developers only need to focus on data updates and template definitions without manually maintaining the DOM. While more intuitive and simple, this approach clearly violates our key principle of frontend performance optimization: reducing DOM operations. It causes significant performance waste, affecting user experience in large, complex applications. React is a framework that adopts this method while solving the performance waste problem of complete redrawing.\n\n## Using the Virtual DOM Concept for Complete Redrawing to Solve Performance Issues of Direct DOM Redrawing\n\nHow does React solve the performance waste problem of complete redrawing? The answer is by using the \"Virtual DOM\" concept for complete redrawing.\n\nWhat is the Virtual DOM? The Virtual DOM is just a concept. Its essence is ordinary JavaScript object data that creates a \"virtual screen structure\" (think of it as a prototype for screen rendering) to simulate and correspond to the actual DOM's screen structure. The implementation process is: when the screen needs updating, first generate a new Virtual DOM structure → compare it in detail with the old Virtual DOM structure → execute DOM operations only on the differences to reduce performance costs.\n\n### Additional Benefit of Using Virtual DOM: Separating Screen Management into Two Independent Phases - \"Definition Phase\" and \"Actual Rendering Phase\"\n\nBesides optimizing DOM operation performance, the Virtual DOM has another benefit: separating screen management into two independent phases: \"defining and managing screen structure descriptions (reconciler)\" and \"rendering these descriptions into actual screen products (renderer).\" The reconciler is universal across environments (as long as JavaScript can run in that environment), while the renderer can be arbitrarily replaced, allowing React to manage and produce UIs or screens beyond the browser DOM (e.g., React Native for Android/iOS app screens, React-pdf for generating PDF documents).\n\n## Implementation of Virtual DOM Concept in React: React Element\n\nA React element is React's implementation of the Virtual DOM concept - a virtual screen structure element that serves as the smallest unit for describing and composing the screen. More specifically, it's an ordinary JavaScript object that describes an expected actual DOM element structure.\n\nIt's important to note that React elements are immutable once created because they describe a version of the screen structure at a specific time, like a historical record of the screen structure. Due to this immutability, when generating a new React element, React can compare it with the previous version to identify exactly which parts of the DOM need to be updated, achieving minimal DOM operations to reduce performance costs.\n\nIn practical syntax, we can create a React element by calling React's createElement method. While React elements correspond to DOM elements, some property naming conventions differ: commonly, all properties and attributes (including event handlers) use camel case naming (exceptions: aria-_ and data-_), and properties involving JavaScript built-in reserved words are renamed to avoid unexpected situations (e.g., class → className).\n\n## \"Syntactic Sugar\" for Creating React Elements: JSX Syntax\n\nJSX syntax is \"syntactic sugar\" for the React.createElement method. It looks like HTML syntax because it was deliberately designed to mimic HTML syntax and development experience, but it is fundamentally different from HTML.\n\nJSX code is transpiled at build time, with common transpilation tools being Babel and the TypeScript compiler. An optimization method for React.createElement during transpilation is calling the \\_jsx method of jsx-runtime (supported since React 17). Both React.createElement() and \\_jsx() are methods for creating React elements, with the difference being that the \\_jsx method includes some additional optimizations. Note that the \\_jsx method of jsx-runtime can only be called through JSX syntax transpilation by a transpiler and cannot be written directly like the React.createElement method.\n\nWhen writing JSX syntax, there are some points to note. For instance, JSX syntax can only have one node at the first level because a piece of JSX = one call to the React.createElement method, so it only returns \"one React element,\" and one React element represents a tree data structure (which can only have one root node). Therefore, if there are multiple nodes, they need to be wrapped in a common parent element. React has created a special built-in element type for this purpose: Fragment, which can serve as a container but doesn't produce a corresponding actual DOM element. We typically use the shorthand empty tag <> to express a Fragment-type React element.\n\nAnother point to note is how various data types are handled when used as children of React elements and converted to the DOM: strings are printed directly; numbers are converted to strings and then printed; boolean values of false, null, and undefined are ignored; arrays are flattened into multiple child elements and all printed in sequence; and be careful that objects and functions cannot be converted and will cause errors.\n\nIn practical syntax, JSX syntax requires strict tag closure, so even tags that don't need to be closed in HTML syntax (e.g., `<br>`, `<img>`, `<input>`) must be closed when writing JSX syntax. Additionally, we can use self-closing shorthand syntax to represent tags without children (e.g., `const img = <img src=\"./image.jpg\" />`).\n\nFurthermore, JSX syntax has two main ways of expressing data: literals (e.g., strings) and expressions (e.g., variables). For literal data expression, the format is similar to HTML syntax: literal values for attributes use double quotes \" \"; literal values for children can be written directly. Expression data uses JSX's specified syntax { } to enclose it, such as \"variables\" or \"expressing another piece of JSX syntax as a child element within JSX syntax\" are types of expressions. In the second scenario, you don't have to write { } because JSX syntax also supports writing child element tags directly between the parent element's opening and closing tags, to provide a development experience closer to writing HTML syntax.\n\n## Developer-Defined UI Component Blueprint: Component\n\nTo summarize what we've covered so far: React is a UI library/framework designed based on the principle of \"unidirectional data flow.\" For its DOM rendering strategy, it uses the approach of \"clearing all DOM elements of the entire screen when data updates, then completely redrawing based on the latest data\" to implement unidirectional data flow. However, to solve the performance waste problem of frequently clearing and redrawing everything on the DOM, React doesn't perform these operations directly on the DOM. Instead, it introduces the Virtual DOM concept to first simulate the actual DOM's screen structure using JavaScript object format for complete redrawing. This Virtual DOM concept is implemented in React as React elements, so a React element is actually a virtual screen structure element that serves as the smallest unit for describing and composing the screen. But in practice, we usually don't write React elements directly; instead, we encapsulate them within Components.\n\nA Component can be thought of as a template or building block. It's a developer-defined UI component blueprint that receives developer-customized props data as parameters and returns a React component as the structure of a screen section.\n\nWe can understand that a Component actually returns a React element. Besides containing React elements corresponding to actual DOM elements, a Component can also contain and call other Components as sub-Components, like assembling building blocks.\n\nThe essence and significance of designing Components is to abstract based on requirements and logical meaning, categorizing features and behaviors of concern, designing a process or logic suitable for specific scenarios and semantic ranges, and encapsulating implementation details for reuse.\n\nIn the function component era, we define Components as \"functions\" because they define \"the process and logic for generating a specific screen.\" They are a kind of \"description,\" not a fixed screen that has already been generated. So the same Component (imagine it as a blueprint) can be called multiple times, and each instance of the Component is independent, allowing for customization according to requirements.\n\nIn practical syntax, the first letter of a Component name must be capitalized to distinguish it from regular element tags. This way, when a tag name is lowercase, React treats it as a string when creating a React element; when a tag name is capitalized, React treats it as a variable name.\n\nAdditionally, there are two ways to export Components: default export and named export. A JS file can only have one default export but can have multiple named exports. For default export, we can use export default to export the Component and import ComponentName from 'file path' to import it.\n\n### Mechanism for Passing Specific Parameters from Outside to Inside a Component: Props\n\nProps, short for properties, are the properties of a Component. They provide a mechanism for passing specific parameters from outside to inside a Component blueprint when calling it. This allows us to customize the screen generation process based on the parameters passed in, accommodating more usage scenarios.\n\nReact doesn't impose any restrictions on what data types can be passed as Props to a Component. Notably, even a React element can be passed as a Props value because a React element itself is just an ordinary JavaScript object, which provides more possibilities for UI abstraction design.\n\nIt's important to note that Props are data from the outside, so they are read-only/immutable inside the Component. This is to maintain the reliability of unidirectional data flow. React typically uses Object.freeze(props) to freeze Props so you can't modify them, but there are situations that can't be detected (e.g., when directly modifying an original array using methods like push), so be careful!\n\nIn practical syntax, the first parameter received by a component function is the Props object, containing various properties we pass in when calling the Component. We can either write props directly in the parameter definition or destructure to extract the needed property data. Additionally, React has a special Prop called children. This children prop in pure React elements is limited to specific types (as mentioned in the JSX syntax section about how various data types are handled when used as children of React elements and converted to the DOM, with a reminder that objects and functions cannot be converted and will cause errors). However, in Component-type React elements, the children prop can accept any type of value without restriction because how the children prop is used in a Component is determined by the developer inside the Component.\n\n### Special Functions That Can Only Be Called in the Top-Level Scope of Function Components aka React APIs: Hooks\n\nHooks are APIs provided by React. They are special functions that can only be called in the top-level scope of function components, used to inject various React core features or functionalities into Components.\n\nWhy can Hooks only be called in the top-level scope of function components? This is to ensure that some internal mechanisms of Hooks can work properly and avoid unexpected issues like data loss. The main internal mechanism is that all Hooks in a Component rely on a fixed calling order in each render to distinguish from each other, so this restriction ensures that all Hooks are called in every render process. For a concrete example, if a Hook is placed inside an if condition rather than in the top-level scope, and the condition is true during the first render of the Component so the Hook is executed, but the condition becomes false during the second render so the Hook isn't executed, we encounter a problem: remember that \"all Hooks in a Component rely on a fixed calling order in each render to distinguish from each other,\" but if not all Hooks in a Component are definitely called during each render, it leads to misaligned order. That's why there's the restriction that \"Hooks can only be called in the top-level scope of function components.\"\n\nLooking at a higher level, why use \"order\" of calls, rather than other methods (e.g., names) to distinguish between Hooks? This is because the design of sequential function calls can solve the diamond problem.\n\nCommon Hooks in React include useState, useEffect, useCallback, useMemo, useRef, useContext, etc. Here's a preliminary introduction to two of these Hooks: useState and useEffect:\n\n- **Hook for Defining and Accessing State: useState**\n\nIn function components, we can define and access State by calling the useState Hook. In React development conventions, we typically use array destructuring syntax to rename the state value and setState method returned by useState according to their business logic meaning (e.g., renaming the state value variable representing counter state data to count, and the corresponding setState method to setCount).\n\nA Component can have multiple states, and React can recognize different states in the same component because of the characteristic mentioned above that Hooks use \"order\" to remember and distinguish from each other.\n\nThe only legal way to trigger a Component re-render is by calling the setState method to update the state value. However, note that the setState method is asynchronous. After calling the setState method, React doesn't immediately trigger a re-render but waits until all programs in the current event have finished before starting the re-render.\n\nIt's important to note that, as mentioned when introducing Props, Props are read-only/immutable inside a Component to maintain the reliability of unidirectional data flow. Similarly, State is the same. Immutable state is a crucial key to maintaining the reliability of React's data flow. State is used to represent a Component's state data at a certain historical moment (a certain render) and should not be modified once created, otherwise it might lead to the reliability of the data flow being compromised or some mechanisms not working properly (e.g., data new/old check requirements when calling the setState method, requirements for reading old State from past renders, reference check requirements for React performance optimization mechanisms). Therefore, in React, we should not mutate an object or array-type State data but should, like dealing with primitive type values, generate a new object or array to replace the old one. However, since this is not a native feature of JavaScript for object data types, it's an important principle that must be manually maintained and adhered to entirely by developers.\n\n- **Hook for Handling Side Effects: useEffect**\n\nBefore introducing useEffect, let's understand what an effect is: effect = side effect. When a function, besides returning a result value, also depends on or affects some system state outside the function, or interacts with the external environment, we say this function has side effects (e.g., modifying global variables outside the function, reading/writing files, database operations, network requests... are all common side effects). Reduced predictability, testing difficulties, high coupling, difficulty in maintenance and understanding, and optimization limitations are negative impacts of effects.\n\nAfter understanding effects and their negative impacts, let's look at the potential negative impacts of effects in React component functions:\n\n1. Side effects in React component functions might slow down or even block the calculation process of the function itself.\n\n2. The accumulated impact of side effects caused by multiple executions of functions in React component functions is difficult to predict.\n\n3. When handling side effects in React component functions involves subsequent asynchronous impacts, the order of execution of side effects may not be the same as the order of responses to asynchronous events, leading to race condition problems.\n\n4. In React component functions, when a side effect starts continuous monitoring work (such as registering a subscription to an event) but doesn't handle the corresponding unsubscription, it might continue monitoring even after the Component unmounts, leading to memory leak problems.\n\nThe method to solve the potential negative impacts of side effects in React is to use the useEffect Hook.\n\nIt's important to note that useEffect belongs to \"declarative\" programming. We only care about what the expected result looks like (i.e., the destination), not how it gets there step by step. Therefore, if you try to control the effect function to only execute on the first render, you're actually violating the design thinking of useEffect itself. When the execution effect of our effect function depends on \"the timing of execution in the process\" rather than \"what the destination is,\" it's easy to write unreliable side effect handling logic. Also, understand that the purpose of useEffect is to \"synchronize original data to side effect handling beyond the screen,\" not a lifecycle API.\n\nUsing useEffect generally involves three major steps:\n\n1. Define an effect function: useEffect can isolate the execution timing of side effects from the Component render process. It isolates the handling of side effects to execute after each render process is completed, to avoid side effect handling directly blocking the generation and updating of the screen. This solves the first potential negative impact of effects in React component functions mentioned above (slowing down/blocking the calculation process of the function itself).\n\n2. Add a cleanup function to clean up side effects (if needed): useEffect allows developers to define side effects in the component function while also specifying how to clean up the impact caused by the side effect through defining a \"cleanup function.\" The cleanup function is executed before each re-execution of the side effect and when the Component unmounts, to avoid the continuous accumulation of impacts caused by side effects. This solves the second to fourth potential negative impacts of effects in React component functions mentioned above (including the difficulty in predicting the accumulated impact of multiple function executions, race condition problems when side effect handling involves subsequent asynchronous impacts, and memory leak problems).\n\n3. Specify the dependencies array of the effect function to skip some unnecessary side effect handling (optional): dependencies are a performance optimization, not a control of execution timing. They are used to determine \"when it's safe to skip\" rather than specifying \"only when it will execute.\" When dependencies haven't updated, the behavior of \"skipping the execution of side effects\" is not absolutely guaranteed, so please don't lie about dependencies! Also, note that \"not providing the dependencies parameter at all\" and \"providing an empty array [] as the dependencies parameter\" have completely different meanings and execution effects. Not providing the dependencies parameter at all means maintaining the default behavior of useEffect, which is executing the effect function once after each render; providing an empty array [] as the dependencies parameter means this effect function doesn't depend on any data, and the component can safely skip the execution of the effect function during each re-render.\n\n## Three Major Lifecycle Phases of a Component\n\nComponents have three major lifecycle phases: mount, update, and unmount.\n\n### mount = render\n\nWhen a component function is called and executed for the first time, it performs the first render to generate the initial state of the screen. This phase is also called mount.\n\nThe mount process goes through two phases: render phase and commit phase:\n\n- The render phase executes the component function, using data such as Props and State to generate the React element for the initial screen, and then passes the generated React element to the commit phase for further processing.\n\n- The commit phase converts all React elements generated by the Component in the render phase (because during the first render, there are no DOM elements corresponding to this Component instance's screen section in the browser's actual DOM yet) and creates corresponding actual DOM elements, then places them all in the actual screen through the browser's DOM API appendChild().\n\nThe state after the mount process is completed is called \"mounted,\" meaning the Component's first render process has been completed and has successfully \"mounted\" to the actual browser screen. This means you can only find the DOM elements corresponding to this Component in the browser's DOM structure after it's mounted.\n\nThe entire render process can be seen as a top-down, outside-in process.\n\n### update = re-render = reconciliation\n\nWhen the internal state data of a Component changes, React executes the component function again to generate a new version of the screen corresponding to the new version of data. This process is called re-render or reconciliation, which is the update phase.\n\nThe update process also goes through the render phase and commit phase:\n\n- Before entering the render phase, it starts with calling setState() (as mentioned when introducing the useState Hook, the only legal way to trigger a Component re-render is by calling the setState method to update the state value, so the update phase definitely starts with calling setState()). Then it uses Object.is() to compare whether the existing state value and the newly specified state value are the same. If they are, it directly terminates the subsequent process; if not, it enters the render phase.\n\n- The render phase first updates the State data and re-renders the component function to generate a new version of React elements. Then it compares the structure of the new and old versions of React elements using the diffing algorithm to find the differences between them, and then enters the commit phase.\n\n- The commit phase operates to update those actual DOM elements corresponding to the differences between the new and old React elements, to complete the browser's screen update.\n\nFinally, although the only legal means to trigger a Component re-render is by calling the setState method to update the State value, there are actually two possible situations that can trigger a Component re-render:\n\n1. The Component itself has defined State, and the setState method corresponding to that State is called.\n\n2. The parent or grandparent Component of the Component has a re-render due to a setState call, so the Component itself, as a child Component, is also re-rendered.\n\n### unmount\n\nWhen a Component-type React element at that position no longer appears in the new screen structure after re-render, the corresponding Component instance enters the \"unmount\" phase, meaning \"that section no longer needs to exist on the screen.\" React will clean up side effects and remove the actual DOM elements corresponding to that Component instance from the browser. The process is roughly as follows:\n\n1. When in the new render of the application, a Component-type React element has disappeared compared to the previous render, React will consider that the corresponding Component instance at that location should be unmounted.\n\n2. Execute the cleanup function corresponding to the Component's last side effect handling to clean up the remaining side effect impacts.\n\n3. Remove the actual DOM elements corresponding to the Component instance from the browser.\n\n4. React will internally remove the corresponding Component instance, which is the Fiber node we'll introduce next. This means all state data and other status data inside the Component instance will be discarded.\n\n## The Core Entity of the Latest Application State and UI Structure: Fiber Node\n\nThe Fiber node in React serves as the core entity of the latest application state and UI structure. Its job is to store and maintain the latest state data of the current React application. Therefore, we see that the Fiber node stores the latest state data related to various Hooks in the Component, such as when we call multiple useState in a Component, the Fiber node stores the State data in a linked list data structure. Besides State data being stored in the Fiber node, the pending computation sequence when continuously calling the setState method is also stored in the Fiber node.\n\nIn the mount phase, when we first render a Component-type React element at a certain place in the screen structure, React creates a new Component instance at the corresponding position in the Fiber node tree of the entire application. Therefore, precisely speaking, a Component instance refers to a Fiber node.\n\nIn the update phase, the reconciler is responsible for scheduling the Component's render and updating the data changes to the Fiber node, then comparing the React elements rendered this time with the React elements from the previous render, and handing over to the renderer to handle the actual DOM operation updates.\n\n## Summary\n\nAfter understanding the general outline of React, I want to explain how I imagine the whole process works when using React from our programming perspective: Usually, when using React as a UI library/framework to write frontend applications, we start by writing Components using JSX syntax. Components return React elements. After generating React elements, React creates/updates Component instances at the corresponding positions in the Fiber node tree of the entire application and stores the latest state data related to various Hooks in the Component. Then, React converts the generated React elements and creates corresponding actual DOM elements to complete the browser's screen rendering/updating. Finally, if the Component uses useEffect, it executes the effect function of this render version after the screen rendering/updating is completed. If useEffect provides a cleanup function, it executes the cleanup function of the previous render version before executing the effect function of this render version (if it's the first render, this step is skipped).\n\n## Reference\n\n[React Thinking Evolution: Breaking Common Misconceptions and Elevating to Professional Frontend Developer](https://www.tenlong.com.tw/products/9786263336841)","src/content/en/react-overview.md","9a4162d7abc9b603",{html:541,metadata:542},"<p>I’ve spent a considerable amount of time recently trying to understand React. I want to document my current understanding of its basic structure, so this article will attempt to provide an overview perspective, hoping to show the big picture of React. If I want to delve into more specific details, I’ll write separate articles for those topics.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#origin\">Origin</a></li>\n<li><a href=\"#two-concepts-you-need-to-know-before-starting\">Two Concepts You Need to Know Before Starting</a>\n<ul>\n<li><a href=\"#browser-api-interface-for-other-programming-languages-dom\">Browser API Interface for Other Programming Languages: DOM</a></li>\n<li><a href=\"#design-pattern-unidirectional-data-flow\">Design Pattern: Unidirectional Data Flow</a></li>\n</ul>\n</li>\n<li><a href=\"#dom-rendering-strategy-to-implement-unidirectional-data-flow\">DOM Rendering Strategy to Implement Unidirectional Data Flow</a></li>\n<li><a href=\"#using-the-virtual-dom-concept-for-complete-redrawing-to-solve-performance-issues-of-direct-dom-redrawing\">Using the Virtual DOM Concept for Complete Redrawing to Solve Performance Issues of Direct DOM Redrawing</a>\n<ul>\n<li><a href=\"#additional-benefit-of-using-virtual-dom-separating-screen-management-into-two-independent-phases---definition-phase-and-actual-rendering-phase\">Additional Benefit of Using Virtual DOM: Separating Screen Management into Two Independent Phases - “Definition Phase” and “Actual Rendering Phase”</a></li>\n</ul>\n</li>\n<li><a href=\"#implementation-of-virtual-dom-concept-in-react-react-element\">Implementation of Virtual DOM Concept in React: React Element</a></li>\n<li><a href=\"#syntactic-sugar-for-creating-react-elements-jsx-syntax\">“Syntactic Sugar” for Creating React Elements: JSX Syntax</a></li>\n<li><a href=\"#developer-defined-ui-component-blueprint-component\">Developer-Defined UI Component Blueprint: Component</a>\n<ul>\n<li><a href=\"#mechanism-for-passing-specific-parameters-from-outside-to-inside-a-component-props\">Mechanism for Passing Specific Parameters from Outside to Inside a Component: Props</a></li>\n<li><a href=\"#special-functions-that-can-only-be-called-in-the-top-level-scope-of-function-components-aka-react-apis-hooks\">Special Functions That Can Only Be Called in the Top-Level Scope of Function Components aka React APIs: Hooks</a></li>\n</ul>\n</li>\n<li><a href=\"#three-major-lifecycle-phases-of-a-component\">Three Major Lifecycle Phases of a Component</a>\n<ul>\n<li><a href=\"#mount--render\">mount = render</a></li>\n<li><a href=\"#update--re-render--reconciliation\">update = re-render = reconciliation</a></li>\n<li><a href=\"#unmount\">unmount</a></li>\n</ul>\n</li>\n<li><a href=\"#the-core-entity-of-the-latest-application-state-and-ui-structure-fiber-node\">The Core Entity of the Latest Application State and UI Structure: Fiber Node</a></li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"origin\">Origin</h2>\n<p>I don’t intend to discuss the origins of React here, but if you’re interested, I highly recommend watching the YouTube documentary <a href=\"https://www.youtube.com/watch?v=8pDqJVdNa44\">How A Small Team of Developers Created React at Facebook | React.js: The Documentary</a> by the <a href=\"https://www.youtube.com/@Honeypotio/videos\">Honeypot</a> channel. Alternatively, you can read the reflections on this documentary written by <a href=\"https://www.explainthis.io/zh-hant\">ExplainThis</a>: <a href=\"https://www.explainthis.io/zh-hant/swe/react-documentary/part1\">React Documentary Reflections 1 — Rethinking Best Practices</a> and <a href=\"https://www.explainthis.io/zh-hant/swe/react-documentary/part2\">React Documentary Reflections 2 — Community-Driven Innovation</a>.</p>\n<h2 id=\"two-concepts-you-need-to-know-before-starting\">Two Concepts You Need to Know Before Starting</h2>\n<h3 id=\"browser-api-interface-for-other-programming-languages-dom\">Browser API Interface for Other Programming Languages: DOM</h3>\n<p>React is a JavaScript UI library. When writing web applications, if you want to manipulate the browser’s UI, you must do so through the browser’s API interface for other programming languages: the DOM. The DOM uses a tree structure to store web elements, with each part of the tree called a node. The root node at the top is the document, representing the webpage itself.</p>\n<h3 id=\"design-pattern-unidirectional-data-flow\">Design Pattern: Unidirectional Data Flow</h3>\n<p>React uses a “unidirectional data flow” design pattern. The core concept of unidirectional data flow is “data-driven UI,” meaning the UI only updates when the data changes. Since this is a one-way process, the UI won’t change for any reason other than data changes. This ensures that the main factor affecting UI is limited to “data,” and when data updates, the corresponding bound UI elements automatically change, thereby improving the reliability and maintainability of frontend applications.</p>\n<h2 id=\"dom-rendering-strategy-to-implement-unidirectional-data-flow\">DOM Rendering Strategy to Implement Unidirectional Data Flow</h2>\n<p>After understanding the concepts of DOM and unidirectional data flow, we need to understand how React uses the unidirectional data flow design pattern to manipulate the DOM for browser rendering/updating.</p>\n<p>Before explaining React’s approach, we should recognize that directly manipulating the DOM is performance-intensive because it triggers the browser’s rendering engine to redraw the screen. Therefore, a key aspect of frontend performance optimization is reducing DOM operations by minimizing the scope of DOM manipulations needed for UI changes.</p>\n<p>Given this premise, a more intuitive approach to implementing unidirectional data flow for DOM rendering would be “manually modifying all DOM elements that should be updated when data changes.” The advantage of this approach is reducing unnecessary DOM operations, but the disadvantage is relying entirely on manual DOM manipulation, which becomes extremely difficult to manage comprehensively in complex applications. Vue.js is a framework that adopts this method while solving the challenges of manual DOM manipulation.</p>\n<p>Another more radical approach to implementing unidirectional data flow for DOM rendering is “clearing all DOM elements of the entire screen when data updates, then completely redrawing based on the latest data.” This directly solves the difficulty of manual DOM manipulation mentioned above. Developers only need to focus on data updates and template definitions without manually maintaining the DOM. While more intuitive and simple, this approach clearly violates our key principle of frontend performance optimization: reducing DOM operations. It causes significant performance waste, affecting user experience in large, complex applications. React is a framework that adopts this method while solving the performance waste problem of complete redrawing.</p>\n<h2 id=\"using-the-virtual-dom-concept-for-complete-redrawing-to-solve-performance-issues-of-direct-dom-redrawing\">Using the Virtual DOM Concept for Complete Redrawing to Solve Performance Issues of Direct DOM Redrawing</h2>\n<p>How does React solve the performance waste problem of complete redrawing? The answer is by using the “Virtual DOM” concept for complete redrawing.</p>\n<p>What is the Virtual DOM? The Virtual DOM is just a concept. Its essence is ordinary JavaScript object data that creates a “virtual screen structure” (think of it as a prototype for screen rendering) to simulate and correspond to the actual DOM’s screen structure. The implementation process is: when the screen needs updating, first generate a new Virtual DOM structure → compare it in detail with the old Virtual DOM structure → execute DOM operations only on the differences to reduce performance costs.</p>\n<h3 id=\"additional-benefit-of-using-virtual-dom-separating-screen-management-into-two-independent-phases---definition-phase-and-actual-rendering-phase\">Additional Benefit of Using Virtual DOM: Separating Screen Management into Two Independent Phases - “Definition Phase” and “Actual Rendering Phase”</h3>\n<p>Besides optimizing DOM operation performance, the Virtual DOM has another benefit: separating screen management into two independent phases: “defining and managing screen structure descriptions (reconciler)” and “rendering these descriptions into actual screen products (renderer).” The reconciler is universal across environments (as long as JavaScript can run in that environment), while the renderer can be arbitrarily replaced, allowing React to manage and produce UIs or screens beyond the browser DOM (e.g., React Native for Android/iOS app screens, React-pdf for generating PDF documents).</p>\n<h2 id=\"implementation-of-virtual-dom-concept-in-react-react-element\">Implementation of Virtual DOM Concept in React: React Element</h2>\n<p>A React element is React’s implementation of the Virtual DOM concept - a virtual screen structure element that serves as the smallest unit for describing and composing the screen. More specifically, it’s an ordinary JavaScript object that describes an expected actual DOM element structure.</p>\n<p>It’s important to note that React elements are immutable once created because they describe a version of the screen structure at a specific time, like a historical record of the screen structure. Due to this immutability, when generating a new React element, React can compare it with the previous version to identify exactly which parts of the DOM need to be updated, achieving minimal DOM operations to reduce performance costs.</p>\n<p>In practical syntax, we can create a React element by calling React’s createElement method. While React elements correspond to DOM elements, some property naming conventions differ: commonly, all properties and attributes (including event handlers) use camel case naming (exceptions: aria-_ and data-_), and properties involving JavaScript built-in reserved words are renamed to avoid unexpected situations (e.g., class → className).</p>\n<h2 id=\"syntactic-sugar-for-creating-react-elements-jsx-syntax\">”Syntactic Sugar” for Creating React Elements: JSX Syntax</h2>\n<p>JSX syntax is “syntactic sugar” for the React.createElement method. It looks like HTML syntax because it was deliberately designed to mimic HTML syntax and development experience, but it is fundamentally different from HTML.</p>\n<p>JSX code is transpiled at build time, with common transpilation tools being Babel and the TypeScript compiler. An optimization method for React.createElement during transpilation is calling the _jsx method of jsx-runtime (supported since React 17). Both React.createElement() and _jsx() are methods for creating React elements, with the difference being that the _jsx method includes some additional optimizations. Note that the _jsx method of jsx-runtime can only be called through JSX syntax transpilation by a transpiler and cannot be written directly like the React.createElement method.</p>\n<p>When writing JSX syntax, there are some points to note. For instance, JSX syntax can only have one node at the first level because a piece of JSX = one call to the React.createElement method, so it only returns “one React element,” and one React element represents a tree data structure (which can only have one root node). Therefore, if there are multiple nodes, they need to be wrapped in a common parent element. React has created a special built-in element type for this purpose: Fragment, which can serve as a container but doesn’t produce a corresponding actual DOM element. We typically use the shorthand empty tag &#x3C;> to express a Fragment-type React element.</p>\n<p>Another point to note is how various data types are handled when used as children of React elements and converted to the DOM: strings are printed directly; numbers are converted to strings and then printed; boolean values of false, null, and undefined are ignored; arrays are flattened into multiple child elements and all printed in sequence; and be careful that objects and functions cannot be converted and will cause errors.</p>\n<p>In practical syntax, JSX syntax requires strict tag closure, so even tags that don’t need to be closed in HTML syntax (e.g., <code>&#x3C;br></code>, <code>&#x3C;img></code>, <code>&#x3C;input></code>) must be closed when writing JSX syntax. Additionally, we can use self-closing shorthand syntax to represent tags without children (e.g., <code>const img = &#x3C;img src=\"./image.jpg\" /></code>).</p>\n<p>Furthermore, JSX syntax has two main ways of expressing data: literals (e.g., strings) and expressions (e.g., variables). For literal data expression, the format is similar to HTML syntax: literal values for attributes use double quotes ” ”; literal values for children can be written directly. Expression data uses JSX’s specified syntax { } to enclose it, such as “variables” or “expressing another piece of JSX syntax as a child element within JSX syntax” are types of expressions. In the second scenario, you don’t have to write { } because JSX syntax also supports writing child element tags directly between the parent element’s opening and closing tags, to provide a development experience closer to writing HTML syntax.</p>\n<h2 id=\"developer-defined-ui-component-blueprint-component\">Developer-Defined UI Component Blueprint: Component</h2>\n<p>To summarize what we’ve covered so far: React is a UI library/framework designed based on the principle of “unidirectional data flow.” For its DOM rendering strategy, it uses the approach of “clearing all DOM elements of the entire screen when data updates, then completely redrawing based on the latest data” to implement unidirectional data flow. However, to solve the performance waste problem of frequently clearing and redrawing everything on the DOM, React doesn’t perform these operations directly on the DOM. Instead, it introduces the Virtual DOM concept to first simulate the actual DOM’s screen structure using JavaScript object format for complete redrawing. This Virtual DOM concept is implemented in React as React elements, so a React element is actually a virtual screen structure element that serves as the smallest unit for describing and composing the screen. But in practice, we usually don’t write React elements directly; instead, we encapsulate them within Components.</p>\n<p>A Component can be thought of as a template or building block. It’s a developer-defined UI component blueprint that receives developer-customized props data as parameters and returns a React component as the structure of a screen section.</p>\n<p>We can understand that a Component actually returns a React element. Besides containing React elements corresponding to actual DOM elements, a Component can also contain and call other Components as sub-Components, like assembling building blocks.</p>\n<p>The essence and significance of designing Components is to abstract based on requirements and logical meaning, categorizing features and behaviors of concern, designing a process or logic suitable for specific scenarios and semantic ranges, and encapsulating implementation details for reuse.</p>\n<p>In the function component era, we define Components as “functions” because they define “the process and logic for generating a specific screen.” They are a kind of “description,” not a fixed screen that has already been generated. So the same Component (imagine it as a blueprint) can be called multiple times, and each instance of the Component is independent, allowing for customization according to requirements.</p>\n<p>In practical syntax, the first letter of a Component name must be capitalized to distinguish it from regular element tags. This way, when a tag name is lowercase, React treats it as a string when creating a React element; when a tag name is capitalized, React treats it as a variable name.</p>\n<p>Additionally, there are two ways to export Components: default export and named export. A JS file can only have one default export but can have multiple named exports. For default export, we can use export default to export the Component and import ComponentName from ‘file path’ to import it.</p>\n<h3 id=\"mechanism-for-passing-specific-parameters-from-outside-to-inside-a-component-props\">Mechanism for Passing Specific Parameters from Outside to Inside a Component: Props</h3>\n<p>Props, short for properties, are the properties of a Component. They provide a mechanism for passing specific parameters from outside to inside a Component blueprint when calling it. This allows us to customize the screen generation process based on the parameters passed in, accommodating more usage scenarios.</p>\n<p>React doesn’t impose any restrictions on what data types can be passed as Props to a Component. Notably, even a React element can be passed as a Props value because a React element itself is just an ordinary JavaScript object, which provides more possibilities for UI abstraction design.</p>\n<p>It’s important to note that Props are data from the outside, so they are read-only/immutable inside the Component. This is to maintain the reliability of unidirectional data flow. React typically uses Object.freeze(props) to freeze Props so you can’t modify them, but there are situations that can’t be detected (e.g., when directly modifying an original array using methods like push), so be careful!</p>\n<p>In practical syntax, the first parameter received by a component function is the Props object, containing various properties we pass in when calling the Component. We can either write props directly in the parameter definition or destructure to extract the needed property data. Additionally, React has a special Prop called children. This children prop in pure React elements is limited to specific types (as mentioned in the JSX syntax section about how various data types are handled when used as children of React elements and converted to the DOM, with a reminder that objects and functions cannot be converted and will cause errors). However, in Component-type React elements, the children prop can accept any type of value without restriction because how the children prop is used in a Component is determined by the developer inside the Component.</p>\n<h3 id=\"special-functions-that-can-only-be-called-in-the-top-level-scope-of-function-components-aka-react-apis-hooks\">Special Functions That Can Only Be Called in the Top-Level Scope of Function Components aka React APIs: Hooks</h3>\n<p>Hooks are APIs provided by React. They are special functions that can only be called in the top-level scope of function components, used to inject various React core features or functionalities into Components.</p>\n<p>Why can Hooks only be called in the top-level scope of function components? This is to ensure that some internal mechanisms of Hooks can work properly and avoid unexpected issues like data loss. The main internal mechanism is that all Hooks in a Component rely on a fixed calling order in each render to distinguish from each other, so this restriction ensures that all Hooks are called in every render process. For a concrete example, if a Hook is placed inside an if condition rather than in the top-level scope, and the condition is true during the first render of the Component so the Hook is executed, but the condition becomes false during the second render so the Hook isn’t executed, we encounter a problem: remember that “all Hooks in a Component rely on a fixed calling order in each render to distinguish from each other,” but if not all Hooks in a Component are definitely called during each render, it leads to misaligned order. That’s why there’s the restriction that “Hooks can only be called in the top-level scope of function components.”</p>\n<p>Looking at a higher level, why use “order” of calls, rather than other methods (e.g., names) to distinguish between Hooks? This is because the design of sequential function calls can solve the diamond problem.</p>\n<p>Common Hooks in React include useState, useEffect, useCallback, useMemo, useRef, useContext, etc. Here’s a preliminary introduction to two of these Hooks: useState and useEffect:</p>\n<ul>\n<li><strong>Hook for Defining and Accessing State: useState</strong></li>\n</ul>\n<p>In function components, we can define and access State by calling the useState Hook. In React development conventions, we typically use array destructuring syntax to rename the state value and setState method returned by useState according to their business logic meaning (e.g., renaming the state value variable representing counter state data to count, and the corresponding setState method to setCount).</p>\n<p>A Component can have multiple states, and React can recognize different states in the same component because of the characteristic mentioned above that Hooks use “order” to remember and distinguish from each other.</p>\n<p>The only legal way to trigger a Component re-render is by calling the setState method to update the state value. However, note that the setState method is asynchronous. After calling the setState method, React doesn’t immediately trigger a re-render but waits until all programs in the current event have finished before starting the re-render.</p>\n<p>It’s important to note that, as mentioned when introducing Props, Props are read-only/immutable inside a Component to maintain the reliability of unidirectional data flow. Similarly, State is the same. Immutable state is a crucial key to maintaining the reliability of React’s data flow. State is used to represent a Component’s state data at a certain historical moment (a certain render) and should not be modified once created, otherwise it might lead to the reliability of the data flow being compromised or some mechanisms not working properly (e.g., data new/old check requirements when calling the setState method, requirements for reading old State from past renders, reference check requirements for React performance optimization mechanisms). Therefore, in React, we should not mutate an object or array-type State data but should, like dealing with primitive type values, generate a new object or array to replace the old one. However, since this is not a native feature of JavaScript for object data types, it’s an important principle that must be manually maintained and adhered to entirely by developers.</p>\n<ul>\n<li><strong>Hook for Handling Side Effects: useEffect</strong></li>\n</ul>\n<p>Before introducing useEffect, let’s understand what an effect is: effect = side effect. When a function, besides returning a result value, also depends on or affects some system state outside the function, or interacts with the external environment, we say this function has side effects (e.g., modifying global variables outside the function, reading/writing files, database operations, network requests… are all common side effects). Reduced predictability, testing difficulties, high coupling, difficulty in maintenance and understanding, and optimization limitations are negative impacts of effects.</p>\n<p>After understanding effects and their negative impacts, let’s look at the potential negative impacts of effects in React component functions:</p>\n<ol>\n<li>\n<p>Side effects in React component functions might slow down or even block the calculation process of the function itself.</p>\n</li>\n<li>\n<p>The accumulated impact of side effects caused by multiple executions of functions in React component functions is difficult to predict.</p>\n</li>\n<li>\n<p>When handling side effects in React component functions involves subsequent asynchronous impacts, the order of execution of side effects may not be the same as the order of responses to asynchronous events, leading to race condition problems.</p>\n</li>\n<li>\n<p>In React component functions, when a side effect starts continuous monitoring work (such as registering a subscription to an event) but doesn’t handle the corresponding unsubscription, it might continue monitoring even after the Component unmounts, leading to memory leak problems.</p>\n</li>\n</ol>\n<p>The method to solve the potential negative impacts of side effects in React is to use the useEffect Hook.</p>\n<p>It’s important to note that useEffect belongs to “declarative” programming. We only care about what the expected result looks like (i.e., the destination), not how it gets there step by step. Therefore, if you try to control the effect function to only execute on the first render, you’re actually violating the design thinking of useEffect itself. When the execution effect of our effect function depends on “the timing of execution in the process” rather than “what the destination is,” it’s easy to write unreliable side effect handling logic. Also, understand that the purpose of useEffect is to “synchronize original data to side effect handling beyond the screen,” not a lifecycle API.</p>\n<p>Using useEffect generally involves three major steps:</p>\n<ol>\n<li>\n<p>Define an effect function: useEffect can isolate the execution timing of side effects from the Component render process. It isolates the handling of side effects to execute after each render process is completed, to avoid side effect handling directly blocking the generation and updating of the screen. This solves the first potential negative impact of effects in React component functions mentioned above (slowing down/blocking the calculation process of the function itself).</p>\n</li>\n<li>\n<p>Add a cleanup function to clean up side effects (if needed): useEffect allows developers to define side effects in the component function while also specifying how to clean up the impact caused by the side effect through defining a “cleanup function.” The cleanup function is executed before each re-execution of the side effect and when the Component unmounts, to avoid the continuous accumulation of impacts caused by side effects. This solves the second to fourth potential negative impacts of effects in React component functions mentioned above (including the difficulty in predicting the accumulated impact of multiple function executions, race condition problems when side effect handling involves subsequent asynchronous impacts, and memory leak problems).</p>\n</li>\n<li>\n<p>Specify the dependencies array of the effect function to skip some unnecessary side effect handling (optional): dependencies are a performance optimization, not a control of execution timing. They are used to determine “when it’s safe to skip” rather than specifying “only when it will execute.” When dependencies haven’t updated, the behavior of “skipping the execution of side effects” is not absolutely guaranteed, so please don’t lie about dependencies! Also, note that “not providing the dependencies parameter at all” and “providing an empty array [] as the dependencies parameter” have completely different meanings and execution effects. Not providing the dependencies parameter at all means maintaining the default behavior of useEffect, which is executing the effect function once after each render; providing an empty array [] as the dependencies parameter means this effect function doesn’t depend on any data, and the component can safely skip the execution of the effect function during each re-render.</p>\n</li>\n</ol>\n<h2 id=\"three-major-lifecycle-phases-of-a-component\">Three Major Lifecycle Phases of a Component</h2>\n<p>Components have three major lifecycle phases: mount, update, and unmount.</p>\n<h3 id=\"mount--render\">mount = render</h3>\n<p>When a component function is called and executed for the first time, it performs the first render to generate the initial state of the screen. This phase is also called mount.</p>\n<p>The mount process goes through two phases: render phase and commit phase:</p>\n<ul>\n<li>\n<p>The render phase executes the component function, using data such as Props and State to generate the React element for the initial screen, and then passes the generated React element to the commit phase for further processing.</p>\n</li>\n<li>\n<p>The commit phase converts all React elements generated by the Component in the render phase (because during the first render, there are no DOM elements corresponding to this Component instance’s screen section in the browser’s actual DOM yet) and creates corresponding actual DOM elements, then places them all in the actual screen through the browser’s DOM API appendChild().</p>\n</li>\n</ul>\n<p>The state after the mount process is completed is called “mounted,” meaning the Component’s first render process has been completed and has successfully “mounted” to the actual browser screen. This means you can only find the DOM elements corresponding to this Component in the browser’s DOM structure after it’s mounted.</p>\n<p>The entire render process can be seen as a top-down, outside-in process.</p>\n<h3 id=\"update--re-render--reconciliation\">update = re-render = reconciliation</h3>\n<p>When the internal state data of a Component changes, React executes the component function again to generate a new version of the screen corresponding to the new version of data. This process is called re-render or reconciliation, which is the update phase.</p>\n<p>The update process also goes through the render phase and commit phase:</p>\n<ul>\n<li>\n<p>Before entering the render phase, it starts with calling setState() (as mentioned when introducing the useState Hook, the only legal way to trigger a Component re-render is by calling the setState method to update the state value, so the update phase definitely starts with calling setState()). Then it uses Object.is() to compare whether the existing state value and the newly specified state value are the same. If they are, it directly terminates the subsequent process; if not, it enters the render phase.</p>\n</li>\n<li>\n<p>The render phase first updates the State data and re-renders the component function to generate a new version of React elements. Then it compares the structure of the new and old versions of React elements using the diffing algorithm to find the differences between them, and then enters the commit phase.</p>\n</li>\n<li>\n<p>The commit phase operates to update those actual DOM elements corresponding to the differences between the new and old React elements, to complete the browser’s screen update.</p>\n</li>\n</ul>\n<p>Finally, although the only legal means to trigger a Component re-render is by calling the setState method to update the State value, there are actually two possible situations that can trigger a Component re-render:</p>\n<ol>\n<li>\n<p>The Component itself has defined State, and the setState method corresponding to that State is called.</p>\n</li>\n<li>\n<p>The parent or grandparent Component of the Component has a re-render due to a setState call, so the Component itself, as a child Component, is also re-rendered.</p>\n</li>\n</ol>\n<h3 id=\"unmount\">unmount</h3>\n<p>When a Component-type React element at that position no longer appears in the new screen structure after re-render, the corresponding Component instance enters the “unmount” phase, meaning “that section no longer needs to exist on the screen.” React will clean up side effects and remove the actual DOM elements corresponding to that Component instance from the browser. The process is roughly as follows:</p>\n<ol>\n<li>\n<p>When in the new render of the application, a Component-type React element has disappeared compared to the previous render, React will consider that the corresponding Component instance at that location should be unmounted.</p>\n</li>\n<li>\n<p>Execute the cleanup function corresponding to the Component’s last side effect handling to clean up the remaining side effect impacts.</p>\n</li>\n<li>\n<p>Remove the actual DOM elements corresponding to the Component instance from the browser.</p>\n</li>\n<li>\n<p>React will internally remove the corresponding Component instance, which is the Fiber node we’ll introduce next. This means all state data and other status data inside the Component instance will be discarded.</p>\n</li>\n</ol>\n<h2 id=\"the-core-entity-of-the-latest-application-state-and-ui-structure-fiber-node\">The Core Entity of the Latest Application State and UI Structure: Fiber Node</h2>\n<p>The Fiber node in React serves as the core entity of the latest application state and UI structure. Its job is to store and maintain the latest state data of the current React application. Therefore, we see that the Fiber node stores the latest state data related to various Hooks in the Component, such as when we call multiple useState in a Component, the Fiber node stores the State data in a linked list data structure. Besides State data being stored in the Fiber node, the pending computation sequence when continuously calling the setState method is also stored in the Fiber node.</p>\n<p>In the mount phase, when we first render a Component-type React element at a certain place in the screen structure, React creates a new Component instance at the corresponding position in the Fiber node tree of the entire application. Therefore, precisely speaking, a Component instance refers to a Fiber node.</p>\n<p>In the update phase, the reconciler is responsible for scheduling the Component’s render and updating the data changes to the Fiber node, then comparing the React elements rendered this time with the React elements from the previous render, and handing over to the renderer to handle the actual DOM operation updates.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>After understanding the general outline of React, I want to explain how I imagine the whole process works when using React from our programming perspective: Usually, when using React as a UI library/framework to write frontend applications, we start by writing Components using JSX syntax. Components return React elements. After generating React elements, React creates/updates Component instances at the corresponding positions in the Fiber node tree of the entire application and stores the latest state data related to various Hooks in the Component. Then, React converts the generated React elements and creates corresponding actual DOM elements to complete the browser’s screen rendering/updating. Finally, if the Component uses useEffect, it executes the effect function of this render version after the screen rendering/updating is completed. If useEffect provides a cleanup function, it executes the cleanup function of the previous render version before executing the effect function of this render version (if it’s the first render, this step is skipped).</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.tenlong.com.tw/products/9786263336841\">React Thinking Evolution: Breaking Common Misconceptions and Elevating to Professional Frontend Developer</a></p>",{headings:543,localImagePaths:599,remoteImagePaths:600,frontmatter:601,imagePaths:605},[544,545,548,551,554,557,560,563,566,569,572,575,578,581,584,587,590,592,595,598],{depth:32,slug:145,text:146},{depth:32,slug:546,text:547},"origin","Origin",{depth:32,slug:549,text:550},"two-concepts-you-need-to-know-before-starting","Two Concepts You Need to Know Before Starting",{depth:62,slug:552,text:553},"browser-api-interface-for-other-programming-languages-dom","Browser API Interface for Other Programming Languages: DOM",{depth:62,slug:555,text:556},"design-pattern-unidirectional-data-flow","Design Pattern: Unidirectional Data Flow",{depth:32,slug:558,text:559},"dom-rendering-strategy-to-implement-unidirectional-data-flow","DOM Rendering Strategy to Implement Unidirectional Data Flow",{depth:32,slug:561,text:562},"using-the-virtual-dom-concept-for-complete-redrawing-to-solve-performance-issues-of-direct-dom-redrawing","Using the Virtual DOM Concept for Complete Redrawing to Solve Performance Issues of Direct DOM Redrawing",{depth:62,slug:564,text:565},"additional-benefit-of-using-virtual-dom-separating-screen-management-into-two-independent-phases---definition-phase-and-actual-rendering-phase","Additional Benefit of Using Virtual DOM: Separating Screen Management into Two Independent Phases - “Definition Phase” and “Actual Rendering Phase”",{depth:32,slug:567,text:568},"implementation-of-virtual-dom-concept-in-react-react-element","Implementation of Virtual DOM Concept in React: React Element",{depth:32,slug:570,text:571},"syntactic-sugar-for-creating-react-elements-jsx-syntax","”Syntactic Sugar” for Creating React Elements: JSX Syntax",{depth:32,slug:573,text:574},"developer-defined-ui-component-blueprint-component","Developer-Defined UI Component Blueprint: Component",{depth:62,slug:576,text:577},"mechanism-for-passing-specific-parameters-from-outside-to-inside-a-component-props","Mechanism for Passing Specific Parameters from Outside to Inside a Component: Props",{depth:62,slug:579,text:580},"special-functions-that-can-only-be-called-in-the-top-level-scope-of-function-components-aka-react-apis-hooks","Special Functions That Can Only Be Called in the Top-Level Scope of Function Components aka React APIs: Hooks",{depth:32,slug:582,text:583},"three-major-lifecycle-phases-of-a-component","Three Major Lifecycle Phases of a Component",{depth:62,slug:585,text:586},"mount--render","mount = render",{depth:62,slug:588,text:589},"update--re-render--reconciliation","update = re-render = reconciliation",{depth:62,slug:591,text:591},"unmount",{depth:32,slug:593,text:594},"the-core-entity-of-the-latest-application-state-and-ui-structure-fiber-node","The Core Entity of the Latest Application State and UI Structure: Fiber Node",{depth:32,slug:596,text:597},"summary","Summary",{depth:32,slug:33,text:34},[],[],{title:529,subtitle:530,author:16,imageWebp:531,imagePng:532,imgAlt:529,creationDate:602,updateDate:603,tags:604,featured:136},["Date","2024-08-18T00:00:00.000Z"],["Date","2024-08-18T00:00:00.000Z"],[536],[],"react-overview.md","semantic-html",{id:607,data:609,body:618,filePath:619,digest:620,rendered:621,legacyId:633},{title:610,subtitle:611,author:16,imageWebp:612,imagePng:613,imgAlt:610,creationDate:614,updateDate:615,tags:616,featured:23},"Semantic HTML","Semantic HTML means developing with HTML tags that convey meaning.","/images/articles/webp/semantic-html.webp","/images/articles/png/semantic-html.png",["Date","2024-04-07T00:00:00.000Z"],["Date","2024-04-07T00:00:00.000Z"],[617],"HTML","Semantic HTML means developing with HTML tags that convey meaning, such as the `<form>` tag or the `<table>` tag.\r\n\r\nCurrently, there are over 100 semantic tags. For a complete list of tags, refer to [HTML elements reference - HTML: HyperText Markup Language | MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\r\n\r\nWe can see that these tags clearly define their content. The purpose of this approach is to improve SEO, enhance code readability, and increase accessibility, making it easier for other devices (such as screen readers) to parse the content.\r\n\r\n### Reference\r\n\r\n[什麼是 HTML 語意化?｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/semantics-in-html)","src/content/en/semantic-html.md","f13601442e2f77fd",{html:622,metadata:623},"<p>Semantic HTML means developing with HTML tags that convey meaning, such as the <code>&#x3C;form></code> tag or the <code>&#x3C;table></code> tag.</p>\n<p>Currently, there are over 100 semantic tags. For a complete list of tags, refer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">HTML elements reference - HTML: HyperText Markup Language | MDN</a></p>\n<p>We can see that these tags clearly define their content. The purpose of this approach is to improve SEO, enhance code readability, and increase accessibility, making it easier for other devices (such as screen readers) to parse the content.</p>\n<h3 id=\"reference\">Reference</h3>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/semantics-in-html\">什麼是 HTML 語意化?｜ ExplainThis</a></p>",{headings:624,localImagePaths:626,remoteImagePaths:627,frontmatter:628,imagePaths:632},[625],{depth:62,slug:33,text:34},[],[],{title:610,subtitle:611,author:16,imageWebp:612,imagePng:613,imgAlt:610,creationDate:629,updateDate:630,tags:631,featured:23},["Date","2024-04-07T00:00:00.000Z"],["Date","2024-04-07T00:00:00.000Z"],[617],[],"semantic-html.md","software-teams-and-gai-successes-and-failures-in-ai-collaboration",{id:634,data:636,body:644,filePath:645,digest:646,rendered:647,legacyId:679},{title:637,subtitle:638,author:16,imageWebp:639,imagePng:640,imgAlt:637,creationDate:641,updateDate:642,tags:643,featured:136},"Software Teams and GAI-Successes and Failures in AI Collaboration","Notes from the AI Your Summer series event on June 13, 2023.","/images/articles/webp/software-teams-and-gai-successes-and-failures-in-ai-collaboration.webp","/images/articles/png/software-teams-and-gai-successes-and-failures-in-ai-collaboration.png",["Date","2023-07-17T00:00:00.000Z"],["Date","2023-07-17T00:00:00.000Z"],[425],"This article shares notes from the [AI Your Summer](https://gai-2023.alphacamp.co/) series event on [June 13, 2023](https://www.accupass.com/event/2305221045441859361432). The content has been personally restructured and does not follow the exact flow of the original presentation. Feel free to discuss and share your thoughts.\r\n\r\nSpeaker:\r\n\r\n- Mosky（Pinkoi / Architect）\r\n- Caesar (TransIot / Chief Technology Officer)\r\n\r\nHost:\r\n\r\n- Bernard（ALPHA Camp / CEO, Founder）\r\n\r\n## Impact\r\n\r\n### Q: How will the AI era affect software engineers? (Related questions: How will the software engineering profession change in the future? Will there be fewer junior positions? Will companies eventually not need software engineers?)\r\n\r\nCaesar: \"Engineers won't lose their jobs in the short term because AI currently can't handle abstract concepts. The work we need software engineers for is still based on abstract connections, including the needs of bosses, clients, and imaginative requirements. These are very different connections. Although many underlying tasks are still CRUD operations, when you have abstract connections, current AI can't process them. AI requires humans to communicate an abstract problem > then it provides a concrete result > which approaches what we want > and then we continue step by step to achieve the desired outcome. So in this process, software engineers are still necessary.\"\r\n\r\nMosky: \"I'm not sure how the market will balance the demand for junior and senior engineers. I've heard many versions, but I don't have a definitive answer myself. What I am quite certain about is that your learning path will be very different from ours in the past. It's not that old methods will be abandoned—I think Google is still very useful—but AI will give you a brand new path that might be more suitable for you. You definitely need to try and use these tools more, but don't completely trust them (ChatGPT can make things up). Overall, I'm not anxious about it; rather, I'm more optimistic.\"\r\n\r\n### Q: Has your company set goals or expectations for AI use in the workplace?\r\n\r\nCaesar: \"We hope that over 50% of work will use AI, possibly with one engineer paired with one AI Assistant. The engineer will be responsible for ideation, architecture, and understanding the entire requirements, while AI will handle any framework and CRUD operations, etc.\"\r\n\r\nMosky: \"We ask everyone to explore how much time AI can save them. Based on these metrics, we then evaluate whether everyone should use AI to a certain extent (expanding usage). The company's current attitude strongly encourages everyone to try. Before the Generative AI conference, we were more conservative, but after the conference, we felt we couldn't be so cautious anymore. I personally review every AI service on behalf of the company and clearly define what services can be used to what extent. For example, you absolutely cannot send company-related data to ChatGPT because they use everything for training.\r\nIn summary: I use time as a measurement metric, and internally we have clear guidelines so everyone knows what can be used and how.\"\r\n\r\n### Q: How does the AI era affect programming learners? Is there a different skill tree that software engineers need to develop? Can they develop more horizontally with these tools? What adjustments will be needed?\r\n\r\nCaesar: \"For juniors, the necessary path still needs to be followed. Taking frontend engineers as an example, my skills would include JavaScript, HTML, and CSS—you still need to understand these. Even jumping to React/Vue/Angular, whatever you're interested in or what your company uses, you still need to know how the framework works, including virtual DOM, fiber, or how the entire event handling works, and the lifecycle process. Although ChatGPT will tell you the answers, you need to understand how everything works. Why do you still need to know this? Because when you already know the answer, you know how to ask for answers. If you don't know the answer, you won't know where the lifecycle is positioned or where the problem is located, so how can you expect it to produce the right answer? I think this is the challenge juniors face. The harsh future that might occur is that most work, most CRUD operations, most basic coding abilities might already be replaceable by AI. Then one senior with an AI could complete the work of 1 or 1.5 junior developers. So if you're a junior trying to enter the field, you might need to work hard and continuously learn on your own. The barrier to entry for juniors will increase, and engineers' development will require thinking from a more macro and abstract perspective.\"\r\n\r\nMosky: \"I believe there's always a starting point, and you need to reach that endpoint. In the past, you had to type on the keyboard yourself; now you can use prompts to accelerate your journey to the endpoint. But one important thing is that you still need to know where your endpoint is. ChatGPT helps you get to that endpoint faster. So for all engineers, one very important thing is that you still need to know where your endpoint is. This skill still needs to be cultivated, and under the premise that humans still need to be responsible for output, someone must know where that endpoint is, whether you're a senior or junior. So a certain level of hard skills still needs to be developed. I would say ChatGPT doesn't replace you but accelerates you to the endpoint. For example, the endpoint could be learning a certain skill or completing a company requirement. What ChatGPT can do is provide another path to help you achieve the hard/soft skills you want to acquire. In summary: Know where your endpoint is, develop the necessary hard/soft skills, but during this process, AI can help you achieve what you want to do.\"\r\n\r\n- Bernard asks on behalf of everyone: \"I'm a junior, and I don't know where the endpoint is. I don't know what I don't know, so when I don't know where the endpoint is, how do I find out? What advice would you give to a junior trying to break into the industry?\"\r\n\r\n- Mosky: \"Junior definition: Getting a job with the title 'software engineering' (someone willing to pay you to do this). This point is constantly changing; it's a range. The standards from ten years ago are different from today's, and standards vary between companies. Everyone needs to decide for themselves. Look at job descriptions > summarize & list them > use AI to help you learn what you need > apply for a job where someone is willing to pay you to do software engineering.\"\r\n\r\n- Caesar: \"AI tools becoming mainstream is already an established fact, so you need to understand how AI tools can help you reach a certain level. At the same time, you must constantly question AI's output because you don't know if its answers are correct or not, as you lack experience and are still in the exploration phase. So when you copy and paste code from ChatGPT, you need to know what that code segment means. We used to be called 'copy-paste masters' > now we're 'tab masters,' but behind natural generation, what exactly is it producing for you? I think it's especially important for juniors to understand what libraries it's importing for you, what magic it's adding...\"\r\n\r\n## Implementation\r\n\r\n### Helpful use cases\r\n\r\n- When you already have an idea and delegate implementation to ChatGPT, e.g., refactoring/converting (when you know how to change something but are too lazy to do it yourself). Examples provided by Caesar:\r\n\r\n1. js, how to convert to await async [provide original code below]\r\n2. (If you're not satisfied with ChatGPT's response, you can try) plz make it readable, and ez understand\r\n\r\n- When you want to understand someone else's code\r\n\r\n- Paste a code style you like and ask it to generate code in that style\r\n\r\n### Unsuitable use cases\r\n\r\nMosky: \"Requirements written by humans that need another human to explore.\" > Bernard adds: \"In other words, requirements need to be clear. Perhaps the PM's job will still need to exist???\"\r\n\r\nCaesar: \"When you're uncertain about the result or when you're already directionless while asking questions. When chatting with ChatGPT and unable to converge on a solution, you won't get the result you want. When your questioning angle is wrong, or you don't know what kind of result you want (no clear definition), if you provide unclear input, ChatGPT is like an opponent—the stronger the opponent, the better it can answer; but the weaker the opponent, it becomes like an idiot, so you'll feel like you're talking to someone who doesn't really understand you.\"\r\n\r\n**Let me add my personal experience so far:**\r\nChatGPT won't necessarily tell you the best solution. You might still be able to use it to solve problems, but the more you know, the better you can guide it to provide better answers, so having a certain level of foundational knowledge is still important!\r\n\r\nBernard: \"There's a framework for product development: frequency vs. accuracy, where AI is more suitable for high-frequency, low-accuracy tasks.\"","src/content/en/software-teams-and-gai-successes-and-failures-in-ai-collaboration.md","9a171acee9b3477c",{html:648,metadata:649},"<p>This article shares notes from the <a href=\"https://gai-2023.alphacamp.co/\">AI Your Summer</a> series event on <a href=\"https://www.accupass.com/event/2305221045441859361432\">June 13, 2023</a>. The content has been personally restructured and does not follow the exact flow of the original presentation. Feel free to discuss and share your thoughts.</p>\n<p>Speaker:</p>\n<ul>\n<li>Mosky（Pinkoi / Architect）</li>\n<li>Caesar (TransIot / Chief Technology Officer)</li>\n</ul>\n<p>Host:</p>\n<ul>\n<li>Bernard（ALPHA Camp / CEO, Founder）</li>\n</ul>\n<h2 id=\"impact\">Impact</h2>\n<h3 id=\"q-how-will-the-ai-era-affect-software-engineers-related-questions-how-will-the-software-engineering-profession-change-in-the-future-will-there-be-fewer-junior-positions-will-companies-eventually-not-need-software-engineers\">Q: How will the AI era affect software engineers? (Related questions: How will the software engineering profession change in the future? Will there be fewer junior positions? Will companies eventually not need software engineers?)</h3>\n<p>Caesar: “Engineers won’t lose their jobs in the short term because AI currently can’t handle abstract concepts. The work we need software engineers for is still based on abstract connections, including the needs of bosses, clients, and imaginative requirements. These are very different connections. Although many underlying tasks are still CRUD operations, when you have abstract connections, current AI can’t process them. AI requires humans to communicate an abstract problem > then it provides a concrete result > which approaches what we want > and then we continue step by step to achieve the desired outcome. So in this process, software engineers are still necessary.”</p>\n<p>Mosky: “I’m not sure how the market will balance the demand for junior and senior engineers. I’ve heard many versions, but I don’t have a definitive answer myself. What I am quite certain about is that your learning path will be very different from ours in the past. It’s not that old methods will be abandoned—I think Google is still very useful—but AI will give you a brand new path that might be more suitable for you. You definitely need to try and use these tools more, but don’t completely trust them (ChatGPT can make things up). Overall, I’m not anxious about it; rather, I’m more optimistic.”</p>\n<h3 id=\"q-has-your-company-set-goals-or-expectations-for-ai-use-in-the-workplace\">Q: Has your company set goals or expectations for AI use in the workplace?</h3>\n<p>Caesar: “We hope that over 50% of work will use AI, possibly with one engineer paired with one AI Assistant. The engineer will be responsible for ideation, architecture, and understanding the entire requirements, while AI will handle any framework and CRUD operations, etc.”</p>\n<p>Mosky: “We ask everyone to explore how much time AI can save them. Based on these metrics, we then evaluate whether everyone should use AI to a certain extent (expanding usage). The company’s current attitude strongly encourages everyone to try. Before the Generative AI conference, we were more conservative, but after the conference, we felt we couldn’t be so cautious anymore. I personally review every AI service on behalf of the company and clearly define what services can be used to what extent. For example, you absolutely cannot send company-related data to ChatGPT because they use everything for training.\r\nIn summary: I use time as a measurement metric, and internally we have clear guidelines so everyone knows what can be used and how.”</p>\n<h3 id=\"q-how-does-the-ai-era-affect-programming-learners-is-there-a-different-skill-tree-that-software-engineers-need-to-develop-can-they-develop-more-horizontally-with-these-tools-what-adjustments-will-be-needed\">Q: How does the AI era affect programming learners? Is there a different skill tree that software engineers need to develop? Can they develop more horizontally with these tools? What adjustments will be needed?</h3>\n<p>Caesar: “For juniors, the necessary path still needs to be followed. Taking frontend engineers as an example, my skills would include JavaScript, HTML, and CSS—you still need to understand these. Even jumping to React/Vue/Angular, whatever you’re interested in or what your company uses, you still need to know how the framework works, including virtual DOM, fiber, or how the entire event handling works, and the lifecycle process. Although ChatGPT will tell you the answers, you need to understand how everything works. Why do you still need to know this? Because when you already know the answer, you know how to ask for answers. If you don’t know the answer, you won’t know where the lifecycle is positioned or where the problem is located, so how can you expect it to produce the right answer? I think this is the challenge juniors face. The harsh future that might occur is that most work, most CRUD operations, most basic coding abilities might already be replaceable by AI. Then one senior with an AI could complete the work of 1 or 1.5 junior developers. So if you’re a junior trying to enter the field, you might need to work hard and continuously learn on your own. The barrier to entry for juniors will increase, and engineers’ development will require thinking from a more macro and abstract perspective.”</p>\n<p>Mosky: “I believe there’s always a starting point, and you need to reach that endpoint. In the past, you had to type on the keyboard yourself; now you can use prompts to accelerate your journey to the endpoint. But one important thing is that you still need to know where your endpoint is. ChatGPT helps you get to that endpoint faster. So for all engineers, one very important thing is that you still need to know where your endpoint is. This skill still needs to be cultivated, and under the premise that humans still need to be responsible for output, someone must know where that endpoint is, whether you’re a senior or junior. So a certain level of hard skills still needs to be developed. I would say ChatGPT doesn’t replace you but accelerates you to the endpoint. For example, the endpoint could be learning a certain skill or completing a company requirement. What ChatGPT can do is provide another path to help you achieve the hard/soft skills you want to acquire. In summary: Know where your endpoint is, develop the necessary hard/soft skills, but during this process, AI can help you achieve what you want to do.”</p>\n<ul>\n<li>\n<p>Bernard asks on behalf of everyone: “I’m a junior, and I don’t know where the endpoint is. I don’t know what I don’t know, so when I don’t know where the endpoint is, how do I find out? What advice would you give to a junior trying to break into the industry?”</p>\n</li>\n<li>\n<p>Mosky: “Junior definition: Getting a job with the title ‘software engineering’ (someone willing to pay you to do this). This point is constantly changing; it’s a range. The standards from ten years ago are different from today’s, and standards vary between companies. Everyone needs to decide for themselves. Look at job descriptions > summarize &#x26; list them > use AI to help you learn what you need > apply for a job where someone is willing to pay you to do software engineering.”</p>\n</li>\n<li>\n<p>Caesar: “AI tools becoming mainstream is already an established fact, so you need to understand how AI tools can help you reach a certain level. At the same time, you must constantly question AI’s output because you don’t know if its answers are correct or not, as you lack experience and are still in the exploration phase. So when you copy and paste code from ChatGPT, you need to know what that code segment means. We used to be called ‘copy-paste masters’ > now we’re ‘tab masters,’ but behind natural generation, what exactly is it producing for you? I think it’s especially important for juniors to understand what libraries it’s importing for you, what magic it’s adding…”</p>\n</li>\n</ul>\n<h2 id=\"implementation\">Implementation</h2>\n<h3 id=\"helpful-use-cases\">Helpful use cases</h3>\n<ul>\n<li>When you already have an idea and delegate implementation to ChatGPT, e.g., refactoring/converting (when you know how to change something but are too lazy to do it yourself). Examples provided by Caesar:</li>\n</ul>\n<ol>\n<li>js, how to convert to await async [provide original code below]</li>\n<li>(If you’re not satisfied with ChatGPT’s response, you can try) plz make it readable, and ez understand</li>\n</ol>\n<ul>\n<li>\n<p>When you want to understand someone else’s code</p>\n</li>\n<li>\n<p>Paste a code style you like and ask it to generate code in that style</p>\n</li>\n</ul>\n<h3 id=\"unsuitable-use-cases\">Unsuitable use cases</h3>\n<p>Mosky: “Requirements written by humans that need another human to explore.” > Bernard adds: “In other words, requirements need to be clear. Perhaps the PM’s job will still need to exist???”</p>\n<p>Caesar: “When you’re uncertain about the result or when you’re already directionless while asking questions. When chatting with ChatGPT and unable to converge on a solution, you won’t get the result you want. When your questioning angle is wrong, or you don’t know what kind of result you want (no clear definition), if you provide unclear input, ChatGPT is like an opponent—the stronger the opponent, the better it can answer; but the weaker the opponent, it becomes like an idiot, so you’ll feel like you’re talking to someone who doesn’t really understand you.”</p>\n<p><strong>Let me add my personal experience so far:</strong>\r\nChatGPT won’t necessarily tell you the best solution. You might still be able to use it to solve problems, but the more you know, the better you can guide it to provide better answers, so having a certain level of foundational knowledge is still important!</p>\n<p>Bernard: “There’s a framework for product development: frequency vs. accuracy, where AI is more suitable for high-frequency, low-accuracy tasks.”</p>",{headings:650,localImagePaths:672,remoteImagePaths:673,frontmatter:674,imagePaths:678},[651,654,657,660,663,666,669],{depth:32,slug:652,text:653},"impact","Impact",{depth:62,slug:655,text:656},"q-how-will-the-ai-era-affect-software-engineers-related-questions-how-will-the-software-engineering-profession-change-in-the-future-will-there-be-fewer-junior-positions-will-companies-eventually-not-need-software-engineers","Q: How will the AI era affect software engineers? (Related questions: How will the software engineering profession change in the future? Will there be fewer junior positions? Will companies eventually not need software engineers?)",{depth:62,slug:658,text:659},"q-has-your-company-set-goals-or-expectations-for-ai-use-in-the-workplace","Q: Has your company set goals or expectations for AI use in the workplace?",{depth:62,slug:661,text:662},"q-how-does-the-ai-era-affect-programming-learners-is-there-a-different-skill-tree-that-software-engineers-need-to-develop-can-they-develop-more-horizontally-with-these-tools-what-adjustments-will-be-needed","Q: How does the AI era affect programming learners? Is there a different skill tree that software engineers need to develop? Can they develop more horizontally with these tools? What adjustments will be needed?",{depth:32,slug:664,text:665},"implementation","Implementation",{depth:62,slug:667,text:668},"helpful-use-cases","Helpful use cases",{depth:62,slug:670,text:671},"unsuitable-use-cases","Unsuitable use cases",[],[],{title:637,subtitle:638,author:16,imageWebp:639,imagePng:640,imgAlt:637,creationDate:675,updateDate:676,tags:677,featured:136},["Date","2023-07-17T00:00:00.000Z"],["Date","2023-07-17T00:00:00.000Z"],[425],[],"software-teams-and-gai-successes-and-failures-in-ai-collaboration.md","this-in-javascript",{id:680,data:682,body:690,filePath:691,digest:692,rendered:693,legacyId:705},{title:683,subtitle:684,author:16,imageWebp:685,imagePng:686,imgAlt:683,creationDate:687,updateDate:688,tags:689,featured:23},"This in JavaScript","In JavaScript, the value of 'this' is dynamic and typically determined by how a function is called. Therefore, what affects the value of 'this' is not when it's declared, but where it's invoked.","/images/articles/webp/this-in-javascript.webp","/images/articles/png/this-in-javascript.png",["Date","2024-10-15T00:00:00.000Z"],["Date","2024-10-15T00:00:00.000Z"],[22],"In JavaScript, the value of `this` is dynamic and typically determined by how a function is called. Therefore, what affects the value of `this` is not when it's declared, but where it's invoked.\n\nThere are 5 ways to determine the value of `this`:\n\n1. In a regular function call, `this` refers to the global object. In non-strict mode in browsers, this defaults to the `Window` object; in strict mode, `this` is `undefined`.\n\n2. When a function is called as a method of an object, `this` refers to that object.\n\n3. When a function is called with the `new` keyword, a new object is created before the function executes, and `this` refers to this newly created object.\n\n4. We can also use the `apply`, `call`, and `bind` methods to explicitly specify which object `this` should refer to.\n\n5. Arrow functions, introduced in ES6, don't have their own `this` value. Instead, they inherit `this` from the nearest outer function. If that outer function is also an arrow function, it will continue looking up until it finds the default `this` value in the global environment (e.g., `window` in browsers).\n\n## Reference\n\n[Explaining the value of 'this' in JavaScript | ExplainThis](https://www.explainthis.io/zh-hant/swe/what-is-this)","src/content/en/this-in-javascript.md","6db49ebe7e5112a8",{html:694,metadata:695},"<p>In JavaScript, the value of <code>this</code> is dynamic and typically determined by how a function is called. Therefore, what affects the value of <code>this</code> is not when it’s declared, but where it’s invoked.</p>\n<p>There are 5 ways to determine the value of <code>this</code>:</p>\n<ol>\n<li>\n<p>In a regular function call, <code>this</code> refers to the global object. In non-strict mode in browsers, this defaults to the <code>Window</code> object; in strict mode, <code>this</code> is <code>undefined</code>.</p>\n</li>\n<li>\n<p>When a function is called as a method of an object, <code>this</code> refers to that object.</p>\n</li>\n<li>\n<p>When a function is called with the <code>new</code> keyword, a new object is created before the function executes, and <code>this</code> refers to this newly created object.</p>\n</li>\n<li>\n<p>We can also use the <code>apply</code>, <code>call</code>, and <code>bind</code> methods to explicitly specify which object <code>this</code> should refer to.</p>\n</li>\n<li>\n<p>Arrow functions, introduced in ES6, don’t have their own <code>this</code> value. Instead, they inherit <code>this</code> from the nearest outer function. If that outer function is also an arrow function, it will continue looking up until it finds the default <code>this</code> value in the global environment (e.g., <code>window</code> in browsers).</p>\n</li>\n</ol>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-this\">Explaining the value of ‘this’ in JavaScript | ExplainThis</a></p>",{headings:696,localImagePaths:698,remoteImagePaths:699,frontmatter:700,imagePaths:704},[697],{depth:32,slug:33,text:34},[],[],{title:683,subtitle:684,author:16,imageWebp:685,imagePng:686,imgAlt:683,creationDate:701,updateDate:702,tags:703,featured:23},["Date","2024-10-15T00:00:00.000Z"],["Date","2024-10-15T00:00:00.000Z"],[22],[],"this-in-javascript.md","the-differences-between-null-undefined-and-undeclared-in-javascript",{id:706,data:708,body:716,filePath:717,digest:718,rendered:719,legacyId:731},{title:709,subtitle:710,author:16,imageWebp:711,imagePng:712,imgAlt:709,creationDate:713,updateDate:714,tags:715,featured:23},"The Differences Between null, undefined and undeclared in JavaScript","null can be understood as nothing; undefined can be understood as not yet; undeclared refers to never having been declared.","/images/articles/webp/the-differences-between-null-undefined-and-undeclared-in-javascript.webp","/images/articles/png/the-differences-between-null-undefined-and-undeclared-in-javascript.png",["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],"null can be understood as \"nothing,\" representing an empty value for a variable.\n\nundefined can be understood as \"not yet,\" indicating that a value has not been defined. So if you declare a variable but haven't assigned a value to it, you'll get undefined.\n\nundeclared refers to something that has never been declared. When you try to use a variable that hasn't been declared, you'll get a ReferenceError, which indicates an undeclared state.\n\n## Reference\n\n[JavaScript null, undefined and undeclared differences | ExplainThis](https://www.explainthis.io/zh-hant/swe/js-undefined-null-undeclared)","src/content/en/the-differences-between-null-undefined-and-undeclared-in-javascript.md","03040b9399e7d7a2",{html:720,metadata:721},"<p>null can be understood as “nothing,” representing an empty value for a variable.</p>\n<p>undefined can be understood as “not yet,” indicating that a value has not been defined. So if you declare a variable but haven’t assigned a value to it, you’ll get undefined.</p>\n<p>undeclared refers to something that has never been declared. When you try to use a variable that hasn’t been declared, you’ll get a ReferenceError, which indicates an undeclared state.</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-undefined-null-undeclared\">JavaScript null, undefined and undeclared differences | ExplainThis</a></p>",{headings:722,localImagePaths:724,remoteImagePaths:725,frontmatter:726,imagePaths:730},[723],{depth:32,slug:33,text:34},[],[],{title:709,subtitle:710,author:16,imageWebp:711,imagePng:712,imgAlt:709,creationDate:727,updateDate:728,tags:729,featured:23},["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],[],"the-differences-between-null-undefined-and-undeclared-in-javascript.md","understanding-javascript-closures",{id:732,data:734,body:742,filePath:743,digest:744,rendered:745,legacyId:775},{title:735,subtitle:736,author:16,imageWebp:737,imagePng:738,imgAlt:735,creationDate:739,updateDate:740,tags:741,featured:23},"Understanding JavaScript Closures","A closure is when an inner function can access variables from an outer function and remembers these variables.","/images/articles/webp/understanding-javascript-closures.webp","/images/articles/png/understanding-javascript-closures.png",["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],"## What is a Closure?\n\nA closure is when an inner function can access variables from an outer function and remembers these variables.\n\n## Applications of Closures\n\n### State Preservation\n\nWhen programming, we often need to remember certain states. The React library provides a useState hook that allows developers to manage state.\n\nSimplified implementation example of useState:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n### Caching Mechanism\n\nSince closures allow inner functions to remember external variables, we can use this characteristic to implement caching mechanisms.\n\nImplementing a caching mechanism:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n### Simulating Private Variables\n\nMany programming languages have syntax for declaring private methods. These private variables are hidden from the outside, which is an important feature because sometimes we don't want external code to access the internal details of our implementation. JavaScript doesn't natively support private variables, but we can achieve similar functionality through closures.\n\nExample implementation of simulated private variables:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Drawback of Closures: Memory Leaks\n\nAlthough closures are useful, they cause inner functions to remember external variables. When closures maintain references to variables that are no longer needed, these variables cannot be released by the garbage collection mechanism. This causes variables to remain in memory, and excessive use may lead to memory leaks, so they should be used with caution.\n\nThe garbage collection mechanism mentioned above is provided by JavaScript to help developers manage memory without having to manually release it. In JavaScript, the garbage collection algorithm is called Mark-and-sweep. It starts from the root (i.e., global objects), finds all objects referenced from the root, then finds all objects referenced by those objects, and so on. If an object cannot be reached through this algorithm, it will be garbage collected. Whether an object is still reachable from the root is key to determining whether it will be garbage collected. Memory leaks occur when you no longer use an object, but it is still reachable. Specifically, when you no longer need something, but references to it still exist, so it won't be garbage collected, leading to memory leaks.\n\n## Reference\n\n[什麼是閉包 (Closure)？｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/what-is-closure)","src/content/en/understanding-javascript-closures.md","b721b36cea58780d",{html:746,metadata:747},"<h2 id=\"what-is-a-closure\">What is a Closure?</h2>\n<p>A closure is when an inner function can access variables from an outer function and remembers these variables.</p>\n<h2 id=\"applications-of-closures\">Applications of Closures</h2>\n<h3 id=\"state-preservation\">State Preservation</h3>\n<p>When programming, we often need to remember certain states. The React library provides a useState hook that allows developers to manage state.</p>\n<p>Simplified implementation example of useState:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"caching-mechanism\">Caching Mechanism</h3>\n<p>Since closures allow inner functions to remember external variables, we can use this characteristic to implement caching mechanisms.</p>\n<p>Implementing a caching mechanism:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"simulating-private-variables\">Simulating Private Variables</h3>\n<p>Many programming languages have syntax for declaring private methods. These private variables are hidden from the outside, which is an important feature because sometimes we don’t want external code to access the internal details of our implementation. JavaScript doesn’t natively support private variables, but we can achieve similar functionality through closures.</p>\n<p>Example implementation of simulated private variables:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"drawback-of-closures-memory-leaks\">Drawback of Closures: Memory Leaks</h2>\n<p>Although closures are useful, they cause inner functions to remember external variables. When closures maintain references to variables that are no longer needed, these variables cannot be released by the garbage collection mechanism. This causes variables to remain in memory, and excessive use may lead to memory leaks, so they should be used with caution.</p>\n<p>The garbage collection mechanism mentioned above is provided by JavaScript to help developers manage memory without having to manually release it. In JavaScript, the garbage collection algorithm is called Mark-and-sweep. It starts from the root (i.e., global objects), finds all objects referenced from the root, then finds all objects referenced by those objects, and so on. If an object cannot be reached through this algorithm, it will be garbage collected. Whether an object is still reachable from the root is key to determining whether it will be garbage collected. Memory leaks occur when you no longer use an object, but it is still reachable. Specifically, when you no longer need something, but references to it still exist, so it won’t be garbage collected, leading to memory leaks.</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-closure\">什麼是閉包 (Closure)？｜ ExplainThis</a></p>",{headings:748,localImagePaths:768,remoteImagePaths:769,frontmatter:770,imagePaths:774},[749,752,755,758,761,764,767],{depth:32,slug:750,text:751},"what-is-a-closure","What is a Closure?",{depth:32,slug:753,text:754},"applications-of-closures","Applications of Closures",{depth:62,slug:756,text:757},"state-preservation","State Preservation",{depth:62,slug:759,text:760},"caching-mechanism","Caching Mechanism",{depth:62,slug:762,text:763},"simulating-private-variables","Simulating Private Variables",{depth:32,slug:765,text:766},"drawback-of-closures-memory-leaks","Drawback of Closures: Memory Leaks",{depth:32,slug:33,text:34},[],[],{title:735,subtitle:736,author:16,imageWebp:737,imagePng:738,imgAlt:735,creationDate:771,updateDate:772,tags:773,featured:23},["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],[],"understanding-javascript-closures.md","understanding-javascript-hoisting",{id:776,data:778,body:786,filePath:787,digest:788,rendered:789,legacyId:801},{title:779,subtitle:780,author:16,imageWebp:781,imagePng:782,imgAlt:779,creationDate:783,updateDate:784,tags:785,featured:23},"Understanding JavaScript Hoisting","Hoisting is a concept that describes how JavaScript stores variable and function declarations in memory during the compilation phase.","/images/articles/webp/understanding-javascript-hoisting.webp","/images/articles/png/understanding-javascript-hoisting.png",["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],"Hoisting is a concept used to describe how JavaScript stores variable and function declarations in memory during the compilation phase. For variables declared with `var`, hoisting means that during compilation, the JavaScript engine moves all `var` variable declarations to the top of their function scope. However, while the variable declarations are hoisted, they are not assigned values, so if you call such a variable early, you'll get `undefined`. As for `let/const`, if we use them before declaration, we'll get a `ReferenceError`, which might lead people to think that `let/const` don't hoist. In fact, `let/const` do exhibit hoisting behavior, but there are two key differences from `var` hoisting:\n\n- `var` is hoisted to function scope, but `let/const` are only hoisted to block scope.\n\n- When creating variables and defining their scope, `var` automatically initializes the variable value to `undefined`. However, when `let/const` hoist variables to block scope, they don't initialize these variables. This state can be called \"uninitialized,\" and there's another common term for it: the variable exists in a Temporal Dead Zone (TDZ). The TDZ error was primarily designed for `const`, because if `const` hoisting behavior were the same as `var`, when we use a variable declared with `const` before its declaration, we would get `undefined`. But since `const` is a constant, by definition its value should not change within the same scope. Therefore, a design that first gives `undefined` and then a different value would not comply with the specification, which is why the TDZ error was designed to prevent this situation.\n\nNext, function declarations are also hoisted. The difference from `var` hoisting is that function hoisting also creates the function object, so you can call it before its declaration.\n\nHowever, it's important to note that if it's a function expression, the hoisting behavior will be the same as the variable it's declared with. So if a function `foo` is declared with `var`, when used before declaration, its value at that time will be `undefined`, and calling `undefined` will result in an error:\n\n<!-- ```js\nfoo(); // Uncaught TypeError: foo is not a function\nvar foo = function () {};\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\nFor a function `foo` declared with `let`, when used before declaration, `foo` is in the temporal dead zone, so calling `foo` will result in an error:\n\n<!-- ```js\nfoo(); // Uncaught ReferenceError: foo is not defined\nlet foo = function () {};\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[What is Hoisting? | ExplainThis](https://www.explainthis.io/zh-hant/swe/hoisting)","src/content/en/understanding-javascript-hoisting.md","2857ed5467077abb",{html:790,metadata:791},"<p>Hoisting is a concept used to describe how JavaScript stores variable and function declarations in memory during the compilation phase. For variables declared with <code>var</code>, hoisting means that during compilation, the JavaScript engine moves all <code>var</code> variable declarations to the top of their function scope. However, while the variable declarations are hoisted, they are not assigned values, so if you call such a variable early, you’ll get <code>undefined</code>. As for <code>let/const</code>, if we use them before declaration, we’ll get a <code>ReferenceError</code>, which might lead people to think that <code>let/const</code> don’t hoist. In fact, <code>let/const</code> do exhibit hoisting behavior, but there are two key differences from <code>var</code> hoisting:</p>\n<ul>\n<li>\n<p><code>var</code> is hoisted to function scope, but <code>let/const</code> are only hoisted to block scope.</p>\n</li>\n<li>\n<p>When creating variables and defining their scope, <code>var</code> automatically initializes the variable value to <code>undefined</code>. However, when <code>let/const</code> hoist variables to block scope, they don’t initialize these variables. This state can be called “uninitialized,” and there’s another common term for it: the variable exists in a Temporal Dead Zone (TDZ). The TDZ error was primarily designed for <code>const</code>, because if <code>const</code> hoisting behavior were the same as <code>var</code>, when we use a variable declared with <code>const</code> before its declaration, we would get <code>undefined</code>. But since <code>const</code> is a constant, by definition its value should not change within the same scope. Therefore, a design that first gives <code>undefined</code> and then a different value would not comply with the specification, which is why the TDZ error was designed to prevent this situation.</p>\n</li>\n</ul>\n<p>Next, function declarations are also hoisted. The difference from <code>var</code> hoisting is that function hoisting also creates the function object, so you can call it before its declaration.</p>\n<p>However, it’s important to note that if it’s a function expression, the hoisting behavior will be the same as the variable it’s declared with. So if a function <code>foo</code> is declared with <code>var</code>, when used before declaration, its value at that time will be <code>undefined</code>, and calling <code>undefined</code> will result in an error:</p>\n<!-- ```js\nfoo(); // Uncaught TypeError: foo is not a function\nvar foo = function () {};\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>For a function <code>foo</code> declared with <code>let</code>, when used before declaration, <code>foo</code> is in the temporal dead zone, so calling <code>foo</code> will result in an error:</p>\n<!-- ```js\nfoo(); // Uncaught ReferenceError: foo is not defined\nlet foo = function () {};\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/hoisting\">What is Hoisting? | ExplainThis</a></p>",{headings:792,localImagePaths:794,remoteImagePaths:795,frontmatter:796,imagePaths:800},[793],{depth:32,slug:33,text:34},[],[],{title:779,subtitle:780,author:16,imageWebp:781,imagePng:782,imgAlt:779,creationDate:797,updateDate:798,tags:799,featured:23},["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],[],"understanding-javascript-hoisting.md","understanding-javascript-prototype",{id:802,data:804,body:812,filePath:813,digest:814,rendered:815,legacyId:842},{title:805,subtitle:806,author:16,imageWebp:807,imagePng:808,imgAlt:805,creationDate:809,updateDate:810,tags:811,featured:23},"Understanding JavaScript Prototype","In JavaScript, prototype is a crucial concept in object-oriented programming, serving as the key to implementing inheritance and property sharing.","/images/articles/webp/understanding-javascript-prototype.webp","/images/articles/png/understanding-javascript-prototype.png",["Date","2024-10-16T00:00:00.000Z"],["Date","2024-10-16T00:00:00.000Z"],[22],"## Prototype\n\nJavaScript is an object-oriented programming language based on \"prototypes.\" In JavaScript, every object contains an internal hidden property called `[[Prototype]]`, which corresponds to the object's prototype. This value can be either null or a reference to another object.\n\n## `[[Prototype]]` and `__proto__`\n\nIn JavaScript, every object contains an internal hidden property called `[[Prototype]]`, which corresponds to the object's prototype. This value can be either null or a reference to another object.\n\nSince `[[Prototype]]` is an internal hidden property that cannot be directly accessed, browsers provide the `__proto__` accessor method. However, it's important to note that the `__proto__` method is not part of the ECMAScript specification. In actual development, to obtain an object's prototype, we use `Object.getPrototypeOf`.\n\nImplementation examples of `prototype`, `__proto__`, and `Object.getPrototypeOf` method:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## `__proto__` Property and `prototype` Property\n\n`__proto__` and `prototype` are different properties. `__proto__` is a hidden property of every object, through which each object can access its prototype. On the other hand, `prototype` is a property that exists in all constructor functions. A constructor function's `prototype` actually points to the same place as `__proto__`, which is called the prototype object.\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Prototype Chain\n\nA prototype itself is an object, so it also has its own prototype. When we try to access a property of an object, if the object doesn't have the required property, it will look for it in its prototype. If the property is still not found in the prototype, it will continue to search up the chain until it finds the property or reaches null. This continuous path is called the prototype chain, and the end of the chain is null.\n\n- The end value of the prototype chain is null:\n\n  <picture>\n    <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-3.webp\" type=\"image/webp\">\n    <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n  </picture>\n\n- Implementation example of the prototype chain:\n\n  We frequently use the filter method of arrays. Suppose we have an array \"list\" and we use the filter method on this array. In fact, the filter method doesn't exist on the list itself; it exists on the Array constructor function. We can use the filter method today through the prototype chain.\n\n## Prototypal Inheritance\n\nPrototypal inheritance allows objects that don't have certain properties to access properties of other objects. So, suppose we have an object \"animal\" that has its own properties and methods. At the same time, we want to create two objects based on \"animal,\" namely \"cat\" and \"dog.\" These two objects will have some unique methods and properties, but they also need to use the methods and properties of the \"animal\" object. In such a scenario, we don't need to copy or reimplement; we can achieve this through prototypal inheritance.\n\nImplementation example of prototypal inheritance:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[Prototype, Prototype Chain, Prototypal Inheritance ｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/most-common-js-prototype-questions)","src/content/en/understanding-javascript-prototype.md","7b3a9ca9a95531b0",{html:816,metadata:817},"<h2 id=\"prototype\">Prototype</h2>\n<p>JavaScript is an object-oriented programming language based on “prototypes.” In JavaScript, every object contains an internal hidden property called <code>[[Prototype]]</code>, which corresponds to the object’s prototype. This value can be either null or a reference to another object.</p>\n<h2 id=\"prototype-and-__proto__\"><code>[[Prototype]]</code> and <code>__proto__</code></h2>\n<p>In JavaScript, every object contains an internal hidden property called <code>[[Prototype]]</code>, which corresponds to the object’s prototype. This value can be either null or a reference to another object.</p>\n<p>Since <code>[[Prototype]]</code> is an internal hidden property that cannot be directly accessed, browsers provide the <code>__proto__</code> accessor method. However, it’s important to note that the <code>__proto__</code> method is not part of the ECMAScript specification. In actual development, to obtain an object’s prototype, we use <code>Object.getPrototypeOf</code>.</p>\n<p>Implementation examples of <code>prototype</code>, <code>__proto__</code>, and <code>Object.getPrototypeOf</code> method:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"__proto__-property-and-prototype-property\"><code>__proto__</code> Property and <code>prototype</code> Property</h2>\n<p><code>__proto__</code> and <code>prototype</code> are different properties. <code>__proto__</code> is a hidden property of every object, through which each object can access its prototype. On the other hand, <code>prototype</code> is a property that exists in all constructor functions. A constructor function’s <code>prototype</code> actually points to the same place as <code>__proto__</code>, which is called the prototype object.</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"prototype-chain\">Prototype Chain</h2>\n<p>A prototype itself is an object, so it also has its own prototype. When we try to access a property of an object, if the object doesn’t have the required property, it will look for it in its prototype. If the property is still not found in the prototype, it will continue to search up the chain until it finds the property or reaches null. This continuous path is called the prototype chain, and the end of the chain is null.</p>\n<ul>\n<li>\n<p>The end value of the prototype chain is null:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>Implementation example of the prototype chain:</p>\n<p>We frequently use the filter method of arrays. Suppose we have an array “list” and we use the filter method on this array. In fact, the filter method doesn’t exist on the list itself; it exists on the Array constructor function. We can use the filter method today through the prototype chain.</p>\n</li>\n</ul>\n<h2 id=\"prototypal-inheritance\">Prototypal Inheritance</h2>\n<p>Prototypal inheritance allows objects that don’t have certain properties to access properties of other objects. So, suppose we have an object “animal” that has its own properties and methods. At the same time, we want to create two objects based on “animal,” namely “cat” and “dog.” These two objects will have some unique methods and properties, but they also need to use the methods and properties of the “animal” object. In such a scenario, we don’t need to copy or reimplement; we can achieve this through prototypal inheritance.</p>\n<p>Implementation example of prototypal inheritance:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/most-common-js-prototype-questions\">Prototype, Prototype Chain, Prototypal Inheritance ｜ ExplainThis</a></p>",{headings:818,localImagePaths:835,remoteImagePaths:836,frontmatter:837,imagePaths:841},[819,822,825,828,831,834],{depth:32,slug:820,text:821},"prototype","Prototype",{depth:32,slug:823,text:824},"prototype-and-__proto__","[[Prototype]] and __proto__",{depth:32,slug:826,text:827},"__proto__-property-and-prototype-property","__proto__ Property and prototype Property",{depth:32,slug:829,text:830},"prototype-chain","Prototype Chain",{depth:32,slug:832,text:833},"prototypal-inheritance","Prototypal Inheritance",{depth:32,slug:33,text:34},[],[],{title:805,subtitle:806,author:16,imageWebp:807,imagePng:808,imgAlt:805,creationDate:838,updateDate:839,tags:840,featured:23},["Date","2024-10-16T00:00:00.000Z"],["Date","2024-10-16T00:00:00.000Z"],[22],[],"understanding-javascript-prototype.md","understanding-map-weakmap-set-and-weakset-in-javascript",{id:843,data:845,body:853,filePath:854,digest:855,rendered:856,legacyId:900},{title:846,subtitle:847,author:16,imageWebp:848,imagePng:849,imgAlt:846,creationDate:850,updateDate:851,tags:852,featured:23},"Understanding Map, WeakMap, Set, and WeakSet in JavaScript","Map/WeakMap are data structures similar to Objects; Set/WeakSet data structures are similar to arrays.","/images/articles/webp/understanding-map-weakmap-set-and-weakset-in-javascript.webp","/images/articles/png/understanding-map-weakmap-set-and-weakset-in-javascript.png",["Date","2024-11-17T00:00:00.000Z"],["Date","2024-11-17T00:00:00.000Z"],[22],"## TL;DR\n\n### Map vs. WeakMap\n\nMap is a data structure similar to Object, both store data in key-value pair format; WeakMap is similar to Map in usage, but has two main differences: it only allows Objects as keys and the objects referenced by keys can be garbage collected.\n\n### Set vs. WeakSet\n\nSet is a data structure similar to an array, but all elements inside are unique with no duplicates; WeakSet is similar to Set in usage, but has two main differences: elements can only be Objects and elements can be garbage collected.\n\n## Map\n\n### Introduction\n\nMap is a data structure similar to Object, both store data in key-value pair format. In JavaScript, Map itself is a constructor function used to generate the Map data structure, specifically by using `new Map()` to create instances.\n\n### Common Operations\n\n- get(key): Query a specific element through its key and return the value\n\n- set(key, value): Add elements to a Map\n\n- delete(key): Remove a specific element from the Map through its key\n\n- has(key): Determine if a certain key exists in the Map\n\n- size property: Get the number of elements\n\n### Common Iteration Methods (iteration order will be the order in which elements were placed in the Map)\n\n- values(): Returns all element values in the Map\n\n- keys(): Returns all element keys in the Map\n\n- entries(): Returns all elements in the Map in the form of [key, value] pairs\n\n## WeakMap\n\nSimilar to Map in usage, but with two main differences:\n\n- WeakMap only allows Objects as keys, with the exception of `null`.\n\n- Keys in WeakMap are \"weak references,\" meaning the objects referenced by keys can be garbage collected, at which point the keys become invalid.\n\n## Set\n\n### Introduction\n\nSet is a data structure similar to an array, but all elements inside are unique with no duplicates. In JavaScript, Set itself is a constructor function used to generate the Set data structure, specifically by using `new Set()` to create instances.\n\n### Common Operations\n\n- add(value): Used to add values\n\n- delete(value): Used to delete values from the Set\n\n- has(value): Determine if a certain value exists in the Set\n\n- size property: Get the number of elements\n\n## WeakSet\n\nSimilar to Set in usage, but with two main differences:\n\n- Elements in WeakSet can only be Objects (Set can accept values of various data types).\n\n- Elements in WeakSet are \"weak references,\" meaning they can be reclaimed by the garbage collection mechanism.\n\n## Reference\n\n[Please explain the differences between Set, Map, WeakSet, and WeakMap? | ExplainThis](https://www.explainthis.io/zh-hant/swe/set-map-weakset-weakmap)","src/content/en/understanding-map-weakmap-set-and-weakset-in-javascript.md","4a43f4ce9542272f",{html:857,metadata:858},"<h2 id=\"tldr\">TL;DR</h2>\n<h3 id=\"map-vs-weakmap\">Map vs. WeakMap</h3>\n<p>Map is a data structure similar to Object, both store data in key-value pair format; WeakMap is similar to Map in usage, but has two main differences: it only allows Objects as keys and the objects referenced by keys can be garbage collected.</p>\n<h3 id=\"set-vs-weakset\">Set vs. WeakSet</h3>\n<p>Set is a data structure similar to an array, but all elements inside are unique with no duplicates; WeakSet is similar to Set in usage, but has two main differences: elements can only be Objects and elements can be garbage collected.</p>\n<h2 id=\"map\">Map</h2>\n<h3 id=\"introduction\">Introduction</h3>\n<p>Map is a data structure similar to Object, both store data in key-value pair format. In JavaScript, Map itself is a constructor function used to generate the Map data structure, specifically by using <code>new Map()</code> to create instances.</p>\n<h3 id=\"common-operations\">Common Operations</h3>\n<ul>\n<li>\n<p>get(key): Query a specific element through its key and return the value</p>\n</li>\n<li>\n<p>set(key, value): Add elements to a Map</p>\n</li>\n<li>\n<p>delete(key): Remove a specific element from the Map through its key</p>\n</li>\n<li>\n<p>has(key): Determine if a certain key exists in the Map</p>\n</li>\n<li>\n<p>size property: Get the number of elements</p>\n</li>\n</ul>\n<h3 id=\"common-iteration-methods-iteration-order-will-be-the-order-in-which-elements-were-placed-in-the-map\">Common Iteration Methods (iteration order will be the order in which elements were placed in the Map)</h3>\n<ul>\n<li>\n<p>values(): Returns all element values in the Map</p>\n</li>\n<li>\n<p>keys(): Returns all element keys in the Map</p>\n</li>\n<li>\n<p>entries(): Returns all elements in the Map in the form of [key, value] pairs</p>\n</li>\n</ul>\n<h2 id=\"weakmap\">WeakMap</h2>\n<p>Similar to Map in usage, but with two main differences:</p>\n<ul>\n<li>\n<p>WeakMap only allows Objects as keys, with the exception of <code>null</code>.</p>\n</li>\n<li>\n<p>Keys in WeakMap are “weak references,” meaning the objects referenced by keys can be garbage collected, at which point the keys become invalid.</p>\n</li>\n</ul>\n<h2 id=\"set\">Set</h2>\n<h3 id=\"introduction-1\">Introduction</h3>\n<p>Set is a data structure similar to an array, but all elements inside are unique with no duplicates. In JavaScript, Set itself is a constructor function used to generate the Set data structure, specifically by using <code>new Set()</code> to create instances.</p>\n<h3 id=\"common-operations-1\">Common Operations</h3>\n<ul>\n<li>\n<p>add(value): Used to add values</p>\n</li>\n<li>\n<p>delete(value): Used to delete values from the Set</p>\n</li>\n<li>\n<p>has(value): Determine if a certain value exists in the Set</p>\n</li>\n<li>\n<p>size property: Get the number of elements</p>\n</li>\n</ul>\n<h2 id=\"weakset\">WeakSet</h2>\n<p>Similar to Set in usage, but with two main differences:</p>\n<ul>\n<li>\n<p>Elements in WeakSet can only be Objects (Set can accept values of various data types).</p>\n</li>\n<li>\n<p>Elements in WeakSet are “weak references,” meaning they can be reclaimed by the garbage collection mechanism.</p>\n</li>\n</ul>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/set-map-weakset-weakmap\">Please explain the differences between Set, Map, WeakSet, and WeakMap? | ExplainThis</a></p>",{headings:859,localImagePaths:893,remoteImagePaths:894,frontmatter:895,imagePaths:899},[860,863,866,869,872,873,876,879,882,885,887,889,892],{depth:32,slug:861,text:862},"tldr","TL;DR",{depth:62,slug:864,text:865},"map-vs-weakmap","Map vs. WeakMap",{depth:62,slug:867,text:868},"set-vs-weakset","Set vs. WeakSet",{depth:32,slug:870,text:871},"map","Map",{depth:62,slug:435,text:436},{depth:62,slug:874,text:875},"common-operations","Common Operations",{depth:62,slug:877,text:878},"common-iteration-methods-iteration-order-will-be-the-order-in-which-elements-were-placed-in-the-map","Common Iteration Methods (iteration order will be the order in which elements were placed in the Map)",{depth:32,slug:880,text:881},"weakmap","WeakMap",{depth:32,slug:883,text:884},"set","Set",{depth:62,slug:886,text:436},"introduction-1",{depth:62,slug:888,text:875},"common-operations-1",{depth:32,slug:890,text:891},"weakset","WeakSet",{depth:32,slug:33,text:34},[],[],{title:846,subtitle:847,author:16,imageWebp:848,imagePng:849,imgAlt:846,creationDate:896,updateDate:897,tags:898,featured:23},["Date","2024-11-17T00:00:00.000Z"],["Date","2024-11-17T00:00:00.000Z"],[22],[],"understanding-map-weakmap-set-and-weakset-in-javascript.md","understanding-var-let-and-const-in-javascript",{id:901,data:903,body:911,filePath:912,digest:913,rendered:914,legacyId:938},{title:904,subtitle:905,author:16,imageWebp:906,imagePng:907,imgAlt:904,creationDate:908,updateDate:909,tags:910,featured:23},"Understanding var, let and const in JavaScript","var, let, and const are reserved keywords used for variable declaration in JavaScript. Initially, only var was available until ES6 introduced let and const.","/images/articles/webp/understanding-var-let-and-const-in-javascript.webp","/images/articles/png/understanding-var-let-and-const-in-javascript.png",["Date","2024-10-20T00:00:00.000Z"],["Date","2024-10-20T00:00:00.000Z"],[22],"var, let, and const are reserved keywords used for variable declaration in JavaScript. Initially, only var was available until ES6 introduced let and const.\n\nWhen comparing var with let/const, there are three main differences:\n\n## 1. In terms of scope, var can be global or function-scoped, while let and const are block-scoped.\n\nIn terms of scope, var can be global or function-scoped, while let and const are block-scoped. When we use var to declare a variable at the outermost level of a file, its scope becomes global. Therefore, when we enter in the console:\n\n`var greeting = \"hello\";`\n\nWe can then enter:\n\n`window.greeting;` // \"hello\"\n\nThe result will be \"hello\", but using let or const won't have the same effect. Besides global scope, var's scope within a function is limited to that function.\n\n## 2. In terms of declaration, var can be redeclared, but let and const cannot.\n\nIn terms of declaration, var can be redeclared, but let and const cannot. So when using var, you can do the following:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\nlet cannot be redeclared, but it can be reassigned, so it works like this:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## 3. In terms of hoisting, variables declared with var are automatically initialized with undefined, so using the variable before its declaration won't cause an error but will return undefined; however, variables declared with let and const are not automatically initialized and enter a Temporal Dead Zone (TDZ), so using them before declaration will result in an error.\n\nIn terms of hoisting, variables declared with var are automatically initialized, so using the variable before its declaration won't cause an error but will return undefined, like this:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\nBut let and const don't behave this way. Instead, they enter a Temporal Dead Zone (TDZ), so using them before declaration will result in an error:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## When comparing let and const, the main difference is that variables declared with let can be reassigned, while those declared with const cannot.\n\nlet and const are similar in most aspects, but their main difference is that variables declared with let can be reassigned, while those declared with const cannot.\n\nIt's important to note that this difference is about \"reassignment,\" not about changing a variable's value. If the variable is a primitive value (like strings or numbers), neither let nor const can change it after declaration. However, if the variable is an object, both let and const allow changes to the object's properties after declaration.\n\nSo the following example is valid:\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\nAs for when to use let versus const, there's no standard answer. The current industry perspective generally favors using const in most cases and only using let when reassignment is necessary.\n\n## Reference\n\n[What's the difference between var, let, and const in JavaScript? When should you use which one? | ExplainThis](https://www.explainthis.io/zh-hant/swe/js-var-let-const-in-javascript)","src/content/en/understanding-var-let-and-const-in-javascript.md","6914eb8197b59a80",{html:915,metadata:916},"<p>var, let, and const are reserved keywords used for variable declaration in JavaScript. Initially, only var was available until ES6 introduced let and const.</p>\n<p>When comparing var with let/const, there are three main differences:</p>\n<h2 id=\"1-in-terms-of-scope-var-can-be-global-or-function-scoped-while-let-and-const-are-block-scoped\">1. In terms of scope, var can be global or function-scoped, while let and const are block-scoped.</h2>\n<p>In terms of scope, var can be global or function-scoped, while let and const are block-scoped. When we use var to declare a variable at the outermost level of a file, its scope becomes global. Therefore, when we enter in the console:</p>\n<p><code>var greeting = \"hello\";</code></p>\n<p>We can then enter:</p>\n<p><code>window.greeting;</code> // “hello”</p>\n<p>The result will be “hello”, but using let or const won’t have the same effect. Besides global scope, var’s scope within a function is limited to that function.</p>\n<h2 id=\"2-in-terms-of-declaration-var-can-be-redeclared-but-let-and-const-cannot\">2. In terms of declaration, var can be redeclared, but let and const cannot.</h2>\n<p>In terms of declaration, var can be redeclared, but let and const cannot. So when using var, you can do the following:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>let cannot be redeclared, but it can be reassigned, so it works like this:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"3-in-terms-of-hoisting-variables-declared-with-var-are-automatically-initialized-with-undefined-so-using-the-variable-before-its-declaration-wont-cause-an-error-but-will-return-undefined-however-variables-declared-with-let-and-const-are-not-automatically-initialized-and-enter-a-temporal-dead-zone-tdz-so-using-them-before-declaration-will-result-in-an-error\">3. In terms of hoisting, variables declared with var are automatically initialized with undefined, so using the variable before its declaration won’t cause an error but will return undefined; however, variables declared with let and const are not automatically initialized and enter a Temporal Dead Zone (TDZ), so using them before declaration will result in an error.</h2>\n<p>In terms of hoisting, variables declared with var are automatically initialized, so using the variable before its declaration won’t cause an error but will return undefined, like this:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>But let and const don’t behave this way. Instead, they enter a Temporal Dead Zone (TDZ), so using them before declaration will result in an error:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"when-comparing-let-and-const-the-main-difference-is-that-variables-declared-with-let-can-be-reassigned-while-those-declared-with-const-cannot\">When comparing let and const, the main difference is that variables declared with let can be reassigned, while those declared with const cannot.</h2>\n<p>let and const are similar in most aspects, but their main difference is that variables declared with let can be reassigned, while those declared with const cannot.</p>\n<p>It’s important to note that this difference is about “reassignment,” not about changing a variable’s value. If the variable is a primitive value (like strings or numbers), neither let nor const can change it after declaration. However, if the variable is an object, both let and const allow changes to the object’s properties after declaration.</p>\n<p>So the following example is valid:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>As for when to use let versus const, there’s no standard answer. The current industry perspective generally favors using const in most cases and only using let when reassignment is necessary.</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-var-let-const-in-javascript\">What’s the difference between var, let, and const in JavaScript? When should you use which one? | ExplainThis</a></p>",{headings:917,localImagePaths:931,remoteImagePaths:932,frontmatter:933,imagePaths:937},[918,921,924,927,930],{depth:32,slug:919,text:920},"1-in-terms-of-scope-var-can-be-global-or-function-scoped-while-let-and-const-are-block-scoped","1. In terms of scope, var can be global or function-scoped, while let and const are block-scoped.",{depth:32,slug:922,text:923},"2-in-terms-of-declaration-var-can-be-redeclared-but-let-and-const-cannot","2. In terms of declaration, var can be redeclared, but let and const cannot.",{depth:32,slug:925,text:926},"3-in-terms-of-hoisting-variables-declared-with-var-are-automatically-initialized-with-undefined-so-using-the-variable-before-its-declaration-wont-cause-an-error-but-will-return-undefined-however-variables-declared-with-let-and-const-are-not-automatically-initialized-and-enter-a-temporal-dead-zone-tdz-so-using-them-before-declaration-will-result-in-an-error","3. In terms of hoisting, variables declared with var are automatically initialized with undefined, so using the variable before its declaration won’t cause an error but will return undefined; however, variables declared with let and const are not automatically initialized and enter a Temporal Dead Zone (TDZ), so using them before declaration will result in an error.",{depth:32,slug:928,text:929},"when-comparing-let-and-const-the-main-difference-is-that-variables-declared-with-let-can-be-reassigned-while-those-declared-with-const-cannot","When comparing let and const, the main difference is that variables declared with let can be reassigned, while those declared with const cannot.",{depth:32,slug:33,text:34},[],[],{title:904,subtitle:905,author:16,imageWebp:906,imagePng:907,imgAlt:904,creationDate:934,updateDate:935,tags:936,featured:23},["Date","2024-10-20T00:00:00.000Z"],["Date","2024-10-20T00:00:00.000Z"],[22],[],"understanding-var-let-and-const-in-javascript.md","understanding-splice-slice-and-split-in-javascript",{id:939,data:941,body:949,filePath:950,digest:951,rendered:952,legacyId:976},{title:942,subtitle:943,author:16,imageWebp:944,imagePng:945,imgAlt:942,creationDate:946,updateDate:947,tags:948,featured:136},"Understanding splice, slice, and split in JavaScript","splice modifies the original array, allowing insertion, deletion, or both simultaneously; slice extracts a portion of an array or string, returning a new array or string without modifying the original; split divides a string into an array based on a specified separator, leaving the original string unchanged.","/images/articles/webp/understanding-splice-slice-and-split-in-javascript.webp","/images/articles/png/understanding-splice-slice-and-split-in-javascript.png",["Date","2023-08-05T00:00:00.000Z"],["Date","2023-08-05T00:00:00.000Z"],[22],"Before we begin, here's a summary table I've prepared:\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nWhen looking at splice, slice, and split individually, they might not seem confusing. However, once you've encountered all three, they start to feel familiar yet distinct, making it difficult to differentiate between them. They're like the \"Dango Three Brothers\" - if you don't carefully examine and analyze them, you won't know which one to use in different situations.\r\n\r\n<iframe \r\n  width=\"560\" \r\n  height=\"315\" \r\n  src=\"https://www.youtube.com/embed/xTwgS1V_8zQ?si=W21_GQRuBA5UP8Vk\" \r\n  title=\"YouTube video player\" \r\n  frameborder=\"0\" \r\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \r\n  referrerpolicy=\"strict-origin-when-cross-origin\" \r\n  allowfullscreen \r\n  style=\"width: 80%; margin: 0 auto; border-radius: 10px;\"\r\n>\r\n</iframe>\r\n\r\nThe \"Dango Three Brothers\" is a song from the Japanese NHK children's educational program \"Fun with Mom\" released in January 1999. It became extremely popular in Japan. The song style is super cute and pleasant to listen to - I recommend giving it a try to relieve some stress!\r\n\r\n## Table of Contents\r\n\r\n- [First Brother: splice](#first-brother-splice)\r\n- [Second Brother: slice](#second-brother-slice)\r\n- [Third Brother: split](#third-brother-split)\r\n- [Why can slice operate on both arrays and strings, while splice can only operate on arrays but not strings?](#why-can-slice-operate-on-both-arrays-and-strings-while-splice-can-only-operate-on-arrays-but-not-strings)\r\n\r\n## First Brother: splice\r\n\r\n[mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) explanation (Array.prototype.splice()):\r\n\r\nThe splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.\r\n\r\nBefore explaining splice's functionality, I want to highlight something important to remember when using array methods: **it's crucial to know what type they return and how they operate**.\r\nFor example, does it return an \"array\" or a \"string\"? Does it return \"a new array\" or \"modify the original array\"? Knowing this helps prevent writing incorrect code.\r\n\r\nLet's get started!\r\n\r\n**splice can do 2 things in the original \"array\": 1. Insert elements 2. Delete elements, or do both simultaneously → It modifies the original \"array\" and you can define a new variable name to capture the \"deleted elements\". If no elements are deleted, it returns an empty array.**\r\n\r\nLet's look at some examples:\r\n\r\nStarting from index 2, delete 0 elements and insert \"a\":\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 0, \"a\");\r\nconsole.log(arr1);\r\n// [\r\n//   0, 1, 'a', 2,\r\n//   3, 4, 5, 6\r\n// ]\r\nconsole.log(arr2);\r\n// []\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-1.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nStarting from index 2, delete 1 element:\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 1);\r\nconsole.log(arr1);\r\n// [ 0, 1, 3, 4, 5, 6 ]\r\nconsole.log(arr2);\r\n// [ 2 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-2.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nStarting from index 2, delete 1 element and insert \"a\":\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 1, \"a\");\r\nconsole.log(arr1);\r\n// [\r\n//   0, 1, 'a', 3,\r\n//   4, 5, 6\r\n// ]\r\nconsole.log(arr2);\r\n// [ 2 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-3.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nStarting from index 2, delete 1 element and insert \"a, b, c\":\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 1, \"a\", \"b\", \"c\");\r\nconsole.log(arr1);\r\n// [\r\n//   0, 1, 'a', 'b', 'c',\r\n//   3, 4, 5, 6\r\n// ]\r\nconsole.log(arr2);\r\n// [ 2 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-4.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Second Brother: slice\r\n\r\n[mdn](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) explanation (Array.prototype.slice()):\r\n\r\nThe slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.\r\n\r\n[mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) explanation (String.prototype.slice()):\r\n\r\nThe slice() method extracts a section of a string and returns it as a new string, without modifying the original string.\r\n\r\n**slice can extract a portion of an \"array\" or \"string\" → It returns a new \"array\" or \"string\", which is the extracted segment, while the original \"array\" or \"string\" remains unchanged.**\r\n\r\nLet's look at some examples:\r\n\r\nSlice from position 3 onwards:\r\n\r\n<!-- ```js\r\nlet arr = [0, 1, 2, 3, 4, 5, 6];\r\nconsole.log(arr.slice(3));\r\n// [ 3, 4, 5, 6 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-5.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nSlice from position 3 to position 6 (not including position 6):\r\n\r\n<!-- ```js\r\nlet arr = [0, 1, 2, 3, 4, 5, 6];\r\nconsole.log(arr.slice(3, 6));\r\n// [ 3, 4, 5 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-6.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nI've only provided examples of extracting from \"arrays\" above. For extracting from \"strings\", please use your imagination and apply the same principles. (Translation: I'm too lazy to write more examples 😂)\r\n\r\n## Third Brother: split\r\n\r\n[mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) explanation (String.prototype.split()):\r\n\r\nThe split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.\r\n\r\n**split's function is to \"divide a string into an array\". When using it, you must specify what character in the original string you want to use as a separator → It returns a new \"array\", while the original \"string\" remains unchanged.**\r\n\r\nLet me explain with the following example:\r\n\r\n<!-- ```js\r\nconst myString = \"hello!nihao!你好\";\r\nconst myNewArray = myString.split(\"!\");\r\nconsole.log(myNewArray);\r\n// [ 'hello', 'nihao', '你好' ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-7.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nNote that the separator used will disappear in the returned new \"array\". In the example above, we specified \"!\" as the separator, so the exclamation marks don't appear in the resulting array elements.\r\n\r\nThis method is particularly useful when processing .csv files! (.csv is one of the most common export formats for Excel or Google Sheets, which converts spreadsheet fields into a text file with comma-separated values)\r\n\r\nLet's also look at the demo provided by [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split):\r\n\r\n<!-- ```js\r\nconst str = \"The quick brown fox jumps over the lazy dog.\";\r\nconst words = str.split(\" \");\r\nconsole.log(words);\r\n// [\r\n//   'The',   'quick',\r\n//   'brown', 'fox',\r\n//   'jumps', 'over',\r\n//   'the',   'lazy',\r\n//   'dog.'\r\n// ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-8.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-8.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```js\r\nconst str = \"The quick brown fox jumps over the lazy dog.\";\r\nconst chars = str.split(\"\");\r\nconsole.log(chars);\r\n// [\r\n//   'T', 'h', 'e', ' ', 'q', 'u', 'i',\r\n//   'c', 'k', ' ', 'b', 'r', 'o', 'w',\r\n//   'n', ' ', 'f', 'o', 'x', ' ', 'j',\r\n//   'u', 'm', 'p', 's', ' ', 'o', 'v',\r\n//   'e', 'r', ' ', 't', 'h', 'e', ' ',\r\n//   'l', 'a', 'z', 'y', ' ', 'd', 'o',\r\n//   'g', '.'\r\n// ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-9.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-9.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```js\r\nconst str = \"The quick brown fox jumps over the lazy dog.\";\r\nconst strCopy = str.split();\r\nconsole.log(strCopy);\r\n// ['The quick brown fox jumps over the lazy dog.']\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-10.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-10.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nHere we can see that if the original string is a complete sentence, using \"' '\" (with a space in between) as the separator will split it into individual words, using \"''\" (with no space in between) as the separator will split it into individual letters, and using \"\" (not putting anything) as the separator will put the entire original string (in this case, a complete sentence) directly into the new array as its only element.\r\n\r\nWell, our \"spot the difference\" game ends here for now. There are probably many more features I haven't listed, but I'll leave those for another time if I happen to encounter them.\r\n\r\n## Why can slice operate on both arrays and strings, while splice can only operate on arrays but not strings?\r\n\r\nThis was a question that came to mind after playing the \"spot the difference\" game. My current understanding is that functions that can operate on arrays should typically also be able to operate on strings, as this would be a win-win situation. But why can splice only operate on arrays?\r\n\r\nThis is because in JavaScript, variables of Primitive Types (including strings) have an Immutable characteristic, meaning you cannot directly modify the content of variables of Primitive Types. Note that this refers to not being able to directly call any built-in functions to make modifications, but you can still reassign values to change the content. Here's a simple example to illustrate:\r\n\r\nIf a variable is of Primitive Type, calling any built-in function alone won't change the variable's value, e.g.,\r\n\r\n<!-- ```js\r\nlet a = \"hello\";\r\na.toUpperCase();\r\nconsole.log(a); // hello\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-11.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-11.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nYou must reassign the value for a to change:\r\n\r\n<!-- ```js\r\nlet a = \"hello\";\r\na = a.toUpperCase();\r\nconsole.log(a); // HELLO\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-12.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-12.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nBack to the original question, we know that the splice function itself is designed to directly change the original value, which would contradict JavaScript's Immutable characteristic. This is why the splice function cannot operate on strings. It's similar to how in law, there are constitutional principles that take precedence - if civil or criminal laws contradict the constitution, they become inapplicable. However, since arrays in JavaScript are of Object type, which doesn't have the Immutable characteristic, directly manipulating the original value isn't problematic. Here's a simple example to illustrate:\r\n\r\n<!-- ```js\r\nlet arr = [1, 2, 3];\r\narr.push(4);\r\nconsole.log(arr); // [1, 2, 3, 4]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-13.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-13.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nFrom the example above, we can see that if a variable is of Object type, directly calling built-in functions will change the variable's value.\r\n\r\nAs for the slice function, since its functionality doesn't change the original value, there's no contradiction as mentioned above, so it works fine for both array and string operations.\r\n\r\nFinally, let me share my summary table again. I hope it helps you easily distinguish between these three \"Dango Brothers\" and never confuse them again.\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>","src/content/en/understanding-splice-slice-and-split-in-javascript.md","0c041886fa394c9d",{html:953,metadata:954},"<p>Before we begin, here’s a summary table I’ve prepared:</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>When looking at splice, slice, and split individually, they might not seem confusing. However, once you’ve encountered all three, they start to feel familiar yet distinct, making it difficult to differentiate between them. They’re like the “Dango Three Brothers” - if you don’t carefully examine and analyze them, you won’t know which one to use in different situations.</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xTwgS1V_8zQ?si=W21_GQRuBA5UP8Vk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen style=\"width: 80%; margin: 0 auto; border-radius: 10px;\">\n</iframe>\n<p>The “Dango Three Brothers” is a song from the Japanese NHK children’s educational program “Fun with Mom” released in January 1999. It became extremely popular in Japan. The song style is super cute and pleasant to listen to - I recommend giving it a try to relieve some stress!</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#first-brother-splice\">First Brother: splice</a></li>\n<li><a href=\"#second-brother-slice\">Second Brother: slice</a></li>\n<li><a href=\"#third-brother-split\">Third Brother: split</a></li>\n<li><a href=\"#why-can-slice-operate-on-both-arrays-and-strings-while-splice-can-only-operate-on-arrays-but-not-strings\">Why can slice operate on both arrays and strings, while splice can only operate on arrays but not strings?</a></li>\n</ul>\n<h2 id=\"first-brother-splice\">First Brother: splice</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">mdn</a> explanation (Array.prototype.splice()):</p>\n<p>The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.</p>\n<p>Before explaining splice’s functionality, I want to highlight something important to remember when using array methods: <strong>it’s crucial to know what type they return and how they operate</strong>.\r\nFor example, does it return an “array” or a “string”? Does it return “a new array” or “modify the original array”? Knowing this helps prevent writing incorrect code.</p>\n<p>Let’s get started!</p>\n<p><strong>splice can do 2 things in the original “array”: 1. Insert elements 2. Delete elements, or do both simultaneously → It modifies the original “array” and you can define a new variable name to capture the “deleted elements”. If no elements are deleted, it returns an empty array.</strong></p>\n<p>Let’s look at some examples:</p>\n<p>Starting from index 2, delete 0 elements and insert “a”:</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 0, \"a\");\nconsole.log(arr1);\n// [\n//   0, 1, 'a', 2,\n//   3, 4, 5, 6\n// ]\nconsole.log(arr2);\n// []\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Starting from index 2, delete 1 element:</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 1);\nconsole.log(arr1);\n// [ 0, 1, 3, 4, 5, 6 ]\nconsole.log(arr2);\n// [ 2 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Starting from index 2, delete 1 element and insert “a”:</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 1, \"a\");\nconsole.log(arr1);\n// [\n//   0, 1, 'a', 3,\n//   4, 5, 6\n// ]\nconsole.log(arr2);\n// [ 2 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Starting from index 2, delete 1 element and insert “a, b, c”:</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 1, \"a\", \"b\", \"c\");\nconsole.log(arr1);\n// [\n//   0, 1, 'a', 'b', 'c',\n//   3, 4, 5, 6\n// ]\nconsole.log(arr2);\n// [ 2 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"second-brother-slice\">Second Brother: slice</h2>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">mdn</a> explanation (Array.prototype.slice()):</p>\n<p>The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">mdn</a> explanation (String.prototype.slice()):</p>\n<p>The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.</p>\n<p><strong>slice can extract a portion of an “array” or “string” → It returns a new “array” or “string”, which is the extracted segment, while the original “array” or “string” remains unchanged.</strong></p>\n<p>Let’s look at some examples:</p>\n<p>Slice from position 3 onwards:</p>\n<!-- ```js\nlet arr = [0, 1, 2, 3, 4, 5, 6];\nconsole.log(arr.slice(3));\n// [ 3, 4, 5, 6 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Slice from position 3 to position 6 (not including position 6):</p>\n<!-- ```js\nlet arr = [0, 1, 2, 3, 4, 5, 6];\nconsole.log(arr.slice(3, 6));\n// [ 3, 4, 5 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-6.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>I’ve only provided examples of extracting from “arrays” above. For extracting from “strings”, please use your imagination and apply the same principles. (Translation: I’m too lazy to write more examples 😂)</p>\n<h2 id=\"third-brother-split\">Third Brother: split</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\">mdn</a> explanation (String.prototype.split()):</p>\n<p>The split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.</p>\n<p><strong>split’s function is to “divide a string into an array”. When using it, you must specify what character in the original string you want to use as a separator → It returns a new “array”, while the original “string” remains unchanged.</strong></p>\n<p>Let me explain with the following example:</p>\n<!-- ```js\nconst myString = \"hello!nihao!你好\";\nconst myNewArray = myString.split(\"!\");\nconsole.log(myNewArray);\n// [ 'hello', 'nihao', '你好' ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-7.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Note that the separator used will disappear in the returned new “array”. In the example above, we specified ”!” as the separator, so the exclamation marks don’t appear in the resulting array elements.</p>\n<p>This method is particularly useful when processing .csv files! (.csv is one of the most common export formats for Excel or Google Sheets, which converts spreadsheet fields into a text file with comma-separated values)</p>\n<p>Let’s also look at the demo provided by <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\">mdn</a>:</p>\n<!-- ```js\nconst str = \"The quick brown fox jumps over the lazy dog.\";\nconst words = str.split(\" \");\nconsole.log(words);\n// [\n//   'The',   'quick',\n//   'brown', 'fox',\n//   'jumps', 'over',\n//   'the',   'lazy',\n//   'dog.'\n// ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-8.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-8.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<!-- ```js\nconst str = \"The quick brown fox jumps over the lazy dog.\";\nconst chars = str.split(\"\");\nconsole.log(chars);\n// [\n//   'T', 'h', 'e', ' ', 'q', 'u', 'i',\n//   'c', 'k', ' ', 'b', 'r', 'o', 'w',\n//   'n', ' ', 'f', 'o', 'x', ' ', 'j',\n//   'u', 'm', 'p', 's', ' ', 'o', 'v',\n//   'e', 'r', ' ', 't', 'h', 'e', ' ',\n//   'l', 'a', 'z', 'y', ' ', 'd', 'o',\n//   'g', '.'\n// ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-9.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-9.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<!-- ```js\nconst str = \"The quick brown fox jumps over the lazy dog.\";\nconst strCopy = str.split();\nconsole.log(strCopy);\n// ['The quick brown fox jumps over the lazy dog.']\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-10.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-10.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Here we can see that if the original string is a complete sentence, using ”’ ’” (with a space in between) as the separator will split it into individual words, using ””” (with no space in between) as the separator will split it into individual letters, and using \"\" (not putting anything) as the separator will put the entire original string (in this case, a complete sentence) directly into the new array as its only element.</p>\n<p>Well, our “spot the difference” game ends here for now. There are probably many more features I haven’t listed, but I’ll leave those for another time if I happen to encounter them.</p>\n<h2 id=\"why-can-slice-operate-on-both-arrays-and-strings-while-splice-can-only-operate-on-arrays-but-not-strings\">Why can slice operate on both arrays and strings, while splice can only operate on arrays but not strings?</h2>\n<p>This was a question that came to mind after playing the “spot the difference” game. My current understanding is that functions that can operate on arrays should typically also be able to operate on strings, as this would be a win-win situation. But why can splice only operate on arrays?</p>\n<p>This is because in JavaScript, variables of Primitive Types (including strings) have an Immutable characteristic, meaning you cannot directly modify the content of variables of Primitive Types. Note that this refers to not being able to directly call any built-in functions to make modifications, but you can still reassign values to change the content. Here’s a simple example to illustrate:</p>\n<p>If a variable is of Primitive Type, calling any built-in function alone won’t change the variable’s value, e.g.,</p>\n<!-- ```js\nlet a = \"hello\";\na.toUpperCase();\nconsole.log(a); // hello\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-11.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-11.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>You must reassign the value for a to change:</p>\n<!-- ```js\nlet a = \"hello\";\na = a.toUpperCase();\nconsole.log(a); // HELLO\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-12.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-12.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>Back to the original question, we know that the splice function itself is designed to directly change the original value, which would contradict JavaScript’s Immutable characteristic. This is why the splice function cannot operate on strings. It’s similar to how in law, there are constitutional principles that take precedence - if civil or criminal laws contradict the constitution, they become inapplicable. However, since arrays in JavaScript are of Object type, which doesn’t have the Immutable characteristic, directly manipulating the original value isn’t problematic. Here’s a simple example to illustrate:</p>\n<!-- ```js\nlet arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr); // [1, 2, 3, 4]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-13.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-13.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>From the example above, we can see that if a variable is of Object type, directly calling built-in functions will change the variable’s value.</p>\n<p>As for the slice function, since its functionality doesn’t change the original value, there’s no contradiction as mentioned above, so it works fine for both array and string operations.</p>\n<p>Finally, let me share my summary table again. I hope it helps you easily distinguish between these three “Dango Brothers” and never confuse them again.</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>",{headings:955,localImagePaths:969,remoteImagePaths:970,frontmatter:971,imagePaths:975},[956,957,960,963,966],{depth:32,slug:145,text:146},{depth:32,slug:958,text:959},"first-brother-splice","First Brother: splice",{depth:32,slug:961,text:962},"second-brother-slice","Second Brother: slice",{depth:32,slug:964,text:965},"third-brother-split","Third Brother: split",{depth:32,slug:967,text:968},"why-can-slice-operate-on-both-arrays-and-strings-while-splice-can-only-operate-on-arrays-but-not-strings","Why can slice operate on both arrays and strings, while splice can only operate on arrays but not strings?",[],[],{title:942,subtitle:943,author:16,imageWebp:944,imagePng:945,imgAlt:942,creationDate:972,updateDate:973,tags:974,featured:136},["Date","2023-08-05T00:00:00.000Z"],["Date","2023-08-05T00:00:00.000Z"],[22],[],"understanding-splice-slice-and-split-in-javascript.md","why-01-plus-02-equals-030000000000000004-in-javascript",{id:977,data:979,body:988,filePath:989,digest:990,rendered:991,legacyId:1003},{title:980,subtitle:981,author:16,imageWebp:982,imagePng:983,imgAlt:984,creationDate:985,updateDate:986,tags:987,featured:23},"Why Isn't 0.1 + 0.2 Exactly 0.3 in JavaScript?","Due to binary representation and limited computer memory, 0.1 + 0.2 = 0.30000000000000004.","/images/articles/webp/why-01-plus-02-equals-030000000000000004-in-javascript.webp","/images/articles/png/why-01-plus-02-equals-030000000000000004-in-javascript.png","Why 0.1 + 0.2 equals 0.30000000000000004 in JavaScript",["Date","2024-11-24T00:00:00.000Z"],["Date","2024-11-24T00:00:00.000Z"],[22],"In JavaScript, 0.1 + 0.2 doesn't equal exactly 0.3. This isn't unique to JavaScript but is a common issue in all programming languages that use binary floating-point arithmetic.\n\nIn everyday life, we mostly use the decimal system, where only fractions like 1/2, 1/4, 1/5, 1/8, and 1/10 can be precisely represented as decimals. Fractions like 1/3, 1/6, 1/7, and 1/9 cannot. For example, 1/3 is 0.33333333... continuing infinitely. Similarly, in binary, only fractions like 1/2, 1/4, 1/8, etc. can be precisely represented, while others extend infinitely. Since computer memory is limited, programming languages allocate finite memory to numbers, restricting precision. This limitation causes JavaScript to calculate 0.1 + 0.2 as 0.30000000000000004.\n\nTo avoid this issue, JavaScript provides methods like `toFixed` and `toPrecision` for number operations, allowing us to set our desired precision level, such as rounding to one decimal place. Therefore:\n\n<!-- ```js\nconsole.log((0.1 + 0.2).toFixed(1)); // 0.3\nconsole.log((0.1 + 0.2).toPrecision(1)); // 0.3\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/why-01-plus-02-equals-030000000000000004-in-javascript/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/why-01-plus-02-equals-030000000000000004-in-javascript/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[What is 0.1 + 0.2 in JavaScript? Why? How to avoid related issues? | ExplainThis](https://www.explainthis.io/zh-hant/swe/js-zero-point-one-plus-zero-point-two)","src/content/en/why-01-plus-02-equals-030000000000000004-in-javascript.md","63821c4ed32db81a",{html:992,metadata:993},"<p>In JavaScript, 0.1 + 0.2 doesn’t equal exactly 0.3. This isn’t unique to JavaScript but is a common issue in all programming languages that use binary floating-point arithmetic.</p>\n<p>In everyday life, we mostly use the decimal system, where only fractions like 1/2, 1/4, 1/5, 1/8, and 1/10 can be precisely represented as decimals. Fractions like 1/3, 1/6, 1/7, and 1/9 cannot. For example, 1/3 is 0.33333333… continuing infinitely. Similarly, in binary, only fractions like 1/2, 1/4, 1/8, etc. can be precisely represented, while others extend infinitely. Since computer memory is limited, programming languages allocate finite memory to numbers, restricting precision. This limitation causes JavaScript to calculate 0.1 + 0.2 as 0.30000000000000004.</p>\n<p>To avoid this issue, JavaScript provides methods like <code>toFixed</code> and <code>toPrecision</code> for number operations, allowing us to set our desired precision level, such as rounding to one decimal place. Therefore:</p>\n<!-- ```js\nconsole.log((0.1 + 0.2).toFixed(1)); // 0.3\nconsole.log((0.1 + 0.2).toPrecision(1)); // 0.3\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/why-01-plus-02-equals-030000000000000004-in-javascript/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/why-01-plus-02-equals-030000000000000004-in-javascript/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-zero-point-one-plus-zero-point-two\">What is 0.1 + 0.2 in JavaScript? Why? How to avoid related issues? | ExplainThis</a></p>",{headings:994,localImagePaths:996,remoteImagePaths:997,frontmatter:998,imagePaths:1002},[995],{depth:32,slug:33,text:34},[],[],{title:980,subtitle:981,author:16,imageWebp:982,imagePng:983,imgAlt:984,creationDate:999,updateDate:1000,tags:1001,featured:23},["Date","2024-11-24T00:00:00.000Z"],["Date","2024-11-24T00:00:00.000Z"],[22],[],"why-01-plus-02-equals-030000000000000004-in-javascript.md","zh-tw",["Map",11,1006,221,1028,43,1077,91,1106,362,1137,285,1186,470,1228,126,1251,336,1304,415,1326,526,1368,607,1437,500,1459,634,1481,706,1521,776,1543,732,1565,680,1602,802,1624,843,1661,939,1703,901,1737,977,1771],{id:11,data:1007,body:1013,filePath:1014,digest:1015,rendered:1016,legacyId:42},{title:1008,subtitle:1009,author:16,imageWebp:17,imagePng:18,imgAlt:14,creationDate:1010,updateDate:1011,tags:1012,featured:23},"關於 JavaScript 的資料型別","JavaScript 有原生值和物件兩大資料型別。原生值包含 String、Boolean、Number、BigInt、Undefined、Null 和 Symbol；物件則包含 Array、Function 和 Objects。",["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],"JavaScript 有原生值和物件兩大資料型別：原生值包含 String、Boolean、Number、BigInt、Undefined、Null 和 Symbol，它們是不可變的，表示我們不能改變那個值本身，所以當你希望資料被更新時，只能「產生一個新的值來取代舊的」；物件則包含 Array、Function 和 Objects，它們是可變的，屬於以參考形式存在的資料，所以當我們 mutate 變數中的一個物件或陣列時，這個變數的參考對象並不會改變，只是內容被修改而已，因此當你想要改變一個變數的參考對象或是避免舊有的物件或陣列內容被修改到時，你應該產生一個全新的物件或陣列來取代舊有的。\n\n要辨別一個變數的資料型別，可以使用 typeof 方法。但有一個例外是 typeof null 會得到 object，這是一個 JavaScript 的歷史遺跡，但因為要改掉這個 bug 的成本太高，所以到目前為止還是有這個錯誤；再來要注意的是 typeof function () { } 會得到 function，但 typeof [ ] 會得到 object，所以要辨別某個變數是物件還是陣列的話，要使用 Array.isArray() 或 Object.prototype.toString.call() 方法。\n\n以下提供 Array.isArray() 和 Object.prototype.toString.call() 方法的範例：\n\n<!-- ```js\nArray.isArray([1, 2, 3]); // true\nArray.isArray({ foo: 123 }); // false\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n<!-- ```js\nconst arr = [1, 2, 3];\nconst fn = () => {\n  return 123;\n};\nconst obj = { foo: 123 };\n\nconsole.log(Object.prototype.toString.call(arr)); // [object Array]\nconsole.log(Object.prototype.toString.call(fn)); // [object Function]\nconsole.log(Object.prototype.toString.call(obj)); // [object Object]\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n[JavaScript 有哪些資料型別 (data types)? 該怎麼辨別一個變數的資料型別?｜ExplainThis](https://www.explainthis.io/zh-hant/swe/js-data-types)","src/content/zh-tw/about-javascript-data-types.md","165c87b39085525f",{html:1017,metadata:1018},"<p>JavaScript 有原生值和物件兩大資料型別：原生值包含 String、Boolean、Number、BigInt、Undefined、Null 和 Symbol，它們是不可變的，表示我們不能改變那個值本身，所以當你希望資料被更新時，只能「產生一個新的值來取代舊的」；物件則包含 Array、Function 和 Objects，它們是可變的，屬於以參考形式存在的資料，所以當我們 mutate 變數中的一個物件或陣列時，這個變數的參考對象並不會改變，只是內容被修改而已，因此當你想要改變一個變數的參考對象或是避免舊有的物件或陣列內容被修改到時，你應該產生一個全新的物件或陣列來取代舊有的。</p>\n<p>要辨別一個變數的資料型別，可以使用 typeof 方法。但有一個例外是 typeof null 會得到 object，這是一個 JavaScript 的歷史遺跡，但因為要改掉這個 bug 的成本太高，所以到目前為止還是有這個錯誤；再來要注意的是 typeof function () { } 會得到 function，但 typeof [ ] 會得到 object，所以要辨別某個變數是物件還是陣列的話，要使用 Array.isArray() 或 Object.prototype.toString.call() 方法。</p>\n<p>以下提供 Array.isArray() 和 Object.prototype.toString.call() 方法的範例：</p>\n<!-- ```js\nArray.isArray([1, 2, 3]); // true\nArray.isArray({ foo: 123 }); // false\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<!-- ```js\nconst arr = [1, 2, 3];\nconst fn = () => {\n  return 123;\n};\nconst obj = { foo: 123 };\n\nconsole.log(Object.prototype.toString.call(arr)); // [object Array]\nconsole.log(Object.prototype.toString.call(fn)); // [object Function]\nconsole.log(Object.prototype.toString.call(obj)); // [object Object]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/about-javascript-data-types/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/about-javascript-data-types/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-data-types\">JavaScript 有哪些資料型別 (data types)? 該怎麼辨別一個變數的資料型別?｜ExplainThis</a></p>",{headings:1019,localImagePaths:1021,remoteImagePaths:1022,frontmatter:1023,imagePaths:1027},[1020],{depth:32,slug:33,text:34},[],[],{title:1008,subtitle:1009,author:16,imageWebp:17,imagePng:18,imgAlt:14,creationDate:1024,updateDate:1025,tags:1026,featured:23},["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],[],{id:221,data:1029,body:1035,filePath:1036,digest:1037,rendered:1038,legacyId:284},{title:1030,subtitle:1031,author:16,imageWebp:226,imagePng:227,imgAlt:224,creationDate:1032,updateDate:1033,tags:1034,featured:136},"CSS Flexbox 實作小抄","CSS Flexbox 是一種強大的佈局模型，能夠幫助我們簡化和靈活化網頁元素的排版。",["Date","2024-02-04T00:00:00.000Z"],["Date","2024-02-04T00:00:00.000Z"],[53],"CSS Flexbox 是一種強大的佈局模型，能夠幫助我們簡化和靈活化網頁元素的排版。\r\n\r\n它特別適合於需要響應式設計的場景，可以自動調整元素的大小和排列方式，以適應不同的設備和螢幕尺寸。\r\n\r\n這裡分享我閱讀 [CSS Flexbox Layout Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) 這篇文章整理的 CSS Flexbox 實作筆記。\r\n\r\n## Table of Contents\r\n\r\n- [Properties for the Parent (flex container)](#properties-for-the-parent-flex-container)\r\n  - [宣告](#宣告)\r\n    - [display](#display)\r\n  - [排列方向與換行](#排列方向與換行)\r\n    - [flex-direction](#flex-direction)\r\n    - [flex-wrap](#flex-wrap)\r\n    - [flex-flow](#flex-flow)\r\n  - [對齊方式](#對齊方式)\r\n    - [align-content](#align-content)\r\n    - [justify-content](#justify-content)\r\n    - [align-items](#align-items)\r\n  - [空隙](#空隙)\r\n    - [row-gap / column-gap](#row-gap--column-gap)\r\n    - [gap](#gap)\r\n- [Properties for the Children (flex items)](#properties-for-the-children-flex-items)\r\n  - [order](#order)\r\n  - [flex-grow / flex-shrink / flex-basis 以及它們的縮寫 flex](#flex-grow--flex-shrink--flex-basis-以及它們的縮寫-flex)\r\n  - [align-self](#align-self)\r\n- [其他推薦](#其他推薦)\r\n- [Reference](#reference)\r\n\r\n## Properties for the Parent (flex container)\r\n\r\n### 宣告\r\n\r\n#### **display**\r\n\r\n- 宣告我要用 flex\r\n\r\n<!-- ```css\r\n.container {\r\n  display: flex | inline-flex;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/display.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### 排列方向與換行\r\n\r\n#### **flex-direction**\r\n\r\n<!-- ```css\r\n.container {\r\n  flex-direction: row | row-reverse | column | column-reverse;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-direction.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-direction.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **flex-wrap**\r\n\r\n<!-- ```css\r\n.container {\r\n  flex-wrap: nowrap | wrap | wrap-reverse;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-wrap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-wrap.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **flex-flow**\r\n\r\n- = flex-direction + flex-wrap\r\n- 預設值是 row nowrap\r\n\r\n<!-- ```css\r\n.container {\r\n  flex-flow: column wrap;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-flow.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-flow.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### 對齊方式\r\n\r\n#### **align-content**\r\n\r\n<!-- NOTE: This code will make UI broken. -->\r\n<!-- ```css\r\n.container {\r\n  align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-content**\r\n\r\n<!-- NOTE: This code will make UI broken. -->\r\n<!-- ```css\r\n.container {\r\n  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **align-items**\r\n\r\n<!-- NOTE: This code will make UI broken. -->\r\n<!-- ```css\r\n.container {\r\n  align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **空隙**\r\n\r\n#### **row-gap / column-gap**\r\n\r\n<!-- ```css\r\n.container {\r\n  display: flex;\r\n  ...\r\n  row-gap: 10px;\r\n  column-gap: 20px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/row-gap+column-gap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/row-gap+column-gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **gap**\r\n\r\n<!-- ```css\r\n.container {\r\n  display: flex;\r\n  ...\r\n  gap: 10px;\r\n  gap: 10px 20px; /* row-gap column gap */\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Properties for the Children (flex items)\r\n\r\n#### **order**\r\n\r\n<!-- ```css\r\n.item {\r\n  order: 5; /* default is 0 */\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/order.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/order.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **flex-grow / flex-shrink / flex-basis 以及它們的縮寫 flex**\r\n\r\n這個部份我覺得我好像沒有真的理解，也懷疑實作上是否會很常用到這些屬性，決定等真的需要用到時再來了解。\r\n\r\n<!-- NOTE: Save the picture temporarily -->\r\n<!-- <picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture> -->\r\n\r\n#### **align-self**\r\n\r\n<!-- ```css\r\n.item {\r\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n## 其他推薦\r\n\r\n可到 [Flexbox Playground](https://flexiting.com/playground/) 網站測試實際效果。\r\n\r\n## Reference\r\n\r\n[CSS Flexbox Layout Guide | CSS-Tricks](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)","src/content/zh-tw/css-flexbox-implementation-cheatsheet.md","a75e36abe87885f1",{html:1039,metadata:1040},"<p>CSS Flexbox 是一種強大的佈局模型，能夠幫助我們簡化和靈活化網頁元素的排版。</p>\n<p>它特別適合於需要響應式設計的場景，可以自動調整元素的大小和排列方式，以適應不同的設備和螢幕尺寸。</p>\n<p>這裡分享我閱讀 <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS Flexbox Layout Guide</a> 這篇文章整理的 CSS Flexbox 實作筆記。</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#properties-for-the-parent-flex-container\">Properties for the Parent (flex container)</a>\n<ul>\n<li><a href=\"#%E5%AE%A3%E5%91%8A\">宣告</a>\n<ul>\n<li><a href=\"#display\">display</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%8E%92%E5%88%97%E6%96%B9%E5%90%91%E8%88%87%E6%8F%9B%E8%A1%8C\">排列方向與換行</a>\n<ul>\n<li><a href=\"#flex-direction\">flex-direction</a></li>\n<li><a href=\"#flex-wrap\">flex-wrap</a></li>\n<li><a href=\"#flex-flow\">flex-flow</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B0%8D%E9%BD%8A%E6%96%B9%E5%BC%8F\">對齊方式</a>\n<ul>\n<li><a href=\"#align-content\">align-content</a></li>\n<li><a href=\"#justify-content\">justify-content</a></li>\n<li><a href=\"#align-items\">align-items</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%A9%BA%E9%9A%99\">空隙</a>\n<ul>\n<li><a href=\"#row-gap--column-gap\">row-gap / column-gap</a></li>\n<li><a href=\"#gap\">gap</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#properties-for-the-children-flex-items\">Properties for the Children (flex items)</a>\n<ul>\n<li><a href=\"#order\">order</a></li>\n<li><a href=\"#flex-grow--flex-shrink--flex-basis-%E4%BB%A5%E5%8F%8A%E5%AE%83%E5%80%91%E7%9A%84%E7%B8%AE%E5%AF%AB-flex\">flex-grow / flex-shrink / flex-basis 以及它們的縮寫 flex</a></li>\n<li><a href=\"#align-self\">align-self</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E6%8E%A8%E8%96%A6\">其他推薦</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"properties-for-the-parent-flex-container\">Properties for the Parent (flex container)</h2>\n<h3 id=\"宣告\">宣告</h3>\n<h4 id=\"display\"><strong>display</strong></h4>\n<ul>\n<li>宣告我要用 flex</li>\n</ul>\n<!-- ```css\n.container {\n  display: flex | inline-flex;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/display.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"排列方向與換行\">排列方向與換行</h3>\n<h4 id=\"flex-direction\"><strong>flex-direction</strong></h4>\n<!-- ```css\n.container {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-direction.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-direction.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"flex-wrap\"><strong>flex-wrap</strong></h4>\n<!-- ```css\n.container {\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-wrap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-wrap.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"flex-flow\"><strong>flex-flow</strong></h4>\n<ul>\n<li>= flex-direction + flex-wrap</li>\n<li>預設值是 row nowrap</li>\n</ul>\n<!-- ```css\n.container {\n  flex-flow: column wrap;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-flow.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-flow.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"對齊方式\">對齊方式</h3>\n<h4 id=\"align-content\"><strong>align-content</strong></h4>\n<!-- NOTE: This code will make UI broken. -->\n<!-- ```css\n.container {\n  align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-content\"><strong>justify-content</strong></h4>\n<!-- NOTE: This code will make UI broken. -->\n<!-- ```css\n.container {\n  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"align-items\"><strong>align-items</strong></h4>\n<!-- NOTE: This code will make UI broken. -->\n<!-- ```css\n.container {\n  align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h3 id=\"空隙\"><strong>空隙</strong></h3>\n<h4 id=\"row-gap--column-gap\"><strong>row-gap / column-gap</strong></h4>\n<!-- ```css\n.container {\n  display: flex;\n  ...\n  row-gap: 10px;\n  column-gap: 20px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/row-gap+column-gap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/row-gap+column-gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h4 id=\"gap\"><strong>gap</strong></h4>\n<!-- ```css\n.container {\n  display: flex;\n  ...\n  gap: 10px;\n  gap: 10px 20px; /* row-gap column gap */\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"properties-for-the-children-flex-items\">Properties for the Children (flex items)</h2>\n<h4 id=\"order\"><strong>order</strong></h4>\n<!-- ```css\n.item {\n  order: 5; /* default is 0 */\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/order.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/order.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"flex-grow--flex-shrink--flex-basis-以及它們的縮寫-flex\"><strong>flex-grow / flex-shrink / flex-basis 以及它們的縮寫 flex</strong></h4>\n<p>這個部份我覺得我好像沒有真的理解，也懷疑實作上是否會很常用到這些屬性，決定等真的需要用到時再來了解。</p>\n<!-- NOTE: Save the picture temporarily -->\n<!-- <picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/flex-grow+flex-shrink+flex-basis.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture> -->\n<h4 id=\"align-self\"><strong>align-self</strong></h4>\n<!-- ```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-flexbox-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-flexbox-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h2 id=\"其他推薦\">其他推薦</h2>\n<p>可到 <a href=\"https://flexiting.com/playground/\">Flexbox Playground</a> 網站測試實際效果。</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS Flexbox Layout Guide | CSS-Tricks</a></p>",{headings:1041,localImagePaths:1070,remoteImagePaths:1071,frontmatter:1072,imagePaths:1076},[1042,1043,1044,1046,1047,1049,1050,1051,1052,1054,1055,1056,1057,1059,1060,1061,1062,1063,1066,1067,1069],{depth:32,slug:145,text:146},{depth:32,slug:240,text:241},{depth:62,slug:1045,text:1045},"宣告",{depth:154,slug:155,text:155},{depth:62,slug:1048,text:1048},"排列方向與換行",{depth:154,slug:248,text:248},{depth:154,slug:250,text:250},{depth:154,slug:252,text:252},{depth:62,slug:1053,text:1053},"對齊方式",{depth:154,slug:173,text:173},{depth:154,slug:175,text:175},{depth:154,slug:182,text:182},{depth:62,slug:1058,text:1058},"空隙",{depth:154,slug:191,text:192},{depth:154,slug:194,text:194},{depth:32,slug:265,text:266},{depth:154,slug:268,text:268},{depth:154,slug:1064,text:1065},"flex-grow--flex-shrink--flex-basis-以及它們的縮寫-flex","flex-grow / flex-shrink / flex-basis 以及它們的縮寫 flex",{depth:154,slug:207,text:207},{depth:32,slug:1068,text:1068},"其他推薦",{depth:32,slug:33,text:34},[],[],{title:1030,subtitle:1031,author:16,imageWebp:226,imagePng:227,imgAlt:224,creationDate:1073,updateDate:1074,tags:1075,featured:136},["Date","2024-02-04T00:00:00.000Z"],["Date","2024-02-04T00:00:00.000Z"],[53],[],{id:43,data:1078,body:1084,filePath:1085,digest:1086,rendered:1087,legacyId:90},{title:1079,subtitle:1080,author:16,imageWebp:48,imagePng:49,imgAlt:46,creationDate:1081,updateDate:1082,tags:1083,featured:23},"CSS 的 display 排列模式","CSS 的 display 屬性會決定一個元素在頁面中的排列方式，並影響其內部和周圍元素的佈局。",["Date","2023-01-22T00:00:00.000Z"],["Date","2023-01-22T00:00:00.000Z"],[53],"### display: block\r\n\r\n預設會佔用整個容器的寬度，使相鄰元素被擠到下一行。\r\n\r\n### display: inline\r\n\r\n類似自然流動的文字，它佔用的空間由內容決定，後面的元素會緊鄰在後。你無法隨意控制 inline 元素的寬度和高度。\r\n\r\n### display: inline-block\r\n\r\n以 inline 方式排版，但具有 block 屬性表示你對它的尺寸有絕對的掌控權，但是它不會占用整個水平空間，可以彼此相鄰。\r\n\r\n### display: flex\r\n\r\n可參考我寫的 [CSS Flexbox 實作小抄](/articles/css-flexbox-implementation-cheatsheet) 本篇文章\r\n\r\n### display: grid\r\n\r\n可參考我寫的 [CSS GRID 實作小抄](/articles/css-grid-implementation-cheatsheet) 本篇文章\r\n\r\n### display: none\r\n\r\n這個設定會讓元素消失。\r\n\r\n### 其他\r\n\r\n[htmlreference.io](https://htmlreference.io) 網站可以快速查看到元素和它們的 display 屬性。","src/content/zh-tw/css-display-layout-modes.md","ce5bce35cfc3f8ae",{html:1088,metadata:1089},"<h3 id=\"display-block\">display: block</h3>\n<p>預設會佔用整個容器的寬度，使相鄰元素被擠到下一行。</p>\n<h3 id=\"display-inline\">display: inline</h3>\n<p>類似自然流動的文字，它佔用的空間由內容決定，後面的元素會緊鄰在後。你無法隨意控制 inline 元素的寬度和高度。</p>\n<h3 id=\"display-inline-block\">display: inline-block</h3>\n<p>以 inline 方式排版，但具有 block 屬性表示你對它的尺寸有絕對的掌控權，但是它不會占用整個水平空間，可以彼此相鄰。</p>\n<h3 id=\"display-flex\">display: flex</h3>\n<p>可參考我寫的 <a href=\"/articles/css-flexbox-implementation-cheatsheet\">CSS Flexbox 實作小抄</a> 本篇文章</p>\n<h3 id=\"display-grid\">display: grid</h3>\n<p>可參考我寫的 <a href=\"/articles/css-grid-implementation-cheatsheet\">CSS GRID 實作小抄</a> 本篇文章</p>\n<h3 id=\"display-none\">display: none</h3>\n<p>這個設定會讓元素消失。</p>\n<h3 id=\"其他\">其他</h3>\n<p><a href=\"https://htmlreference.io\">htmlreference.io</a> 網站可以快速查看到元素和它們的 display 屬性。</p>",{headings:1090,localImagePaths:1099,remoteImagePaths:1100,frontmatter:1101,imagePaths:1105},[1091,1092,1093,1094,1095,1096,1097],{depth:62,slug:63,text:64},{depth:62,slug:66,text:67},{depth:62,slug:69,text:70},{depth:62,slug:72,text:73},{depth:62,slug:75,text:76},{depth:62,slug:78,text:79},{depth:62,slug:1098,text:1098},"其他",[],[],{title:1079,subtitle:1080,author:16,imageWebp:48,imagePng:49,imgAlt:46,creationDate:1102,updateDate:1103,tags:1104,featured:23},["Date","2023-01-22T00:00:00.000Z"],["Date","2023-01-22T00:00:00.000Z"],[53],[],{id:91,data:1107,body:1113,filePath:1114,digest:1115,rendered:1116,legacyId:125},{title:1108,subtitle:1109,author:16,imageWebp:96,imagePng:97,imgAlt:94,creationDate:1110,updateDate:1111,tags:1112,featured:23},"JavaScript 中 ==、=== 與 Object.is()的區別","== 會強制轉換型別與值；=== 不會強制轉換型別與值；Object.is()會比較兩個值是不是相等。",["Date","2024-10-27T00:00:00.000Z"],["Date","2024-10-27T00:00:00.000Z"],[22],"## == 鬆散比較(loose equality)\n\n在比較兩個值之前，會先強制轉換型別與值\n\n- `console.log(1 == \"1\");` // true\n\n- `console.log(0 == false);` // true\n\n- `console.log(undefined == null);` // true\n\n## === 嚴格比較(strict equality)\n\n不會強制轉換型別與值，但有兩個例外情況：\n\n- `console.log(+0 === -0);` // true\n\n- `console.log(NaN === NaN);` // false\n\n## Object.is() 同值比較(same-value equality)\n\n顧名思義是在比較兩個值是不是相等(雖然是 Object 開頭，但比較的可以是任意的兩個值)。上面提到的兩種在  ===  時遇到的問題，可以透過  Object.is  有效分辨：\n\n- `console.log(Object.is(+0, -0));` // false\n\n- `console.log(Object.is(NaN, NaN));` // true\n\n## Reference\n\n[在 JavaScript 當中，==、=== 與 Object.is()的區別｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/js-equality)","src/content/zh-tw/differences-between-equals-strict-equals-and-objectis-in-javascript.md","2d18181206107c7f",{html:1117,metadata:1118},"<h2 id=\"-鬆散比較loose-equality\">== 鬆散比較(loose equality)</h2>\n<p>在比較兩個值之前，會先強制轉換型別與值</p>\n<ul>\n<li>\n<p><code>console.log(1 == \"1\");</code> // true</p>\n</li>\n<li>\n<p><code>console.log(0 == false);</code> // true</p>\n</li>\n<li>\n<p><code>console.log(undefined == null);</code> // true</p>\n</li>\n</ul>\n<h2 id=\"-嚴格比較strict-equality\">=== 嚴格比較(strict equality)</h2>\n<p>不會強制轉換型別與值，但有兩個例外情況：</p>\n<ul>\n<li>\n<p><code>console.log(+0 === -0);</code> // true</p>\n</li>\n<li>\n<p><code>console.log(NaN === NaN);</code> // false</p>\n</li>\n</ul>\n<h2 id=\"objectis-同值比較same-value-equality\">Object.is() 同值比較(same-value equality)</h2>\n<p>顧名思義是在比較兩個值是不是相等(雖然是 Object 開頭，但比較的可以是任意的兩個值)。上面提到的兩種在  ===  時遇到的問題，可以透過  Object.is  有效分辨：</p>\n<ul>\n<li>\n<p><code>console.log(Object.is(+0, -0));</code> // false</p>\n</li>\n<li>\n<p><code>console.log(Object.is(NaN, NaN));</code> // true</p>\n</li>\n</ul>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-equality\">在 JavaScript 當中，==、=== 與 Object.is()的區別｜ ExplainThis</a></p>",{headings:1119,localImagePaths:1130,remoteImagePaths:1131,frontmatter:1132,imagePaths:1136},[1120,1123,1126,1129],{depth:32,slug:1121,text:1122},"-鬆散比較loose-equality","== 鬆散比較(loose equality)",{depth:32,slug:1124,text:1125},"-嚴格比較strict-equality","=== 嚴格比較(strict equality)",{depth:32,slug:1127,text:1128},"objectis-同值比較same-value-equality","Object.is() 同值比較(same-value equality)",{depth:32,slug:33,text:34},[],[],{title:1108,subtitle:1109,author:16,imageWebp:96,imagePng:97,imgAlt:94,creationDate:1133,updateDate:1134,tags:1135,featured:23},["Date","2024-10-27T00:00:00.000Z"],["Date","2024-10-27T00:00:00.000Z"],[22],[],{id:362,data:1138,body:1144,filePath:1145,digest:1146,rendered:1147,legacyId:414},{title:1139,subtitle:1140,author:16,imageWebp:367,imagePng:368,imgAlt:365,creationDate:1141,updateDate:1142,tags:1143,featured:23},"JavaScript 的 Object v.s. Map","Map 是 ES6 新增的語法，所以在 ES6 之前，Object 一直被當作 Map 來使用。",["Date","2024-11-10T00:00:00.000Z"],["Date","2024-11-10T00:00:00.000Z"],[22],"Map 是 ES6 新增的語法，所以在 ES6 之前，Object 一直被當作 Map 來使用，而新增的 Map 相較於原始的 Object 有下列幾項差異：\n\n## Map 優勢\n\n### Map 沒有原型(prototype)，因此更加安全且不會有意外的鍵(key)命名衝突問題\n\n- Map 更加安全：使用 Object 在設定使用者提供的鍵值對(key-value pairs)時可能會允許攻擊者覆寫該 Object 的原型(prototype)，這可能會導致物件注入攻擊。\n\n- Map 不會有意外的鍵(key)命名衝突問題：使用 Object 需要小心預設鍵(key)可能會與我們自己放入的鍵(key)發生衝突。\n\n- NOTE: 雖然以上問題可以透過使用 Object.create(null) 來解決，但我們很少這樣做。\n\n### Map 的鍵(key)可以是任何值，但 Object 的鍵(key)只能是 String 或 Symbol\n\nMap 不會因為鍵(key)被自動轉換成 String 導致意外的命名衝突問題：在用鍵值對處理資料時，很常開發者會用各類東西做為鍵(key)，但是在 JavaScript，如果用 Object，不管用什麼當做鍵(key)，都會被轉換成字串，這往往會造成一些錯誤，例如被轉成字串時，原本兩個不同的鍵(key)被轉成同樣的字串，這就導致撞鍵(key)問題。而 Map 物件解決了這個問題，開發者想用什麼當鍵(key)都可以。\n\n### Map 支援迭代(iteration)\n\n我們可以直接對 Map 用 for...of 、forEach 進行迭代，但是如果想要迭代 Object 則需要使用額外的方法，例如 Object.entries、Object.keys 來協助。\n\n### Map 的鍵(key)有順序性\n\n上面提到 Map 是可迭代的，它有一個相關的優點是在迭代時是有順序性的。過去使用 Object，即使用物件方法 (例如 Object.entries、Object.keys 來協助迭代)，迭代出的結果順序不一定會是我們放入鍵值對的順序。但有時候在寫演算法時，我們需要保留順序，這時 Map 物件就會好用很多。\n\n### Map 提供許多鍵值對(key-value pairs)常用的方法\n\n舉例來說，如果要知道一個鍵值對的大小，Map 有 size 方法，簡單又好用；但如果用原始物件，我們可能需要使用 Object.keys 然後搭配 .length 去自己找該物件有多少個鍵，這就麻煩很多。另外 Map 也有提供 clear 方法，可以一次把所有鍵值對刪掉；如果是原始物件就需要一個個刪。\n\n### Map 在頻繁改動鍵值對(key-value pairs)的情況下效能更好\n\nMap 適合用於需要高效查找、插入和刪除操作的場景。\n\n## Map 劣勢\n\n### Map 沒有對序列化或解析的原生支援\n\nObject 可以分別使用 JSON.stringify() 和 JSON.parse() 進行序列化和解析，但 Map 並沒有針對序列化和解析的原生支援，需要自己另外實作。\n\n## Reference\n\n- [Map - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n- [在 JavaScript 中，Map 與 object 的差別？為什麼有 object 還需要 Map？｜ExplainThis](https://www.explainthis.io/zh-hant/swe/map-vs-object)","src/content/zh-tw/javascript-object-vs-map.md","27c8793bd2b8786b",{html:1148,metadata:1149},"<p>Map 是 ES6 新增的語法，所以在 ES6 之前，Object 一直被當作 Map 來使用，而新增的 Map 相較於原始的 Object 有下列幾項差異：</p>\n<h2 id=\"map-優勢\">Map 優勢</h2>\n<h3 id=\"map-沒有原型prototype因此更加安全且不會有意外的鍵key命名衝突問題\">Map 沒有原型(prototype)，因此更加安全且不會有意外的鍵(key)命名衝突問題</h3>\n<ul>\n<li>\n<p>Map 更加安全：使用 Object 在設定使用者提供的鍵值對(key-value pairs)時可能會允許攻擊者覆寫該 Object 的原型(prototype)，這可能會導致物件注入攻擊。</p>\n</li>\n<li>\n<p>Map 不會有意外的鍵(key)命名衝突問題：使用 Object 需要小心預設鍵(key)可能會與我們自己放入的鍵(key)發生衝突。</p>\n</li>\n<li>\n<p>NOTE: 雖然以上問題可以透過使用 Object.create(null) 來解決，但我們很少這樣做。</p>\n</li>\n</ul>\n<h3 id=\"map-的鍵key可以是任何值但-object-的鍵key只能是-string-或-symbol\">Map 的鍵(key)可以是任何值，但 Object 的鍵(key)只能是 String 或 Symbol</h3>\n<p>Map 不會因為鍵(key)被自動轉換成 String 導致意外的命名衝突問題：在用鍵值對處理資料時，很常開發者會用各類東西做為鍵(key)，但是在 JavaScript，如果用 Object，不管用什麼當做鍵(key)，都會被轉換成字串，這往往會造成一些錯誤，例如被轉成字串時，原本兩個不同的鍵(key)被轉成同樣的字串，這就導致撞鍵(key)問題。而 Map 物件解決了這個問題，開發者想用什麼當鍵(key)都可以。</p>\n<h3 id=\"map-支援迭代iteration\">Map 支援迭代(iteration)</h3>\n<p>我們可以直接對 Map 用 for…of 、forEach 進行迭代，但是如果想要迭代 Object 則需要使用額外的方法，例如 Object.entries、Object.keys 來協助。</p>\n<h3 id=\"map-的鍵key有順序性\">Map 的鍵(key)有順序性</h3>\n<p>上面提到 Map 是可迭代的，它有一個相關的優點是在迭代時是有順序性的。過去使用 Object，即使用物件方法 (例如 Object.entries、Object.keys 來協助迭代)，迭代出的結果順序不一定會是我們放入鍵值對的順序。但有時候在寫演算法時，我們需要保留順序，這時 Map 物件就會好用很多。</p>\n<h3 id=\"map-提供許多鍵值對key-value-pairs常用的方法\">Map 提供許多鍵值對(key-value pairs)常用的方法</h3>\n<p>舉例來說，如果要知道一個鍵值對的大小，Map 有 size 方法，簡單又好用；但如果用原始物件，我們可能需要使用 Object.keys 然後搭配 .length 去自己找該物件有多少個鍵，這就麻煩很多。另外 Map 也有提供 clear 方法，可以一次把所有鍵值對刪掉；如果是原始物件就需要一個個刪。</p>\n<h3 id=\"map-在頻繁改動鍵值對key-value-pairs的情況下效能更好\">Map 在頻繁改動鍵值對(key-value pairs)的情況下效能更好</h3>\n<p>Map 適合用於需要高效查找、插入和刪除操作的場景。</p>\n<h2 id=\"map-劣勢\">Map 劣勢</h2>\n<h3 id=\"map-沒有對序列化或解析的原生支援\">Map 沒有對序列化或解析的原生支援</h3>\n<p>Object 可以分別使用 JSON.stringify() 和 JSON.parse() 進行序列化和解析，但 Map 並沒有針對序列化和解析的原生支援，需要自己另外實作。</p>\n<h2 id=\"reference\">Reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map - JavaScript | MDN</a></li>\n<li><a href=\"https://www.explainthis.io/zh-hant/swe/map-vs-object\">在 JavaScript 中，Map 與 object 的差別？為什麼有 object 還需要 Map？｜ExplainThis</a></li>\n</ul>",{headings:1150,localImagePaths:1179,remoteImagePaths:1180,frontmatter:1181,imagePaths:1185},[1151,1154,1157,1160,1163,1166,1169,1172,1175,1178],{depth:32,slug:1152,text:1153},"map-優勢","Map 優勢",{depth:62,slug:1155,text:1156},"map-沒有原型prototype因此更加安全且不會有意外的鍵key命名衝突問題","Map 沒有原型(prototype)，因此更加安全且不會有意外的鍵(key)命名衝突問題",{depth:62,slug:1158,text:1159},"map-的鍵key可以是任何值但-object-的鍵key只能是-string-或-symbol","Map 的鍵(key)可以是任何值，但 Object 的鍵(key)只能是 String 或 Symbol",{depth:62,slug:1161,text:1162},"map-支援迭代iteration","Map 支援迭代(iteration)",{depth:62,slug:1164,text:1165},"map-的鍵key有順序性","Map 的鍵(key)有順序性",{depth:62,slug:1167,text:1168},"map-提供許多鍵值對key-value-pairs常用的方法","Map 提供許多鍵值對(key-value pairs)常用的方法",{depth:62,slug:1170,text:1171},"map-在頻繁改動鍵值對key-value-pairs的情況下效能更好","Map 在頻繁改動鍵值對(key-value pairs)的情況下效能更好",{depth:32,slug:1173,text:1174},"map-劣勢","Map 劣勢",{depth:62,slug:1176,text:1177},"map-沒有對序列化或解析的原生支援","Map 沒有對序列化或解析的原生支援",{depth:32,slug:33,text:34},[],[],{title:1139,subtitle:1140,author:16,imageWebp:367,imagePng:368,imgAlt:365,creationDate:1182,updateDate:1183,tags:1184,featured:23},["Date","2024-11-10T00:00:00.000Z"],["Date","2024-11-10T00:00:00.000Z"],[22],[],{id:285,data:1187,body:1193,filePath:1194,digest:1195,rendered:1196,legacyId:335},{title:1188,subtitle:1189,author:16,imageWebp:290,imagePng:291,imgAlt:288,creationDate:1190,updateDate:1191,tags:1192,featured:136},"給開發新手看的 Git 實作小抄","Git 是一個分散式版本控制系統，主要用來管理和追蹤程式碼的變更，特別適合用於多人協作的開發專案。",["Date","2023-06-15T00:00:00.000Z"],["Date","2023-06-15T00:00:00.000Z"],[295],"第一次接觸到 Git 就覺得真的很喜歡這個東西。在開始學程式以前，從沒想過竟然可以用這種這麼有系統的方式去管理檔案，讓每個版本間的改動差異和到底是誰寫的等資訊都呈現的清清楚楚，對於新的改動後悔了，也可以輕鬆還原到之前的版本。\r\n\r\n有了它，就可以讓版本控制和多人協作變得容易和清晰非常多，甚至覺得應該要讓所有非工程師在檔案管理上也都來學習使用像這樣的版本控制系統。\r\n\r\n所以這篇文章想要來整理一下自己目前使用 Git 的習慣(流程)。\r\n\r\n雖然針對 Git 還有非常多我還不會的使用方法，但我可以分享自己通常的使用方式，作為個人在實作上的 cheat sheet，也幫助初學者能夠快速上手！\r\n\r\n內容主要分為 **[基本流程](#基本流程)** 和 **[多人協作](#多人協作)** 兩大部分，後面也有做一些補充說明。\r\n\r\n## Table of Contents\r\n\r\n- [基本流程](#基本流程)\r\n- [補充：(在還沒上傳到 GitHub 前) commit 完後悔想還原怎麼辦？](#補充在還沒上傳到-github-前-commit-完後悔想還原怎麼辦)\r\n  - [狀況一：你不小心 commit 錯了(還原後你想要讓修改/更新的程式碼仍保留在本地的工作區)](#狀況一你不小心-commit-錯了還原後你想要讓修改更新的程式碼仍保留在本地的工作區)\r\n  - [狀況二：你把程式改壞了(你想要真的整個還原)](#狀況二你把程式改壞了你想要真的整個還原)\r\n- [多人協作](#多人協作)\r\n- [補充：review 別人的 PR](#補充review-別人的-pr)\r\n- [其他小知識](#其他小知識)\r\n- [其他指令](#其他指令)\r\n\r\n### **基本流程**\r\n\r\n1. `git init`\r\n\r\n   登錄專案(啟動這個資料夾的版本控制)\r\n\r\n2. `touch .gitignore`\r\n\r\n   建立要忽略的檔案\r\n\r\n3. `git add .`\r\n\r\n   程式碼更動已告一段落，先把所有檔案加進去版本控制系統\r\n\r\n4. `git commit -m \"[commit 內容]\"`\r\n\r\n   提交一筆改動，並寫下你的改動訊息(commit 內容)\r\n\r\n   **git commit message 推薦寫法\r\n   (我是參考這篇：[git commit message 推薦寫法](https://wadehuanglearning.blogspot.com/2019/05/commit-commit-commit-why-what-commit.html))：**\r\n\r\n   1. feat: 新增/修改功能 (feature)。\r\n   2. fix: 修補 bug (bug fix)。\r\n   3. docs: 文件 (documentation)。\r\n   4. style: 格式 (不影響程式碼運行的變動 white-space, formatting, missing semi colons, etc)。\r\n   5. refactor: 重構 (既不是新增功能，也不是修補 bug 的程式碼變動)。\r\n   6. perf: 改善效能 (A code change that improves performance)。\r\n   7. test: 增加測試 (when adding missing tests)。\r\n   8. chore: 建構程序或輔助工具的變動 (maintain)。\r\n   9. revert: 撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。\r\n\r\n步驟 3 & 4 會一直重複\r\n\r\n5. GitHub + new repository\r\n\r\n   將專案上傳到 GitHub (按照 GitHub 提供的指示操作)\r\n\r\n6. `git push origin [branch 名稱]`\r\n\r\n   commit 完後可以把這個 branch 推到 GitHub 上\r\n\r\n只要你想更新 GitHub 上的程式碼到最新狀況，就執行一次步驟 6\r\n\r\n### **補充：(在還沒上傳到 GitHub 前) commit 完後悔想還原怎麼辦？**\r\n\r\n(詳細版本可參考 [【狀況題】剛才的 Commit 後悔了，想要拆掉重做… - 為你自己學 Git | 高見龍](https://gitbook.tw/chapters/using-git/reset-commit))\r\n\r\n#### 狀況一：你不小心 commit 錯了(還原後你想要讓修改/更新的程式碼仍保留在本地的工作區)\r\n\r\n- `git log --oneline`\r\n\r\n  查看摘要版的版本紀錄\r\n\r\n- `git reset b339b8d^` (編號需自行更換)\r\n  恢復到 b339b8d 的上一個版本(但 code 還在)\r\n\r\n#### 狀況二：你把程式改壞了(你想要真的整個還原)\r\n\r\n- `git reset --hard HEAD`\r\n\r\n  恢復到最新提交版本\r\n\r\n- `git reset --hard HEAD~1`\r\n  恢復到上一個提交版本(要退回到更前面的版本以此類推: ~2, ~3, ~4…)\r\n\r\n### **多人協作**\r\n\r\n1. `git checkout -b [branch 名稱]`\r\n\r\n   新開一個分支，並切換到該分支\r\n\r\n   分開寫法：\r\n\r\n   1. `git branch [branch 名稱]`\r\n\r\n      新開一個 branch\r\n\r\n   2. `git checkout [branch 名稱]`\r\n\r\n      切換到 branch\r\n\r\n2. (寫 code…基本流程步驟 3 & 4 循環)\r\n\r\n3. `git push origin [branch 名稱]`\r\n\r\n   推到 GitHub\r\n\r\n4. 到自己的 repo 去，並撰寫 & 發起 PR (Pull Request)\r\n\r\n5. 把 PR 的連結複製起來，交給你的好夥伴(像是主管、同事等)\r\n\r\n6. (等你的好夥伴改完並且 merge 以後) `git checkout main`\r\n\r\n   切換到 main\r\n\r\n7. `git pull origin main`\r\n\r\n   把最新的改動拉下來\r\n\r\n   分開寫法\r\n\r\n   1. `git fetch origin`\r\n\r\n      抓取遠端更新\r\n\r\n   2. `git merge origin/main`\r\n\r\n      合併遠端更新\r\n\r\n每開發或更新完一個功能，在想要發起 PR 前，最好也都要先執行一次步驟 6 & 7，然後將最新的 main 合併進準備要發 PR 的分支，此時若有衝突發生，先在本地端解掉再發 PR 會是比較好的方式。\r\n\r\n多人協作和自己寫程式最大的差異之一就是需要解衝突，這方面還需要再有更多經驗。\r\n\r\n### **補充：review 別人的 PR**\r\n\r\n若想要在本地端 review 可使用步驟 1 + 2：\r\n\r\n1. `git fetch origin`\r\n\r\n   抓取遠端更新\r\n\r\n2. `git checkout [branch 名稱]`\r\n\r\n   切換到 branch\r\n\r\n3. (檢查 OK 後要合併進主幹) `git checkout main`\r\n\r\n   要先切回主幹\r\n\r\n4. `git merge [branch 名稱]`\r\n\r\n   在主幹上進行合併\r\n\r\n5. 若沒有衝突就可以順利的合併進主幹，但若有衝突就要先解完衝突才可合併進去\r\n\r\n   - 如何減少需要解衝突的情況？\r\n\r\n     1. 分配工作的學問\r\n     2. 先將最新的 main 合併進準備要發 PR 的分支，再發 PR\r\n\r\n   - 下次有協作機會想要討論的議題：若有衝突，應該由 review 的人 merge，還是發 PR 的人 merge？\r\n\r\n     照理來說是 review 的人檢查 OK 後直接 merge 進主幹，但如果遇到有衝突的情況，其實發 PR 的人才是比較了解 code 的人 (因為 code 是他寫的)，這樣是否應該由發 PR 的人去解衝突？\r\n\r\n### **其他小知識**\r\n\r\n(我是參考 [mentor-program-5th/examples/week1](https://github.com/Lidemy/mentor-program-5th/tree/master/examples/week1))\r\n\r\n- 做版本控制時，聰明的 Git 真正儲存的是「檔案的差異」，並不會每開一個 branch 就開一個資料夾，也不會每一個 commit 就複製一次檔案。另外，對於每一個檔案，Git 也都有自己的壓縮演算法去壓縮，所以比你的檔案還小是正常的。\r\n\r\n- main/master 就只是「預設的 branch」，或者通常是最主要的 branch，但這並不代表它是「最新的 branch」。舉例來說，你也可以切出一條 branch 叫做「test」，然後一直往 test 加東西，但是從來都不合併回 main/master，那 test 就是在你專案裡的最新的 branch。所以 master 就只是一條預設的 branch 而已，最新的東西不一定在上面。\r\n\r\n- 發 PR 時，如果有東西你想改，其實你可以自己在電腦上改完以後 commit 再 push，GitHub 上的 PR 就會自動更新了，你什麼都不用做，更不用把 PR 關掉再開起來。因為 PR 的主體是「branch」，所以 branch 更新了，PR 的內容自然也會一起更新。\r\n\r\n### **其他指令**\r\n\r\n- `git clone 網址`\r\n\r\n  複製 GitHub 的專案到本機端\r\n\r\n- `git status`\r\n\r\n  查看狀態\r\n\r\n- `git log`\r\n\r\n  查看歷史\r\n\r\n- `git diff`\r\n\r\n  對照差異(如果指令後不加任何參數，會直接把工作中的程式碼拿來和最新版本做比較，此情況直接看 GUI 會更清楚)\r\n\r\n- `git diff [SHA-1] [SHA-1]`\r\n\r\n  從 A 版本到 B 版本，發生了哪些程式碼變化\r\n\r\n- `git branch`\r\n\r\n  列出目前所有的分支名稱清單(只會列出本地分支)\r\n\r\n- `git branch -v`\r\n\r\n  查看各個分支的最新 commit\r\n\r\n- `git branch --all`\r\n\r\n  列出目前所有的分支名稱清單(包含遠端分支)\r\n\r\n- `git branch -m [原本的 branch 名稱] [新的名稱]`\r\n\r\n  重新命名分支\r\n\r\n- `git branch -d [branch 名稱]`\r\n\r\n  (情境)刪除已經 merge 的 branch\r\n\r\n- `git rebase` 流程\r\n\r\n  1. `git checkout [branch名稱]`\r\n  2. `git rebase main`\r\n  3. 若有衝突就要開始解衝突，解完一個衝突，要 `git add .`\r\n\r\n     -`git rebase --continue`\r\n\r\n     - 會跳出 vi 編輯器，可直接儲存預設 commit，按 :wq，表儲存 & 離開\r\n\r\n- `git rebase squash`\r\n  把多個 commit 合併成一個 commit (太瑣碎，需要用到時可再參考 [【狀況題】把多個 Commit 合併成一個 Commit - 為你自己學 Git | 高見龍](https://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit))","src/content/zh-tw/git-implementation-cheatsheet-for-beginners.md","478fa8f2bb0afeba",{html:1197,metadata:1198},"<p>第一次接觸到 Git 就覺得真的很喜歡這個東西。在開始學程式以前，從沒想過竟然可以用這種這麼有系統的方式去管理檔案，讓每個版本間的改動差異和到底是誰寫的等資訊都呈現的清清楚楚，對於新的改動後悔了，也可以輕鬆還原到之前的版本。</p>\n<p>有了它，就可以讓版本控制和多人協作變得容易和清晰非常多，甚至覺得應該要讓所有非工程師在檔案管理上也都來學習使用像這樣的版本控制系統。</p>\n<p>所以這篇文章想要來整理一下自己目前使用 Git 的習慣(流程)。</p>\n<p>雖然針對 Git 還有非常多我還不會的使用方法，但我可以分享自己通常的使用方式，作為個人在實作上的 cheat sheet，也幫助初學者能夠快速上手！</p>\n<p>內容主要分為 <strong><a href=\"#%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B\">基本流程</a></strong> 和 <strong><a href=\"#%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C\">多人協作</a></strong> 兩大部分，後面也有做一些補充說明。</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B\">基本流程</a></li>\n<li><a href=\"#%E8%A3%9C%E5%85%85%E5%9C%A8%E9%82%84%E6%B2%92%E4%B8%8A%E5%82%B3%E5%88%B0-github-%E5%89%8D-commit-%E5%AE%8C%E5%BE%8C%E6%82%94%E6%83%B3%E9%82%84%E5%8E%9F%E6%80%8E%E9%BA%BC%E8%BE%A6\">補充：(在還沒上傳到 GitHub 前) commit 完後悔想還原怎麼辦？</a>\n<ul>\n<li><a href=\"#%E7%8B%80%E6%B3%81%E4%B8%80%E4%BD%A0%E4%B8%8D%E5%B0%8F%E5%BF%83-commit-%E9%8C%AF%E4%BA%86%E9%82%84%E5%8E%9F%E5%BE%8C%E4%BD%A0%E6%83%B3%E8%A6%81%E8%AE%93%E4%BF%AE%E6%94%B9%E6%9B%B4%E6%96%B0%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E4%BB%8D%E4%BF%9D%E7%95%99%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8D%80\">狀況一：你不小心 commit 錯了(還原後你想要讓修改/更新的程式碼仍保留在本地的工作區)</a></li>\n<li><a href=\"#%E7%8B%80%E6%B3%81%E4%BA%8C%E4%BD%A0%E6%8A%8A%E7%A8%8B%E5%BC%8F%E6%94%B9%E5%A3%9E%E4%BA%86%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9C%9F%E7%9A%84%E6%95%B4%E5%80%8B%E9%82%84%E5%8E%9F\">狀況二：你把程式改壞了(你想要真的整個還原)</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C\">多人協作</a></li>\n<li><a href=\"#%E8%A3%9C%E5%85%85review-%E5%88%A5%E4%BA%BA%E7%9A%84-pr\">補充：review 別人的 PR</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E5%B0%8F%E7%9F%A5%E8%AD%98\">其他小知識</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4\">其他指令</a></li>\n</ul>\n<h3 id=\"基本流程\"><strong>基本流程</strong></h3>\n<ol>\n<li>\n<p><code>git init</code></p>\n<p>登錄專案(啟動這個資料夾的版本控制)</p>\n</li>\n<li>\n<p><code>touch .gitignore</code></p>\n<p>建立要忽略的檔案</p>\n</li>\n<li>\n<p><code>git add .</code></p>\n<p>程式碼更動已告一段落，先把所有檔案加進去版本控制系統</p>\n</li>\n<li>\n<p><code>git commit -m \"[commit 內容]\"</code></p>\n<p>提交一筆改動，並寫下你的改動訊息(commit 內容)</p>\n<p><strong>git commit message 推薦寫法\r\n(我是參考這篇：<a href=\"https://wadehuanglearning.blogspot.com/2019/05/commit-commit-commit-why-what-commit.html\">git commit message 推薦寫法</a>)：</strong></p>\n<ol>\n<li>feat: 新增/修改功能 (feature)。</li>\n<li>fix: 修補 bug (bug fix)。</li>\n<li>docs: 文件 (documentation)。</li>\n<li>style: 格式 (不影響程式碼運行的變動 white-space, formatting, missing semi colons, etc)。</li>\n<li>refactor: 重構 (既不是新增功能，也不是修補 bug 的程式碼變動)。</li>\n<li>perf: 改善效能 (A code change that improves performance)。</li>\n<li>test: 增加測試 (when adding missing tests)。</li>\n<li>chore: 建構程序或輔助工具的變動 (maintain)。</li>\n<li>revert: 撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。</li>\n</ol>\n</li>\n</ol>\n<p>步驟 3 &#x26; 4 會一直重複</p>\n<ol start=\"5\">\n<li>\n<p>GitHub + new repository</p>\n<p>將專案上傳到 GitHub (按照 GitHub 提供的指示操作)</p>\n</li>\n<li>\n<p><code>git push origin [branch 名稱]</code></p>\n<p>commit 完後可以把這個 branch 推到 GitHub 上</p>\n</li>\n</ol>\n<p>只要你想更新 GitHub 上的程式碼到最新狀況，就執行一次步驟 6</p>\n<h3 id=\"補充在還沒上傳到-github-前-commit-完後悔想還原怎麼辦\"><strong>補充：(在還沒上傳到 GitHub 前) commit 完後悔想還原怎麼辦？</strong></h3>\n<p>(詳細版本可參考 <a href=\"https://gitbook.tw/chapters/using-git/reset-commit\">【狀況題】剛才的 Commit 後悔了，想要拆掉重做… - 為你自己學 Git | 高見龍</a>)</p>\n<h4 id=\"狀況一你不小心-commit-錯了還原後你想要讓修改更新的程式碼仍保留在本地的工作區\">狀況一：你不小心 commit 錯了(還原後你想要讓修改/更新的程式碼仍保留在本地的工作區)</h4>\n<ul>\n<li>\n<p><code>git log --oneline</code></p>\n<p>查看摘要版的版本紀錄</p>\n</li>\n<li>\n<p><code>git reset b339b8d^</code> (編號需自行更換)\r\n恢復到 b339b8d 的上一個版本(但 code 還在)</p>\n</li>\n</ul>\n<h4 id=\"狀況二你把程式改壞了你想要真的整個還原\">狀況二：你把程式改壞了(你想要真的整個還原)</h4>\n<ul>\n<li>\n<p><code>git reset --hard HEAD</code></p>\n<p>恢復到最新提交版本</p>\n</li>\n<li>\n<p><code>git reset --hard HEAD~1</code>\r\n恢復到上一個提交版本(要退回到更前面的版本以此類推: ~2, ~3, ~4…)</p>\n</li>\n</ul>\n<h3 id=\"多人協作\"><strong>多人協作</strong></h3>\n<ol>\n<li>\n<p><code>git checkout -b [branch 名稱]</code></p>\n<p>新開一個分支，並切換到該分支</p>\n<p>分開寫法：</p>\n<ol>\n<li>\n<p><code>git branch [branch 名稱]</code></p>\n<p>新開一個 branch</p>\n</li>\n<li>\n<p><code>git checkout [branch 名稱]</code></p>\n<p>切換到 branch</p>\n</li>\n</ol>\n</li>\n<li>\n<p>(寫 code…基本流程步驟 3 &#x26; 4 循環)</p>\n</li>\n<li>\n<p><code>git push origin [branch 名稱]</code></p>\n<p>推到 GitHub</p>\n</li>\n<li>\n<p>到自己的 repo 去，並撰寫 &#x26; 發起 PR (Pull Request)</p>\n</li>\n<li>\n<p>把 PR 的連結複製起來，交給你的好夥伴(像是主管、同事等)</p>\n</li>\n<li>\n<p>(等你的好夥伴改完並且 merge 以後) <code>git checkout main</code></p>\n<p>切換到 main</p>\n</li>\n<li>\n<p><code>git pull origin main</code></p>\n<p>把最新的改動拉下來</p>\n<p>分開寫法</p>\n<ol>\n<li>\n<p><code>git fetch origin</code></p>\n<p>抓取遠端更新</p>\n</li>\n<li>\n<p><code>git merge origin/main</code></p>\n<p>合併遠端更新</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>每開發或更新完一個功能，在想要發起 PR 前，最好也都要先執行一次步驟 6 &#x26; 7，然後將最新的 main 合併進準備要發 PR 的分支，此時若有衝突發生，先在本地端解掉再發 PR 會是比較好的方式。</p>\n<p>多人協作和自己寫程式最大的差異之一就是需要解衝突，這方面還需要再有更多經驗。</p>\n<h3 id=\"補充review-別人的-pr\"><strong>補充：review 別人的 PR</strong></h3>\n<p>若想要在本地端 review 可使用步驟 1 + 2：</p>\n<ol>\n<li>\n<p><code>git fetch origin</code></p>\n<p>抓取遠端更新</p>\n</li>\n<li>\n<p><code>git checkout [branch 名稱]</code></p>\n<p>切換到 branch</p>\n</li>\n<li>\n<p>(檢查 OK 後要合併進主幹) <code>git checkout main</code></p>\n<p>要先切回主幹</p>\n</li>\n<li>\n<p><code>git merge [branch 名稱]</code></p>\n<p>在主幹上進行合併</p>\n</li>\n<li>\n<p>若沒有衝突就可以順利的合併進主幹，但若有衝突就要先解完衝突才可合併進去</p>\n<ul>\n<li>\n<p>如何減少需要解衝突的情況？</p>\n<ol>\n<li>分配工作的學問</li>\n<li>先將最新的 main 合併進準備要發 PR 的分支，再發 PR</li>\n</ol>\n</li>\n<li>\n<p>下次有協作機會想要討論的議題：若有衝突，應該由 review 的人 merge，還是發 PR 的人 merge？</p>\n<p>照理來說是 review 的人檢查 OK 後直接 merge 進主幹，但如果遇到有衝突的情況，其實發 PR 的人才是比較了解 code 的人 (因為 code 是他寫的)，這樣是否應該由發 PR 的人去解衝突？</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"其他小知識\"><strong>其他小知識</strong></h3>\n<p>(我是參考 <a href=\"https://github.com/Lidemy/mentor-program-5th/tree/master/examples/week1\">mentor-program-5th/examples/week1</a>)</p>\n<ul>\n<li>\n<p>做版本控制時，聰明的 Git 真正儲存的是「檔案的差異」，並不會每開一個 branch 就開一個資料夾，也不會每一個 commit 就複製一次檔案。另外，對於每一個檔案，Git 也都有自己的壓縮演算法去壓縮，所以比你的檔案還小是正常的。</p>\n</li>\n<li>\n<p>main/master 就只是「預設的 branch」，或者通常是最主要的 branch，但這並不代表它是「最新的 branch」。舉例來說，你也可以切出一條 branch 叫做「test」，然後一直往 test 加東西，但是從來都不合併回 main/master，那 test 就是在你專案裡的最新的 branch。所以 master 就只是一條預設的 branch 而已，最新的東西不一定在上面。</p>\n</li>\n<li>\n<p>發 PR 時，如果有東西你想改，其實你可以自己在電腦上改完以後 commit 再 push，GitHub 上的 PR 就會自動更新了，你什麼都不用做，更不用把 PR 關掉再開起來。因為 PR 的主體是「branch」，所以 branch 更新了，PR 的內容自然也會一起更新。</p>\n</li>\n</ul>\n<h3 id=\"其他指令\"><strong>其他指令</strong></h3>\n<ul>\n<li>\n<p><code>git clone 網址</code></p>\n<p>複製 GitHub 的專案到本機端</p>\n</li>\n<li>\n<p><code>git status</code></p>\n<p>查看狀態</p>\n</li>\n<li>\n<p><code>git log</code></p>\n<p>查看歷史</p>\n</li>\n<li>\n<p><code>git diff</code></p>\n<p>對照差異(如果指令後不加任何參數，會直接把工作中的程式碼拿來和最新版本做比較，此情況直接看 GUI 會更清楚)</p>\n</li>\n<li>\n<p><code>git diff [SHA-1] [SHA-1]</code></p>\n<p>從 A 版本到 B 版本，發生了哪些程式碼變化</p>\n</li>\n<li>\n<p><code>git branch</code></p>\n<p>列出目前所有的分支名稱清單(只會列出本地分支)</p>\n</li>\n<li>\n<p><code>git branch -v</code></p>\n<p>查看各個分支的最新 commit</p>\n</li>\n<li>\n<p><code>git branch --all</code></p>\n<p>列出目前所有的分支名稱清單(包含遠端分支)</p>\n</li>\n<li>\n<p><code>git branch -m [原本的 branch 名稱] [新的名稱]</code></p>\n<p>重新命名分支</p>\n</li>\n<li>\n<p><code>git branch -d [branch 名稱]</code></p>\n<p>(情境)刪除已經 merge 的 branch</p>\n</li>\n<li>\n<p><code>git rebase</code> 流程</p>\n<ol>\n<li>\n<p><code>git checkout [branch名稱]</code></p>\n</li>\n<li>\n<p><code>git rebase main</code></p>\n</li>\n<li>\n<p>若有衝突就要開始解衝突，解完一個衝突，要 <code>git add .</code></p>\n<p>-<code>git rebase --continue</code></p>\n<ul>\n<li>會跳出 vi 編輯器，可直接儲存預設 commit，按 :wq，表儲存 &#x26; 離開</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><code>git rebase squash</code>\r\n把多個 commit 合併成一個 commit (太瑣碎，需要用到時可再參考 <a href=\"https://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit\">【狀況題】把多個 Commit 合併成一個 Commit - 為你自己學 Git | 高見龍</a>)</p>\n</li>\n</ul>",{headings:1199,localImagePaths:1221,remoteImagePaths:1222,frontmatter:1223,imagePaths:1227},[1200,1201,1203,1206,1209,1212,1214,1217,1219],{depth:32,slug:145,text:146},{depth:62,slug:1202,text:1202},"基本流程",{depth:62,slug:1204,text:1205},"補充在還沒上傳到-github-前-commit-完後悔想還原怎麼辦","補充：(在還沒上傳到 GitHub 前) commit 完後悔想還原怎麼辦？",{depth:154,slug:1207,text:1208},"狀況一你不小心-commit-錯了還原後你想要讓修改更新的程式碼仍保留在本地的工作區","狀況一：你不小心 commit 錯了(還原後你想要讓修改/更新的程式碼仍保留在本地的工作區)",{depth:154,slug:1210,text:1211},"狀況二你把程式改壞了你想要真的整個還原","狀況二：你把程式改壞了(你想要真的整個還原)",{depth:62,slug:1213,text:1213},"多人協作",{depth:62,slug:1215,text:1216},"補充review-別人的-pr","補充：review 別人的 PR",{depth:62,slug:1218,text:1218},"其他小知識",{depth:62,slug:1220,text:1220},"其他指令",[],[],{title:1188,subtitle:1189,author:16,imageWebp:290,imagePng:291,imgAlt:288,creationDate:1224,updateDate:1225,tags:1226,featured:136},["Date","2023-06-15T00:00:00.000Z"],["Date","2023-06-15T00:00:00.000Z"],[295],[],{id:470,data:1229,body:1235,filePath:1236,digest:1237,rendered:1238,legacyId:499},{title:1230,subtitle:1231,author:16,imageWebp:475,imagePng:476,imgAlt:473,creationDate:1232,updateDate:1233,tags:1234,featured:23},"Big O 簡介","Big O 是一種用來描述演算法效率的數學符號，主要會關注在輸入的規模、如何成長和最壞的情況。",["Date","2024-11-05T00:00:00.000Z"],["Date","2024-11-05T00:00:00.000Z"],[480],"Big O 是一種用來描述演算法效率的數學符號，但它並不會關注在精確這件事情上（e.g., 真正的執行時間或需要用到多少 CPU），而是關注在輸入的規模、如何成長和最壞的情況。\n\n所以「成長是相對於 input」、「Constants 會被忽略」、 「最壞的情況通常是我們測量的方式」是 Big O Time Complexity 的三大重要概念。\n\n常見的 Big O 表示法包含 O(1)、O(log n)、O(n)、O(n log n)、O(n^2)、O(2^n)、O(n!)，這些表示法主要關注的是演算法在最壞情況下的表現，因此能夠幫助我們在設計和選擇演算法時進行有效的比較和判斷。\n\n### The common complexities\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/introduction-to-big-o-notation/big-o-complexity.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/introduction-to-big-o-notation/big-o-complexity.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n這也是我們使用 Big O 的原因：通常它會幫助我們決定使用什麼資料結構和演算法。了解他們的表現可以最大程度的幫助我們寫出最好的程式。\n\n## Reference\n\n[Algorithms & Data Structures | Learn Algorithms with TypeScript for Interviews | Frontend Masters](https://frontendmasters.com/courses/algorithms/)","src/content/zh-tw/introduction-to-big-o-notation.md","73007bf0a1258778",{html:1239,metadata:1240},"<p>Big O 是一種用來描述演算法效率的數學符號，但它並不會關注在精確這件事情上（e.g., 真正的執行時間或需要用到多少 CPU），而是關注在輸入的規模、如何成長和最壞的情況。</p>\n<p>所以「成長是相對於 input」、「Constants 會被忽略」、 「最壞的情況通常是我們測量的方式」是 Big O Time Complexity 的三大重要概念。</p>\n<p>常見的 Big O 表示法包含 O(1)、O(log n)、O(n)、O(n log n)、O(n^2)、O(2^n)、O(n!)，這些表示法主要關注的是演算法在最壞情況下的表現，因此能夠幫助我們在設計和選擇演算法時進行有效的比較和判斷。</p>\n<h3 id=\"the-common-complexities\">The common complexities</h3>\n<picture>\n  <source srcset=\"/images/article-contents/webp/introduction-to-big-o-notation/big-o-complexity.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/introduction-to-big-o-notation/big-o-complexity.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>這也是我們使用 Big O 的原因：通常它會幫助我們決定使用什麼資料結構和演算法。了解他們的表現可以最大程度的幫助我們寫出最好的程式。</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://frontendmasters.com/courses/algorithms/\">Algorithms &#x26; Data Structures | Learn Algorithms with TypeScript for Interviews | Frontend Masters</a></p>",{headings:1241,localImagePaths:1244,remoteImagePaths:1245,frontmatter:1246,imagePaths:1250},[1242,1243],{depth:62,slug:489,text:490},{depth:32,slug:33,text:34},[],[],{title:1230,subtitle:1231,author:16,imageWebp:475,imagePng:476,imgAlt:473,creationDate:1247,updateDate:1248,tags:1249,featured:23},["Date","2024-11-05T00:00:00.000Z"],["Date","2024-11-05T00:00:00.000Z"],[480],[],{id:126,data:1252,body:1258,filePath:1259,digest:1260,rendered:1261,legacyId:220},{title:1253,subtitle:1254,author:16,imageWebp:131,imagePng:132,imgAlt:129,creationDate:1255,updateDate:1256,tags:1257,featured:136},"CSS GRID 實作小抄","CSS Grid 是一種強大的二維佈局系統，能夠幫助我們更靈活的控制網頁元素的排列和大小。",["Date","2024-02-11T00:00:00.000Z"],["Date","2024-02-11T00:00:00.000Z"],[53],"CSS Grid 是一種強大的二維佈局系統，能夠幫助我們更靈活的控制網頁元素的排列和大小。\r\n\r\n它允許設計者在行（row）和列（column）上進行精確的控制，進而創建複雜的佈局，讓我們可以不需要依賴於浮動或定位等傳統技術。\r\n\r\n這裡分享我閱讀 [CSS Grid Layout Guide](https://css-tricks.com/snippets/css/complete-guide-grid/) 這篇文章整理的 CSS GRID 實作筆記。\r\n\r\n## Table of Contents\r\n\r\n- [Properties for the Parent (Grid Container)](#properties-for-the-parent-grid-container)\r\n  - [宣告](#宣告)\r\n    - [display](#display)\r\n  - [網格](#網格)\r\n    - [grid-template-columns / grid-template-rows](#grid-template-columns--grid-template-rows)\r\n    - [grid-template-areas](#grid-template-areas)\r\n    - [grid-auto-rows / grid-auto-columns](#grid-auto-rows--grid-auto-columns)\r\n    - [grid-auto-flow](#grid-auto-flow)\r\n  - [容器整體](#容器整體)\r\n    - [align-content](#align-content)\r\n    - [justify-content](#justify-content)\r\n    - [place-content](#place-content)\r\n  - [容器內](#容器內)\r\n    - [align-items](#align-items)\r\n    - [justify-items](#justify-items)\r\n    - [place-items](#place-items)\r\n  - [網格間空隙](#網格間空隙)\r\n    - [row-gap / column-gap](#row-gap--column-gap)\r\n    - [gap](#gap)\r\n- [Properties for the Children (Grid Items)](#properties-for-the-children-grid-items)\r\n  - [grid-column-start / grid-column-end / grid-row-start / grid-row-end](#grid-column-start--grid-column-end--grid-row-start--grid-row-end)\r\n  - [grid-column / grid-row](#grid-column--grid-row)\r\n  - [grid-area](#grid-area)\r\n  - [align-self](#align-self)\r\n  - [justify-self](#justify-self)\r\n  - [place-self](#place-self)\r\n- [Reference](#reference)\r\n\r\n## Properties for the Parent (Grid Container)\r\n\r\n### **宣告**\r\n\r\n#### **display**\r\n\r\n- 宣告我要用 grid\r\n\r\n<!-- ```css\r\n.container {\r\n  display: grid | inline-grid;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/display.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **網格**\r\n\r\n#### **grid-template-columns / grid-template-rows**\r\n\r\n- 網格邊線長度 & 交接點名稱\r\n- 可直接寫寬 / 高 數字，亦可加入 \\[自行取名\\]，幫網格切線取名\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\r\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n- 同一條網格切線可以有多個名字\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n- 可以用 repeat() 簡化內容\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: repeat(3, 20px [col-start]);\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **grid-template-areas**\r\n\r\n- 網格區塊配置（要搭配 grid-area）\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-area: header;\r\n}\r\n.item-b {\r\n  grid-area: main;\r\n}\r\n.item-c {\r\n  grid-area: sidebar;\r\n}\r\n.item-d {\r\n  grid-area: footer;\r\n}\r\n\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 50px 50px 50px 50px;\r\n  grid-template-rows: auto;\r\n  grid-template-areas:\r\n    \"header header header header\"\r\n    \"main main . sidebar\"\r\n    \"footer footer footer footer\";\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **grid-auto-rows / grid-auto-columns**\r\n\r\n- 隱形網格邊線長度\r\n- 指定任何自動生成的隱形網格邊線長度，我們可以根據以下流程說明思考 grid-auto-rows / grid-auto-columns 是如何被創建：\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-rows: 90px 90px;\r\n  grid-template-columns: 60px 60px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-column: 1 / 2;\r\n  grid-row: 2 / 3;\r\n}\r\n.item-b {\r\n  grid-column: 5 / 6;\r\n  grid-row: 2 / 3;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-auto-columns: 60px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **grid-auto-flow**\r\n\r\n- 未定位 item 排列流向\r\n- 如果我們有未在網格上明確定位的 item，則自動佈局算法會自動將這些項目放置在網格上，而此屬性是用於控制自動佈局算法的工作方式，它會決定未定位 item 排列的流向。\r\n\r\n以下舉例說明：\r\n\r\n<!-- ```css\r\n<section class=\"container\">\r\n  <div class=\"item-a\">item-a</div>\r\n  <div class=\"item-b\">item-b</div>\r\n  <div class=\"item-c\">item-c</div>\r\n  <div class=\"item-d\">item-d</div>\r\n  <div class=\"item-e\">item-e</div>\r\n</section>\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n我們定義了一個具有五列和兩行的網格，並且將 grid-auto-flow 設置為 row（這也是預設值）：\r\n\r\n<!-- ```css\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 60px 60px 60px 60px 60px;\r\n  grid-template-rows: 30px 30px;\r\n  grid-auto-flow: row;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n在將 items 放置到網格上時，我們只為其中兩個 items 指定了位置：\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-column: 1;\r\n  grid-row: 1 / 3;\r\n}\r\n.item-e {\r\n  grid-column: 5;\r\n  grid-row: 1 / 3;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n因為我們將 grid-auto-flow 設置為 row，所以網格將如下所示：\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n如果我們改成將 grid-auto-flow 設置為 column，則 item-b、item-c 和 item-d 將沿著列向下排列：\r\n\r\n<!-- ```css\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 60px 60px 60px 60px 60px;\r\n  grid-template-rows: 30px 30px;\r\n  grid-auto-flow: column;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(5).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(6).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **容器整體**\r\n\r\n#### **align-content**\r\n\r\n- 容器整體的垂直對齊方式\r\n\r\n<!-- ```css\r\n.container {\r\n  align-content: start | end | center | stretch | space-around | space-between | space-evenly;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-content**\r\n\r\n- 容器整體的水平對齊方式\r\n\r\n<!-- ```css\r\n.container {\r\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **place-content**\r\n\r\n- 容器整體的垂直＋水平對齊方式\r\n- 用法: place-content: align-content justify-content;，也可以只設一個數字，代表 align-content = justify-content\r\n\r\n<!-- ```css\r\n.center {\r\n  display: grid;\r\n  place-content: center;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-content.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **容器內**\r\n\r\n#### **align-items**\r\n\r\n- 容器內每個網格內容的垂直對齊方式\r\n\r\n<!-- ```css\r\n.container {\r\n  align-items: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-items**\r\n\r\n- 容器內每個網格內容的水平對齊方式\r\n\r\n<!-- ```css\r\n.container {\r\n  justify-items: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **place-items**\r\n\r\n- 容器內每個網格內容的垂直＋水平對齊方式\r\n- 用法: place-items: align-items justify-items;，也可以只設一個數字，代表 align-items = justify-items\r\n\r\n<!-- ```css\r\n.center {\r\n  display: grid;\r\n  place-items: center;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-items.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n### **網格間空隙**\r\n\r\n#### **row-gap / column-gap**\r\n\r\n- 網格間的空隙\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: 100px 50px 100px;\r\n  grid-template-rows: 80px auto 80px;\r\n  row-gap: 15px;\r\n  column-gap: 10px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **gap**\r\n\r\n- 網格間的空隙\r\n- 用法: gap: row-gap column-gap;，也可以只設一個數字，代表 row-gap = column-gap\r\n\r\n<!-- ```css\r\n.container {\r\n  grid-template-columns: 100px 50px 100px;\r\n  grid-template-rows: 80px auto 80px;\r\n  gap: 15px 10px;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Properties for the Children(Grid Items)\r\n\r\n#### **grid-column-start / grid-column-end / grid-row-start / grid-row-end**\r\n\r\n- 決定 item 的格子從哪開始、到哪結束\r\n\r\n<!-- ```css\r\n.item-a {\r\n  grid-column-start: 2;\r\n  grid-column-end: five;\r\n  grid-row-start: row1-start;\r\n  grid-row-end: 3;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```css\r\n.item-b {\r\n  grid-column-start: 1;\r\n  grid-column-end: span col4-start;\r\n  grid-row-start: 2;\r\n  grid-row-end: span 2;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n- 注意事項\r\n  - 如果沒有宣告 grid-column-end 或 grid-row-end，則該項目預設會跨越 1 個網格軌道 (track)。\r\n  - 項目之間可以互相重疊，可以使用 z-index 來控制它們的堆疊順序。\r\n\r\n#### **grid-column / grid-row**\r\n\r\n- 決定 item 的格子從哪開始、到哪結束\r\n\r\n<!-- ```css\r\n.item-c {\r\n  grid-column: 3 / span 2;\r\n  grid-row: third-line / 4;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n- 注意事項\r\n  - 如果未宣告終止線的數值，該項目將預設跨越 1 個軌道 (track)。\r\n\r\n#### **grid-area**\r\n\r\n- 決定 item 的格子從哪開始、到哪結束\r\n\r\n<!-- ```css\r\n.item {\r\n  grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n- 作為為項目指定名稱的一種方式：\r\n\r\n<!-- ```css\r\n.item-d {\r\n  grid-area: header;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n- 作為簡寫（short-shorthand）來同時設定 grid-row-start + grid-column-start + grid-row-end + grid-column-end：\r\n\r\n<!-- ```css\r\n.item-d {\r\n  grid-area: 1 / col4-start / last-line / 6;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(3).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(4).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(5).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **align-self**\r\n\r\n- 此網格內容的垂直對齊方式\r\n\r\n<!-- ```css\r\n.item {\r\n  align-self: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **justify-self**\r\n\r\n- 此網格內容的水平對齊方式\r\n\r\n<!-- ```css\r\n.item {\r\n  justify-self: start | end | center | stretch;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-self.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n#### **place-self**\r\n\r\n- 此網格內容的垂直＋水平對齊方式\r\n- 用法: place-self: align-self justify-self;，也可以只設一個數字，代表 align-self = justify-self\r\n\r\n<!-- ```css\r\n.item-a {\r\n  place-self: center;\r\n}\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(1).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(2).webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\r\n</picture>\r\n\r\n## Reference\r\n\r\n[CSS Grid Layout Guide | CSS-Tricks](https://css-tricks.com/snippets/css/complete-guide-grid/)","src/content/zh-tw/css-grid-implementation-cheatsheet.md","4670268a962c54bd",{html:1262,metadata:1263},"<p>CSS Grid 是一種強大的二維佈局系統，能夠幫助我們更靈活的控制網頁元素的排列和大小。</p>\n<p>它允許設計者在行（row）和列（column）上進行精確的控制，進而創建複雜的佈局，讓我們可以不需要依賴於浮動或定位等傳統技術。</p>\n<p>這裡分享我閱讀 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS Grid Layout Guide</a> 這篇文章整理的 CSS GRID 實作筆記。</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#properties-for-the-parent-grid-container\">Properties for the Parent (Grid Container)</a>\n<ul>\n<li><a href=\"#%E5%AE%A3%E5%91%8A\">宣告</a>\n<ul>\n<li><a href=\"#display\">display</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%B6%B2%E6%A0%BC\">網格</a>\n<ul>\n<li><a href=\"#grid-template-columns--grid-template-rows\">grid-template-columns / grid-template-rows</a></li>\n<li><a href=\"#grid-template-areas\">grid-template-areas</a></li>\n<li><a href=\"#grid-auto-rows--grid-auto-columns\">grid-auto-rows / grid-auto-columns</a></li>\n<li><a href=\"#grid-auto-flow\">grid-auto-flow</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%B9%E5%99%A8%E6%95%B4%E9%AB%94\">容器整體</a>\n<ul>\n<li><a href=\"#align-content\">align-content</a></li>\n<li><a href=\"#justify-content\">justify-content</a></li>\n<li><a href=\"#place-content\">place-content</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%B9%E5%99%A8%E5%85%A7\">容器內</a>\n<ul>\n<li><a href=\"#align-items\">align-items</a></li>\n<li><a href=\"#justify-items\">justify-items</a></li>\n<li><a href=\"#place-items\">place-items</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%B6%B2%E6%A0%BC%E9%96%93%E7%A9%BA%E9%9A%99\">網格間空隙</a>\n<ul>\n<li><a href=\"#row-gap--column-gap\">row-gap / column-gap</a></li>\n<li><a href=\"#gap\">gap</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#properties-for-the-children-grid-items\">Properties for the Children (Grid Items)</a>\n<ul>\n<li><a href=\"#grid-column-start--grid-column-end--grid-row-start--grid-row-end\">grid-column-start / grid-column-end / grid-row-start / grid-row-end</a></li>\n<li><a href=\"#grid-column--grid-row\">grid-column / grid-row</a></li>\n<li><a href=\"#grid-area\">grid-area</a></li>\n<li><a href=\"#align-self\">align-self</a></li>\n<li><a href=\"#justify-self\">justify-self</a></li>\n<li><a href=\"#place-self\">place-self</a></li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"properties-for-the-parent-grid-container\">Properties for the Parent (Grid Container)</h2>\n<h3 id=\"宣告\"><strong>宣告</strong></h3>\n<h4 id=\"display\"><strong>display</strong></h4>\n<ul>\n<li>宣告我要用 grid</li>\n</ul>\n<!-- ```css\n.container {\n  display: grid | inline-grid;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/display.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/display.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"網格\"><strong>網格</strong></h3>\n<h4 id=\"grid-template-columns--grid-template-rows\"><strong>grid-template-columns / grid-template-rows</strong></h4>\n<ul>\n<li>網格邊線長度 &#x26; 交接點名稱</li>\n<li>可直接寫寬 / 高 數字，亦可加入 [自行取名]，幫網格切線取名</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<ul>\n<li>同一條網格切線可以有多個名字</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<ul>\n<li>可以用 repeat() 簡化內容</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: repeat(3, 20px [col-start]);\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-columns+grid-template-rows(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h4 id=\"grid-template-areas\"><strong>grid-template-areas</strong></h4>\n<ul>\n<li>網格區塊配置（要搭配 grid-area）</li>\n</ul>\n<!-- ```css\n.item-a {\n  grid-area: header;\n}\n.item-b {\n  grid-area: main;\n}\n.item-c {\n  grid-area: sidebar;\n}\n.item-d {\n  grid-area: footer;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"header header header header\"\n    \"main main . sidebar\"\n    \"footer footer footer footer\";\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-template-areas(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-template-areas(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"grid-auto-rows--grid-auto-columns\"><strong>grid-auto-rows / grid-auto-columns</strong></h4>\n<ul>\n<li>隱形網格邊線長度</li>\n<li>指定任何自動生成的隱形網格邊線長度，我們可以根據以下流程說明思考 grid-auto-rows / grid-auto-columns 是如何被創建：</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-rows: 90px 90px;\n  grid-template-columns: 60px 60px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<!-- ```css\n.item-a {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n}\n.item-b {\n  grid-column: 5 / 6;\n  grid-row: 2 / 3;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<!-- ```css\n.container {\n  grid-auto-columns: 60px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-rows+grid-auto-columns(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"grid-auto-flow\"><strong>grid-auto-flow</strong></h4>\n<ul>\n<li>未定位 item 排列流向</li>\n<li>如果我們有未在網格上明確定位的 item，則自動佈局算法會自動將這些項目放置在網格上，而此屬性是用於控制自動佈局算法的工作方式，它會決定未定位 item 排列的流向。</li>\n</ul>\n<p>以下舉例說明：</p>\n<!-- ```css\n<section class=\"container\">\n  <div class=\"item-a\">item-a</div>\n  <div class=\"item-b\">item-b</div>\n  <div class=\"item-c\">item-c</div>\n  <div class=\"item-d\">item-d</div>\n  <div class=\"item-e\">item-e</div>\n</section>\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>我們定義了一個具有五列和兩行的網格，並且將 grid-auto-flow 設置為 row（這也是預設值）：</p>\n<!-- ```css\n.container {\n  display: grid;\n  grid-template-columns: 60px 60px 60px 60px 60px;\n  grid-template-rows: 30px 30px;\n  grid-auto-flow: row;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>在將 items 放置到網格上時，我們只為其中兩個 items 指定了位置：</p>\n<!-- ```css\n.item-a {\n  grid-column: 1;\n  grid-row: 1 / 3;\n}\n.item-e {\n  grid-column: 5;\n  grid-row: 1 / 3;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>因為我們將 grid-auto-flow 設置為 row，所以網格將如下所示：</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<p>如果我們改成將 grid-auto-flow 設置為 column，則 item-b、item-c 和 item-d 將沿著列向下排列：</p>\n<!-- ```css\n.container {\n  display: grid;\n  grid-template-columns: 60px 60px 60px 60px 60px;\n  grid-template-rows: 30px 30px;\n  grid-auto-flow: column;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(5).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-auto-flow(6).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-auto-flow(6).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h3 id=\"容器整體\"><strong>容器整體</strong></h3>\n<h4 id=\"align-content\"><strong>align-content</strong></h4>\n<ul>\n<li>容器整體的垂直對齊方式</li>\n</ul>\n<!-- ```css\n.container {\n  align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-content\"><strong>justify-content</strong></h4>\n<ul>\n<li>容器整體的水平對齊方式</li>\n</ul>\n<!-- ```css\n.container {\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"place-content\"><strong>place-content</strong></h4>\n<ul>\n<li>容器整體的垂直＋水平對齊方式</li>\n<li>用法: place-content: align-content justify-content;，也可以只設一個數字，代表 align-content = justify-content</li>\n</ul>\n<!-- ```css\n.center {\n  display: grid;\n  place-content: center;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-content.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-content.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"容器內\"><strong>容器內</strong></h3>\n<h4 id=\"align-items\"><strong>align-items</strong></h4>\n<ul>\n<li>容器內每個網格內容的垂直對齊方式</li>\n</ul>\n<!-- ```css\n.container {\n  align-items: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-items\"><strong>justify-items</strong></h4>\n<ul>\n<li>容器內每個網格內容的水平對齊方式</li>\n</ul>\n<!-- ```css\n.container {\n  justify-items: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"place-items\"><strong>place-items</strong></h4>\n<ul>\n<li>容器內每個網格內容的垂直＋水平對齊方式</li>\n<li>用法: place-items: align-items justify-items;，也可以只設一個數字，代表 align-items = justify-items</li>\n</ul>\n<!-- ```css\n.center {\n  display: grid;\n  place-items: center;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-items.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-items.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"網格間空隙\"><strong>網格間空隙</strong></h3>\n<h4 id=\"row-gap--column-gap\"><strong>row-gap / column-gap</strong></h4>\n<ul>\n<li>網格間的空隙</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: 100px 50px 100px;\n  grid-template-rows: 80px auto 80px;\n  row-gap: 15px;\n  column-gap: 10px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/row-gap+column-gap(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/row-gap+column-gap(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"gap\"><strong>gap</strong></h4>\n<ul>\n<li>網格間的空隙</li>\n<li>用法: gap: row-gap column-gap;，也可以只設一個數字，代表 row-gap = column-gap</li>\n</ul>\n<!-- ```css\n.container {\n  grid-template-columns: 100px 50px 100px;\n  grid-template-rows: 80px auto 80px;\n  gap: 15px 10px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/gap.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/gap.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"properties-for-the-childrengrid-items\">Properties for the Children(Grid Items)</h2>\n<h4 id=\"grid-column-start--grid-column-end--grid-row-start--grid-row-end\"><strong>grid-column-start / grid-column-end / grid-row-start / grid-row-end</strong></h4>\n<ul>\n<li>決定 item 的格子從哪開始、到哪結束</li>\n</ul>\n<!-- ```css\n.item-a {\n  grid-column-start: 2;\n  grid-column-end: five;\n  grid-row-start: row1-start;\n  grid-row-end: 3;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<!-- ```css\n.item-b {\n  grid-column-start: 1;\n  grid-column-end: span col4-start;\n  grid-row-start: 2;\n  grid-row-end: span 2;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column-start+grid-column-end+grid-row-start+grid-row-end(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<ul>\n<li>注意事項\n<ul>\n<li>如果沒有宣告 grid-column-end 或 grid-row-end，則該項目預設會跨越 1 個網格軌道 (track)。</li>\n<li>項目之間可以互相重疊，可以使用 z-index 來控制它們的堆疊順序。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"grid-column--grid-row\"><strong>grid-column / grid-row</strong></h4>\n<ul>\n<li>決定 item 的格子從哪開始、到哪結束</li>\n</ul>\n<!-- ```css\n.item-c {\n  grid-column: 3 / span 2;\n  grid-row: third-line / 4;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-column+grid-row(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-column+grid-row(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<ul>\n<li>注意事項\n<ul>\n<li>如果未宣告終止線的數值，該項目將預設跨越 1 個軌道 (track)。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"grid-area\"><strong>grid-area</strong></h4>\n<ul>\n<li>決定 item 的格子從哪開始、到哪結束</li>\n</ul>\n<!-- ```css\n.item {\n  grid-area: <name> | <row-start> / <column-start> / <row-end> / <column-end>;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<ul>\n<li>作為為項目指定名稱的一種方式：</li>\n</ul>\n<!-- ```css\n.item-d {\n  grid-area: header;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<ul>\n<li>作為簡寫（short-shorthand）來同時設定 grid-row-start + grid-column-start + grid-row-end + grid-column-end：</li>\n</ul>\n<!-- ```css\n.item-d {\n  grid-area: 1 / col4-start / last-line / 6;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(3).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(3).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(4).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(4).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/grid-area(5).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/grid-area(5).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"align-self\"><strong>align-self</strong></h4>\n<ul>\n<li>此網格內容的垂直對齊方式</li>\n</ul>\n<!-- ```css\n.item {\n  align-self: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/align-self.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/align-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"justify-self\"><strong>justify-self</strong></h4>\n<ul>\n<li>此網格內容的水平對齊方式</li>\n</ul>\n<!-- ```css\n.item {\n  justify-self: start | end | center | stretch;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/justify-self.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/justify-self.png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h4 id=\"place-self\"><strong>place-self</strong></h4>\n<ul>\n<li>此網格內容的垂直＋水平對齊方式</li>\n<li>用法: place-self: align-self justify-self;，也可以只設一個數字，代表 align-self = justify-self</li>\n</ul>\n<!-- ```css\n.item-a {\n  place-self: center;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(1).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(1).png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<picture>\n  <source srcset=\"/images/article-contents/webp/css-grid-implementation-cheatsheet/place-self(2).webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/css-grid-implementation-cheatsheet/place-self(2).png\" alt=\"\" loading=\"lazy\" style=\"width: 70%; margin: 0 auto; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS Grid Layout Guide | CSS-Tricks</a></p>",{headings:1264,localImagePaths:1297,remoteImagePaths:1298,frontmatter:1299,imagePaths:1303},[1265,1266,1267,1268,1269,1271,1272,1273,1274,1275,1277,1278,1279,1280,1282,1283,1284,1285,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296],{depth:32,slug:145,text:146},{depth:32,slug:148,text:149},{depth:62,slug:1045,text:1045},{depth:154,slug:155,text:155},{depth:62,slug:1270,text:1270},"網格",{depth:154,slug:160,text:161},{depth:154,slug:163,text:163},{depth:154,slug:165,text:166},{depth:154,slug:168,text:168},{depth:62,slug:1276,text:1276},"容器整體",{depth:154,slug:173,text:173},{depth:154,slug:175,text:175},{depth:154,slug:177,text:177},{depth:62,slug:1281,text:1281},"容器內",{depth:154,slug:182,text:182},{depth:154,slug:184,text:184},{depth:154,slug:186,text:186},{depth:62,slug:1286,text:1286},"網格間空隙",{depth:154,slug:191,text:192},{depth:154,slug:194,text:194},{depth:32,slug:196,text:197},{depth:154,slug:199,text:200},{depth:154,slug:202,text:203},{depth:154,slug:205,text:205},{depth:154,slug:207,text:207},{depth:154,slug:209,text:209},{depth:154,slug:211,text:211},{depth:32,slug:33,text:34},[],[],{title:1253,subtitle:1254,author:16,imageWebp:131,imagePng:132,imgAlt:129,creationDate:1300,updateDate:1301,tags:1302,featured:136},["Date","2024-02-11T00:00:00.000Z"],["Date","2024-02-11T00:00:00.000Z"],[53],[],{id:336,data:1305,body:1311,filePath:1312,digest:1313,rendered:1314,legacyId:361},{title:1306,subtitle:1307,author:16,imageWebp:341,imagePng:342,imgAlt:339,creationDate:1308,updateDate:1309,tags:1310,featured:23},"JavaScript 的作用域(Scope)與作用域鏈(Scope Chain)","作用域就像是範圍的概念，可以分成全域、函式作用域和塊級作用域。",["Date","2024-12-01T00:00:00.000Z"],["Date","2024-12-01T00:00:00.000Z"],[22],"作用域就像是範圍的概念，所以一個值（value）或者一個表達式（expression）可以被使用和找到的範圍，我們就叫做作用域。\n\n在 JavaScript 中，作用域可以分成全域、函式作用域和塊級作用域。\n\n- 全域是指當 JavaScript 程式碼被執行一開始時，就會創建一個全域執行環境，被定義在函式或塊級以外的變數，就會屬於全局作用域，這些變數也被稱之為全域變數 (Global variable)，在程式碼中的任何地方都能被使用到。\n\n- 函式作用域是指由函式所創建的作用域。\n\n- 塊級作用域是 ES6 後才出現的，它會被定義在一個中括號的塊級中，但要注意的是，只有  let  和  const  定義的變數會屬於塊級作用域，如果是  var  定義的變數會是只有函式作用域。\n\n作用域鏈指的是當 JavaScript 使用每一個變數的時候，會先嘗試在當前作用域中尋找該變數，若在當前的作用域找不到該變數，會一直往父層作用域尋找，直到全局作用域還是沒找到，就會直接報錯，而這一層一層的關係，就是作用域鏈。\n\n作用域鏈(Scope Chain)可以透過以下程式碼來了解：\n\n<!-- ```js\nlet a = 100;\nfunction find() {\n  console.log(a); // 100\n}\nfind();\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/javascript-scope-and-scope-chain-explained/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/javascript-scope-and-scope-chain-explained/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[Javascript 的作用域 (Scope) 與作用域鏈 (Scope Chain) 是什麼?｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/what-is-scope-and-scope-chain)","src/content/zh-tw/javascript-scope-and-scope-chain-explained.md","f2c293af6decf4e6",{html:1315,metadata:1316},"<p>作用域就像是範圍的概念，所以一個值（value）或者一個表達式（expression）可以被使用和找到的範圍，我們就叫做作用域。</p>\n<p>在 JavaScript 中，作用域可以分成全域、函式作用域和塊級作用域。</p>\n<ul>\n<li>\n<p>全域是指當 JavaScript 程式碼被執行一開始時，就會創建一個全域執行環境，被定義在函式或塊級以外的變數，就會屬於全局作用域，這些變數也被稱之為全域變數 (Global variable)，在程式碼中的任何地方都能被使用到。</p>\n</li>\n<li>\n<p>函式作用域是指由函式所創建的作用域。</p>\n</li>\n<li>\n<p>塊級作用域是 ES6 後才出現的，它會被定義在一個中括號的塊級中，但要注意的是，只有  let  和  const  定義的變數會屬於塊級作用域，如果是  var  定義的變數會是只有函式作用域。</p>\n</li>\n</ul>\n<p>作用域鏈指的是當 JavaScript 使用每一個變數的時候，會先嘗試在當前作用域中尋找該變數，若在當前的作用域找不到該變數，會一直往父層作用域尋找，直到全局作用域還是沒找到，就會直接報錯，而這一層一層的關係，就是作用域鏈。</p>\n<p>作用域鏈(Scope Chain)可以透過以下程式碼來了解：</p>\n<!-- ```js\nlet a = 100;\nfunction find() {\n  console.log(a); // 100\n}\nfind();\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/javascript-scope-and-scope-chain-explained/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/javascript-scope-and-scope-chain-explained/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-scope-and-scope-chain\">Javascript 的作用域 (Scope) 與作用域鏈 (Scope Chain) 是什麼?｜ ExplainThis</a></p>",{headings:1317,localImagePaths:1319,remoteImagePaths:1320,frontmatter:1321,imagePaths:1325},[1318],{depth:32,slug:33,text:34},[],[],{title:1306,subtitle:1307,author:16,imageWebp:341,imagePng:342,imgAlt:339,creationDate:1322,updateDate:1323,tags:1324,featured:23},["Date","2024-12-01T00:00:00.000Z"],["Date","2024-12-01T00:00:00.000Z"],[22],[],{id:415,data:1327,body:1333,filePath:1334,digest:1335,rendered:1336,legacyId:469},{title:1328,subtitle:1329,author:16,imageWebp:420,imagePng:421,imgAlt:418,creationDate:1330,updateDate:1331,tags:1332,featured:136},"ChatGPT Prompt Engineering for Developers 課程重點筆記","ChatGPT Prompt Engineering for Developers 是生成式 AI 出現後 DeepLearning.AI 推出的一堂很有名的課程，是一個適合給所有人看的使用 AI Prompt 指南。",["Date","2023-11-05T00:00:00.000Z"],["Date","2023-11-05T00:00:00.000Z"],[425],"ChatGPT Prompt Engineering for Developers 是生成式 AI 出現後 [DeepLearning.AI](DeepLearning.AI) 推出的一堂很有名的課程，雖然課程名稱叫做 ChatGPT Prompt Engineering for Developers，但其實更像是給所有人看的使用 AI Prompt 指南。\r\n\r\n在這裡分享我的重點筆記如下：\r\n\r\n## Table of Contents\r\n\r\n- [Introduction](#introduction)\r\n- [Prompting Principles](#prompting-principles)\r\n  - [原則一：撰寫清晰且具體的指令](#原則一撰寫清晰且具體的指令)\r\n  - [原則二：給模型時間「思考」](#原則二給模型時間思考)\r\n- [實際應用](#實際應用)\r\n  - [摘要/總結](#摘要總結)\r\n  - [推論](#推論)\r\n  - [轉換](#轉換)\r\n  - [擴展](#擴展)\r\n- [Reference](#Reference)\r\n\r\n## Introduction\r\n\r\nLLM（大型語言模型）可以分為兩種類型：基礎型 LLM（Base LLM）與指令調校型 LLM（Instruction Tuned LLM）。\r\n\r\n- 基礎型 LLM 會根據文字訓練資料來預測下一個字詞。\r\n\r\n- 指令調校型 LLM 則試圖依照指令進行操作。\r\n\r\n## Prompting Principles\r\n\r\n### 原則一：撰寫清晰且具體的指令\r\n\r\n- **使用分隔符號（e.g., < >）明確標示輸入中不同的部分。**\r\n\r\n  e.g.,\r\n\r\n  Summarize the text delimited by < > into a single sentence.\r\n\r\n- **要求結構化的輸出（e.g., HTML、JSON 格式）。**\r\n\r\n  e.g.,\r\n\r\n  Generate a list of three made-up book titles along with their authors and genres.\r\n\r\n  Provide them in JSON format with the following keys:\r\n\r\n  book_id, title, author, genre.\r\n\r\n- **要求模型檢查是否符合條件（確認完成任務所需的假設）。**\r\n\r\n  e.g.,\r\n\r\n  If it contains a sequence of instructions, re-write those instructions in the following format: Step 1 / Step 2 / Step N… If the text does not contain a sequence of instructions, then simply write \"No steps provided.\"\r\n\r\n  You will be provided with text delimited by triple quotes.\r\n  If it contains a sequence of instructions,\r\n  re-write those instructions in the following format:\r\n\r\n  Step 1 - …\r\n  Step 2 - …\r\n  …\r\n  Step N - …\r\n\r\n  If the text does not contain a sequence of instructions,\r\n  then simply write \"No steps provided.\"\r\n\r\n  {text_1}\r\n\r\n- **提供完成任務的成功範例，然後要求模型執行相同任務。**\r\n\r\n  e.g.,\r\n\r\n  Your task is to answer in a consistent style....\r\n\r\n### 原則二：給模型時間「思考」\r\n\r\n- **指定完成任務所需的步驟。**\r\n\r\n  e.g.,  \r\n  Perform the following actions: 1…/2…/3…/4…Separate your answers with line breaks.\r\n\r\n  Perform the following actions:\r\n\r\n  1 - Summarize the following text delimited by triple backticks with 1 sentence.\r\n\r\n  2 - Translate the summary into French.\r\n\r\n  3 - List each name in the French summary.\r\n\r\n  4 - Output a json object that contains the following keys: french_summary, num_names.\r\n\r\n  Separate your answers with line breaks.\r\n\r\n  Text:\r\n  {text}\r\n\r\n  e.g., Perform the following actions: 1…/2…/3…/4…Use the following format: ...\r\n\r\n  Your task is to perform the following actions:\r\n\r\n  1 - Summarize the following text delimited by <> with 1 sentence.\r\n\r\n  2 - Translate the summary into French.\r\n\r\n  3 - List each name in the French summary.\r\n\r\n  4 - Output a json object that contains the following keys: french_summary, num_names.\r\n\r\n  Use the following format:\r\n\r\n  Text: text to summarize\r\n\r\n  Summary: summary\r\n\r\n  Translation: summary translation\r\n\r\n  Names: list of names in summary\r\n\r\n  Output JSON: json with summary and num_names\r\n\r\n  Text:\r\n  {text}\r\n\r\n- **指示模型在下結論之前先自行推導出解答。**\r\n\r\n  e.g.,\r\n\r\n  Your task is to determine if the student's solution is correct or not.\r\n  To solve the problem do the following:\r\n\r\n  - First, work out your own solution to the problem including the final total.\r\n\r\n  - Then compare your solution to the student's solution and evaluate if the student's solution is correct or not. Don't decide if the student's solution is correct until you have done the problem yourself.\r\n\r\n  Use the following format:\r\n\r\n  Question:\r\n  question here\r\n\r\n  Student's solution:\r\n  student's solution here\r\n\r\n  Actual solution:\r\n  steps to work out the solution and your solution here\r\n\r\n  Is the student's solution the same as actual solution\r\n  just calculated:\r\n  yes or no\r\n\r\n  Student grade:\r\n  correct or incorrect\r\n\r\n## 實際應用\r\n\r\n### 摘要/總結\r\n\r\n- **設定字數或句數限制的摘要**\r\n\r\n  e.g.,\r\n\r\n  Your task is to generate a short summary of a product review from an ecommerce site.\r\n\r\n  Summarize the review below, delimited by triple backticks, in at most 30 words.\r\n\r\n  Review: {prod_review}\r\n\r\n- **聚焦特定主題的摘要**\r\n\r\n  e.g.,\r\n\r\n  Your task is to generate a short summary of a product review from an ecommerce site to give feedback to the Shipping deparmtment.\r\n\r\n  Summarize the review below, delimited by triple backticks, in at most 30 words, and focusing on any aspects that mention shipping and delivery of the product.\r\n\r\n  Review: {prod_review}\r\n\r\n- **使用「提取」替代「摘要」**\r\n\r\n  e.g.,\r\n\r\n  Your task is to extract relevant information from a product review from an ecommerce site to give feedback to the Shipping department.\r\n\r\n  From the review below, delimited by triple quotes extract the information relevant to shipping and delivery. Limit to 30 words.\r\n  Review: {prod_review}\r\n\r\n### 推論\r\n\r\n- **推論情緒**\r\n\r\n  - **情感判斷（正面/負面）**\r\n\r\n  e.g.,\r\n\r\n  What is the sentiment of the following product review, which is delimited with triple backticks?\r\n\r\n  Give your answer as a single word, either \"positive\" or \"negative\".\r\n\r\n  Review text: {lamp_review}\r\n\r\n  - **識別情緒類型**\r\n\r\n  e.g.,\r\n\r\n  Identify a list of emotions that the writer of the following review is expressing. Include no more than five items in the list.\r\n\r\n  Format your answer as a list of lower-case words separated by commas.\r\n\r\n  Review text: {lamp_review}\r\n\r\n  - **識別憤怒情緒**\r\n\r\n  e.g.,\r\n\r\n  Is the writer of the following review expressing anger?\r\n\r\n  The review is delimited with triple backticks.\r\n\r\n  Give your answer as either yes or no.\r\n\r\n  Review text: {lamp_review}\r\n\r\n- **提取特定資訊**\r\n\r\n  e.g.,\r\n\r\n  Identify the following items from the review text:\r\n\r\n  - Item purchased by reviewer\r\n\r\n  - Company that made the item\r\n\r\n  The review is delimited with triple backticks.\r\n\r\n  Format your response as a JSON object with \"Item\" and \"Brand\" as the keys.\r\n\r\n  If the information isn't present, use \"unknown\" as the value.\r\n\r\n  Make your response as short as possible.\r\n\r\n  Review text: {lamp_review}\r\n\r\n- **推論主題**\r\n\r\n  e.g.,\r\n\r\n  Determine five topics that are being discussed in the following text, which is delimited by triple backticks.\r\n\r\n  Make each item one or two words long.\r\n\r\n  Format your response as a list of items separated by commas.\r\n\r\n  Text sample: {story}\r\n\r\n- **針對特定主題生成新聞提醒**\r\n\r\n  e.g.,\r\n\r\n  Determine whether each item in the following list of topics is a topic in the text below, which is delimited with triple backticks.\r\n\r\n  Give your answer as list with 0 or 1 for each topic.\r\n\r\n  List of topics: {\",\".join(topic_list)}\r\n\r\n  Text sample: {story}\r\n\r\n### 轉換\r\n\r\n- **翻譯**\r\n\r\n  e.g., Translate the following English text to Mandarin in Taiwan: ...\r\n\r\n  e.g., Translate the following text to Mandarin in Taiwan and English pirate: ...\r\n\r\n  e.g., Translate the following text to English in both the formal and informal forms: ...\r\n\r\n  e.g., Tell me which language this is: ...\r\n\r\n- **語氣轉換**\r\n\r\n  e.g., Translate the following from slang to a business letter: ...\r\n\r\n- **格式轉換**\r\n\r\n  e.g., Translate the following python dictionary from JSON to an HTML table with column headers and title: ...\r\n\r\n- **拼寫/文法檢查**\r\n\r\n  e.g.,\r\n\r\n  Proofread and correct the following text and rewrite the corrected version.\r\n\r\n  If you don't find and errors, just say \"No errors found\".\r\n\r\n  <br>\r\n\r\n  e.g.,\r\n\r\n  proofread and correct this review.\r\n\r\n  Make it more compelling.\r\n\r\n  Ensure it follows APA style guide and targets an advanced reader.\r\n\r\n  Output in markdown format.\r\n\r\n### 擴展\r\n\r\n- **回覆信件**\r\n\r\n  e.g.,\r\n\r\n  You are a customer service AI assistant.\r\n\r\n  Your task is to send an email reply to a valued customer.\r\n\r\n  Given the customer email delimited by <>,\r\n\r\n  Generate a reply to thank the customer for their review.\r\n\r\n  If the sentiment is positive or neutral, thank them for their review.\r\n\r\n  If the sentiment is negative, apologize and suggest that they can reach out to customer service.\r\n\r\n  Make sure to use specific details from the review.\r\n\r\n  Write in a concise and professional tone.\r\n\r\n  Sign the email as `AI customer agent`.\r\n\r\n## Reference\r\n\r\n[ChatGPT Prompt Engineering for Developers](https://learn.deeplearning.ai/chatgpt-prompt-eng/lesson/1/introduction)","src/content/zh-tw/key-notes-from-chatgpt-prompt-engineering-for-developers-course.md","648a94a91ec05be7",{html:1337,metadata:1338},"<p>ChatGPT Prompt Engineering for Developers 是生成式 AI 出現後 <a href=\"DeepLearning.AI\">DeepLearning.AI</a> 推出的一堂很有名的課程，雖然課程名稱叫做 ChatGPT Prompt Engineering for Developers，但其實更像是給所有人看的使用 AI Prompt 指南。</p>\n<p>在這裡分享我的重點筆記如下：</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#prompting-principles\">Prompting Principles</a>\n<ul>\n<li><a href=\"#%E5%8E%9F%E5%89%87%E4%B8%80%E6%92%B0%E5%AF%AB%E6%B8%85%E6%99%B0%E4%B8%94%E5%85%B7%E9%AB%94%E7%9A%84%E6%8C%87%E4%BB%A4\">原則一：撰寫清晰且具體的指令</a></li>\n<li><a href=\"#%E5%8E%9F%E5%89%87%E4%BA%8C%E7%B5%A6%E6%A8%A1%E5%9E%8B%E6%99%82%E9%96%93%E6%80%9D%E8%80%83\">原則二：給模型時間「思考」</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8\">實際應用</a>\n<ul>\n<li><a href=\"#%E6%91%98%E8%A6%81%E7%B8%BD%E7%B5%90\">摘要/總結</a></li>\n<li><a href=\"#%E6%8E%A8%E8%AB%96\">推論</a></li>\n<li><a href=\"#%E8%BD%89%E6%8F%9B\">轉換</a></li>\n<li><a href=\"#%E6%93%B4%E5%B1%95\">擴展</a></li>\n</ul>\n</li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ul>\n<h2 id=\"introduction\">Introduction</h2>\n<p>LLM（大型語言模型）可以分為兩種類型：基礎型 LLM（Base LLM）與指令調校型 LLM（Instruction Tuned LLM）。</p>\n<ul>\n<li>\n<p>基礎型 LLM 會根據文字訓練資料來預測下一個字詞。</p>\n</li>\n<li>\n<p>指令調校型 LLM 則試圖依照指令進行操作。</p>\n</li>\n</ul>\n<h2 id=\"prompting-principles\">Prompting Principles</h2>\n<h3 id=\"原則一撰寫清晰且具體的指令\">原則一：撰寫清晰且具體的指令</h3>\n<ul>\n<li>\n<p><strong>使用分隔符號（e.g., &#x3C; >）明確標示輸入中不同的部分。</strong></p>\n<p>e.g.,</p>\n<p>Summarize the text delimited by &#x3C; > into a single sentence.</p>\n</li>\n<li>\n<p><strong>要求結構化的輸出（e.g., HTML、JSON 格式）。</strong></p>\n<p>e.g.,</p>\n<p>Generate a list of three made-up book titles along with their authors and genres.</p>\n<p>Provide them in JSON format with the following keys:</p>\n<p>book_id, title, author, genre.</p>\n</li>\n<li>\n<p><strong>要求模型檢查是否符合條件（確認完成任務所需的假設）。</strong></p>\n<p>e.g.,</p>\n<p>If it contains a sequence of instructions, re-write those instructions in the following format: Step 1 / Step 2 / Step N… If the text does not contain a sequence of instructions, then simply write “No steps provided.”</p>\n<p>You will be provided with text delimited by triple quotes.\r\nIf it contains a sequence of instructions,\r\nre-write those instructions in the following format:</p>\n<p>Step 1 - …\r\nStep 2 - …\r\n…\r\nStep N - …</p>\n<p>If the text does not contain a sequence of instructions,\r\nthen simply write “No steps provided.”</p>\n<p>{text_1}</p>\n</li>\n<li>\n<p><strong>提供完成任務的成功範例，然後要求模型執行相同任務。</strong></p>\n<p>e.g.,</p>\n<p>Your task is to answer in a consistent style…</p>\n</li>\n</ul>\n<h3 id=\"原則二給模型時間思考\">原則二：給模型時間「思考」</h3>\n<ul>\n<li>\n<p><strong>指定完成任務所需的步驟。</strong></p>\n<p>e.g.,<br>\nPerform the following actions: 1…/2…/3…/4…Separate your answers with line breaks.</p>\n<p>Perform the following actions:</p>\n<p>1 - Summarize the following text delimited by triple backticks with 1 sentence.</p>\n<p>2 - Translate the summary into French.</p>\n<p>3 - List each name in the French summary.</p>\n<p>4 - Output a json object that contains the following keys: french_summary, num_names.</p>\n<p>Separate your answers with line breaks.</p>\n<p>Text:\r\n{text}</p>\n<p>e.g., Perform the following actions: 1…/2…/3…/4…Use the following format: …</p>\n<p>Your task is to perform the following actions:</p>\n<p>1 - Summarize the following text delimited by &#x3C;> with 1 sentence.</p>\n<p>2 - Translate the summary into French.</p>\n<p>3 - List each name in the French summary.</p>\n<p>4 - Output a json object that contains the following keys: french_summary, num_names.</p>\n<p>Use the following format:</p>\n<p>Text: text to summarize</p>\n<p>Summary: summary</p>\n<p>Translation: summary translation</p>\n<p>Names: list of names in summary</p>\n<p>Output JSON: json with summary and num_names</p>\n<p>Text:\r\n{text}</p>\n</li>\n<li>\n<p><strong>指示模型在下結論之前先自行推導出解答。</strong></p>\n<p>e.g.,</p>\n<p>Your task is to determine if the student’s solution is correct or not.\r\nTo solve the problem do the following:</p>\n<ul>\n<li>\n<p>First, work out your own solution to the problem including the final total.</p>\n</li>\n<li>\n<p>Then compare your solution to the student’s solution and evaluate if the student’s solution is correct or not. Don’t decide if the student’s solution is correct until you have done the problem yourself.</p>\n</li>\n</ul>\n<p>Use the following format:</p>\n<p>Question:\r\nquestion here</p>\n<p>Student’s solution:\r\nstudent’s solution here</p>\n<p>Actual solution:\r\nsteps to work out the solution and your solution here</p>\n<p>Is the student’s solution the same as actual solution\r\njust calculated:\r\nyes or no</p>\n<p>Student grade:\r\ncorrect or incorrect</p>\n</li>\n</ul>\n<h2 id=\"實際應用\">實際應用</h2>\n<h3 id=\"摘要總結\">摘要/總結</h3>\n<ul>\n<li>\n<p><strong>設定字數或句數限制的摘要</strong></p>\n<p>e.g.,</p>\n<p>Your task is to generate a short summary of a product review from an ecommerce site.</p>\n<p>Summarize the review below, delimited by triple backticks, in at most 30 words.</p>\n<p>Review: {prod_review}</p>\n</li>\n<li>\n<p><strong>聚焦特定主題的摘要</strong></p>\n<p>e.g.,</p>\n<p>Your task is to generate a short summary of a product review from an ecommerce site to give feedback to the Shipping deparmtment.</p>\n<p>Summarize the review below, delimited by triple backticks, in at most 30 words, and focusing on any aspects that mention shipping and delivery of the product.</p>\n<p>Review: {prod_review}</p>\n</li>\n<li>\n<p><strong>使用「提取」替代「摘要」</strong></p>\n<p>e.g.,</p>\n<p>Your task is to extract relevant information from a product review from an ecommerce site to give feedback to the Shipping department.</p>\n<p>From the review below, delimited by triple quotes extract the information relevant to shipping and delivery. Limit to 30 words.\r\nReview: {prod_review}</p>\n</li>\n</ul>\n<h3 id=\"推論\">推論</h3>\n<ul>\n<li>\n<p><strong>推論情緒</strong></p>\n<ul>\n<li><strong>情感判斷（正面/負面）</strong></li>\n</ul>\n<p>e.g.,</p>\n<p>What is the sentiment of the following product review, which is delimited with triple backticks?</p>\n<p>Give your answer as a single word, either “positive” or “negative”.</p>\n<p>Review text: {lamp_review}</p>\n<ul>\n<li><strong>識別情緒類型</strong></li>\n</ul>\n<p>e.g.,</p>\n<p>Identify a list of emotions that the writer of the following review is expressing. Include no more than five items in the list.</p>\n<p>Format your answer as a list of lower-case words separated by commas.</p>\n<p>Review text: {lamp_review}</p>\n<ul>\n<li><strong>識別憤怒情緒</strong></li>\n</ul>\n<p>e.g.,</p>\n<p>Is the writer of the following review expressing anger?</p>\n<p>The review is delimited with triple backticks.</p>\n<p>Give your answer as either yes or no.</p>\n<p>Review text: {lamp_review}</p>\n</li>\n<li>\n<p><strong>提取特定資訊</strong></p>\n<p>e.g.,</p>\n<p>Identify the following items from the review text:</p>\n<ul>\n<li>\n<p>Item purchased by reviewer</p>\n</li>\n<li>\n<p>Company that made the item</p>\n</li>\n</ul>\n<p>The review is delimited with triple backticks.</p>\n<p>Format your response as a JSON object with “Item” and “Brand” as the keys.</p>\n<p>If the information isn’t present, use “unknown” as the value.</p>\n<p>Make your response as short as possible.</p>\n<p>Review text: {lamp_review}</p>\n</li>\n<li>\n<p><strong>推論主題</strong></p>\n<p>e.g.,</p>\n<p>Determine five topics that are being discussed in the following text, which is delimited by triple backticks.</p>\n<p>Make each item one or two words long.</p>\n<p>Format your response as a list of items separated by commas.</p>\n<p>Text sample: {story}</p>\n</li>\n<li>\n<p><strong>針對特定主題生成新聞提醒</strong></p>\n<p>e.g.,</p>\n<p>Determine whether each item in the following list of topics is a topic in the text below, which is delimited with triple backticks.</p>\n<p>Give your answer as list with 0 or 1 for each topic.</p>\n<p>List of topics: {”,“.join(topic_list)}</p>\n<p>Text sample: {story}</p>\n</li>\n</ul>\n<h3 id=\"轉換\">轉換</h3>\n<ul>\n<li>\n<p><strong>翻譯</strong></p>\n<p>e.g., Translate the following English text to Mandarin in Taiwan: …</p>\n<p>e.g., Translate the following text to Mandarin in Taiwan and English pirate: …</p>\n<p>e.g., Translate the following text to English in both the formal and informal forms: …</p>\n<p>e.g., Tell me which language this is: …</p>\n</li>\n<li>\n<p><strong>語氣轉換</strong></p>\n<p>e.g., Translate the following from slang to a business letter: …</p>\n</li>\n<li>\n<p><strong>格式轉換</strong></p>\n<p>e.g., Translate the following python dictionary from JSON to an HTML table with column headers and title: …</p>\n</li>\n<li>\n<p><strong>拼寫/文法檢查</strong></p>\n<p>e.g.,</p>\n<p>Proofread and correct the following text and rewrite the corrected version.</p>\n<p>If you don’t find and errors, just say “No errors found”.</p>\n<br>\n<p>e.g.,</p>\n<p>proofread and correct this review.</p>\n<p>Make it more compelling.</p>\n<p>Ensure it follows APA style guide and targets an advanced reader.</p>\n<p>Output in markdown format.</p>\n</li>\n</ul>\n<h3 id=\"擴展\">擴展</h3>\n<ul>\n<li>\n<p><strong>回覆信件</strong></p>\n<p>e.g.,</p>\n<p>You are a customer service AI assistant.</p>\n<p>Your task is to send an email reply to a valued customer.</p>\n<p>Given the customer email delimited by &#x3C;>,</p>\n<p>Generate a reply to thank the customer for their review.</p>\n<p>If the sentiment is positive or neutral, thank them for their review.</p>\n<p>If the sentiment is negative, apologize and suggest that they can reach out to customer service.</p>\n<p>Make sure to use specific details from the review.</p>\n<p>Write in a concise and professional tone.</p>\n<p>Sign the email as <code>AI customer agent</code>.</p>\n</li>\n</ul>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://learn.deeplearning.ai/chatgpt-prompt-eng/lesson/1/introduction\">ChatGPT Prompt Engineering for Developers</a></p>",{headings:1339,localImagePaths:1361,remoteImagePaths:1362,frontmatter:1363,imagePaths:1367},[1340,1341,1342,1343,1346,1349,1351,1354,1356,1358,1360],{depth:32,slug:145,text:146},{depth:32,slug:435,text:436},{depth:32,slug:438,text:439},{depth:62,slug:1344,text:1345},"原則一撰寫清晰且具體的指令","原則一：撰寫清晰且具體的指令",{depth:62,slug:1347,text:1348},"原則二給模型時間思考","原則二：給模型時間「思考」",{depth:32,slug:1350,text:1350},"實際應用",{depth:62,slug:1352,text:1353},"摘要總結","摘要/總結",{depth:62,slug:1355,text:1355},"推論",{depth:62,slug:1357,text:1357},"轉換",{depth:62,slug:1359,text:1359},"擴展",{depth:32,slug:33,text:34},[],[],{title:1328,subtitle:1329,author:16,imageWebp:420,imagePng:421,imgAlt:418,creationDate:1364,updateDate:1365,tags:1366,featured:136},["Date","2023-11-05T00:00:00.000Z"],["Date","2023-11-05T00:00:00.000Z"],[425],[],{id:526,data:1369,body:1375,filePath:1376,digest:1377,rendered:1378,legacyId:606},{title:1370,subtitle:1371,author:16,imageWebp:531,imagePng:532,imgAlt:529,creationDate:1372,updateDate:1373,tags:1374,featured:136},"React 概覽","參考「React 思維進化」這本書所撰寫的 React 概覽，希望可以藉此看到整個 React 的 big picture。",["Date","2024-08-18T00:00:00.000Z"],["Date","2024-08-18T00:00:00.000Z"],[536],"前陣子花了非常多的時間在理解 React，想要試著寫出自己目前對於它粗淺輪廓的認識，因此這篇文章會試著用綜覽的角度去撰寫，希望可以藉此看到整個 React 的 big picture，如果有較深入的細節想撰寫則會另外再寫成其他篇文章。\n\n## Table of Contents\n- [起源](#起源)\n- [開始之前需要先知道的兩個名詞/概念](#開始之前需要先知道的兩個名詞概念)\n  - [瀏覽器開給其他程式語言操作的 API 介面：DOM](#瀏覽器開給其他程式語言操作的-api-介面dom)\n  - [設計模式：單向資料流](#設計模式單向資料流)\n- [實現單向資料流的 DOM 渲染策略](#實現單向資料流的-dom-渲染策略)\n- [用 Virtual DOM 的概念進行全部重繪，以解決直接在 DOM 上進行全部重繪的效能問題](#用-virtual-dom-的概念進行全部重繪以解決直接在-dom-上進行全部重繪的效能問題)\n  - [用 Virtual DOM 概念的額外好處：將畫面管理流程分離成兩個獨立的階段，分別為「定義階段」和「實際繪製階段」](#用-virtual-dom-概念的額外好處將畫面管理流程分離成兩個獨立的階段分別為定義階段和實際繪製階段)\n- [Virtual DOM 概念在 React 中的實現：React element](#virtual-dom-概念在-react-中的實現react-element)\n- [建立 React element 方法的「語法糖」：JSX 語法](#建立-react-element-方法的語法糖jsx-語法)\n- [開發者自定義的畫面元件藍圖：Component](#開發者自定義的畫面元件藍圖component)\n  - [將特定參數從外部傳遞給 Component 內部的機制：Props](#將特定參數從外部傳遞給-component-內部的機制props)\n  - [僅可在 function component 內頂層作用域中呼叫的特殊函式 aka React 提供的 API：Hooks](#僅可在-function-component-內頂層作用域中呼叫的特殊函式-aka-react-提供的-api-hooks)\n- [Component 的三大生命週期](#component-的三大生命週期)\n  - [mount = render](#mount--render)\n  - [update = re-render = reconciliation](#update--re-render--reconciliation)\n  - [unmount](#unmount)\n- [最新應用程式狀態與畫面結構的本體：Fiber node](#最新應用程式狀態與畫面結構的本體fiber-node)\n- [總結](#總結)\n- [Reference](#reference)\n\n## 起源\n\n關於 React 的起源這邊沒有打算要談，但是有興趣的話很推薦可以看 YouTube [Honeypot](https://www.youtube.com/@Honeypotio/videos) 頻道製作的 [How A Small Team of Developers Created React at Facebook | React.js: The Documentary](https://www.youtube.com/watch?v=8pDqJVdNa44) 這部關於 React 的紀錄片；或者也可以看 [ExplainThis](https://www.explainthis.io/zh-hant) 寫的 [React 紀錄片心得 1 — 重新思考最佳實踐](https://www.explainthis.io/zh-hant/swe/react-documentary/part1) 和 [React 紀錄片心得 2 — 社群驅動創新](https://www.explainthis.io/zh-hant/swe/react-documentary/part2) 這兩篇針對這部 React 紀錄片寫的心得。\n\n## 開始之前需要先知道的兩個名詞/概念\n\n### 瀏覽器開給其他程式語言操作的 API 介面：DOM\n\nReact 是 JavaScript 的 UI 套件，而在撰寫網頁應用程式時，若要操作瀏覽器的 UI 畫面，就一定要透過瀏覽器開給其他程式語言操作的 API 介面：DOM，它是採用 tree (樹狀結構) 來儲存網頁元素，樹狀裡每一個部分叫做 node (節點)，其中最上面的根節點是 document，代表網頁本身。\n\n### 設計模式：單向資料流\n\nReact 是使用「單向資料流」的設計模式，單向資料流的核心概念是「以資料驅動畫面」，所以只有當資料改變時畫面才會跟著更新。由於這是一個單向的流程，因此畫面不會因為資料變化以外的任何原因隨意改變，這樣就可以保證將 UI 產生的主要變因限縮在「資料」上，並且當資料更新時對應綁定的畫面就會自動發生變化，進而提升前端應用程式的可靠性與可維護性。\n\n## 實現單向資料流的 DOM 渲染策略\n\n大致了解 DOM 和單向資料流這兩個名詞/概念後，再來必須理解 React 是如何用單向資料流的設計模式來操作 DOM 以實現瀏覽器畫面的渲染/更新的？\n\n在開始說明 React 所採用的做法前，我們可以先有一個認知是其實直接操作 DOM 的效能成本很高，因為它會連動瀏覽器的渲染引擎重繪畫面，因此前端效能優化有一個重要關鍵就是減少 DOM 的操作，也就是盡量以最小範圍的 DOM 操作來完成所需的畫面變動。\n\n而在這樣的前提下，實現單向資料流的 DOM 渲染策略比較直覺的做法是「當資料更新後，人工判斷並手動修改所有應受到連動更新的 DOM element」，這樣做的優點是減少多餘 DOM 操作的效能浪費，但缺點是完全依賴人為操作 DOM，在複雜的應用中要有周全的判斷和精確的操作非常困難，而 Vue.js 就是解決了人為操作 DOM 的困難問題並採用此方法的套件/框架。\n\n除了上述的做法，實現單向資料流的 DOM 渲染策略還有一個比較瘋狂的想法是「當資料更新後，一律將整個畫面的 DOM element 全部清除，再以最新的原始資料來全部重繪」，這樣做就可以直接解決上述人為操作 DOM 的困難問題，開發者只需要關注資料更新和模板定義，不需手動維護，因此較為直覺簡單，但缺點就是全部重繪明顯違反了我們想要達成前端效能優化的關鍵原則：減少 DOM 的操作，因此會造成很大的效能浪費，在龐大複雜的應用程式中，會影響使用者體驗，而 React 就是解決了全部重繪所造成的效能浪費問題並採用此方法的套件/框架。\n\n## 用 Virtual DOM 的概念進行全部重繪，以解決直接在 DOM 上進行全部重繪的效能問題\n\n但 React 是如何解決全部重繪所造成的效能浪費問題的？答案是用「Virtual DOM」的概念進行全部重繪。\n\n至於什麼是 Virtual DOM？Virtual DOM 只是一種概念，它的本質是普通的 JavaScript 物件資料，這個概念的核心是以一種「虛擬畫面結構」的自創資料（可以想像成畫面繪製的試做品），來模擬並對應實際 DOM 的畫面結構。實作流程是當畫面需要更新時，透過先產生新的 Virtual DOM 畫面結構 → 與舊有畫面的 Virtual DOM 結構進行細節比較 → 根據差異之處來執行最小範圍的 DOM 操作，以減少效能成本。\n\n### 用 Virtual DOM 概念的額外好處：將畫面管理流程分離成兩個獨立的階段，分別為「定義階段」和「實際繪製階段」\n\nVirtual DOM 除了可以優化 DOM 操作的效能外，還有一個好處是將畫面管理流程分離成兩個獨立的階段：「定義及管理畫面結構描述(reconciler)」與「將畫面結構的描述繪製成實際畫面成品(renderer)」，其中 reconciler 是各環境都能通用的（只要有辦法在該環境中跑 JavaScript）、而 renderer 則可以被任意替換，讓 React 也可以用於管理並產生瀏覽器 DOM 以外的 UI 或畫面（e.g., Android/iOS APP 畫面的 React Native、產生 PDF 文件的 React-pdf）。\n\n## Virtual DOM 概念在 React 中的實現：React element\n\nReact element 是 React 基於 Virtual DOM 概念所實現的虛擬畫面結構元素，它是作為描述並組成畫面的最小單位。更具體說明，它是一個普通的 JavaScript 物件資料，用於描述一個預期的實際 DOM element 結構。\n\n需要注意的是，React element 在建立後是不可被修改的，因為它是在描述某個時間版本的畫面結構，就像是一種畫面結構的歷史紀錄。也因為 React element 不可被修改的特性，當重新產生新的 React element 時，React 才可以和上一個舊版本的 React element 進行結構的比較，進而找出具體是哪些地方的 DOM 需要真正被操作更新，達成最小範圍的 DOM 操作目的，以減少效能成本。\n\n實際語法操作上，我們可以透過呼叫 React 提供 createElement 方法來建立一個 React element。另外，React element 和 DOM element 雖然有對應關係，但在某些屬性的命名會有所差異：常見的像是所有的 property 和 attribute（包括 event handler）都會改以 camel case 命名（例外：aria-\\* 和 data-\\*）、涉及到 JavaScript 內建保留字的屬性會改名，以避免意外情況（e.g., class → className）等。\n\n## 建立 React element 方法的「語法糖」：JSX 語法\n\nJSX 語法是 React.createElement 方法的「語法糖」，它長的很像 HTML 語法只是因為它被刻意設計成模仿 HTML 語法的撰寫與開發體驗，但是它在本質上完全和 HTML 是不同的東西。\n\nJSX 的程式碼在 build time 時就會被轉譯，常見的轉譯工具有 Babel 和 TypeScript compiler。而 React.createElement 有一個可以在轉譯時的優化方法是呼叫 jsx-runtime 的 \\_jsx 方法（React 17 開始支援）；React.createElement() 和 \\_jsx() 都是用來建立 React element 的方法，差別只在於 \\_jsx 方法會包含一些額外的優化，另外要注意的是 jsx-runtime 的 \\_jsx 方法只能由 transpiler 透過 JSX 語法的轉譯而呼叫，不能像 React.createElement 方法直接撰寫。\n\n在寫 JSX 語法有一些要注意的地方，像是 JSX 語法的第一層只能有一個節點，因為一段 JSX ＝ 呼叫一次 React.createElement 的方法，所以它只會回傳「一個 React element」，而一個 React element 代表一段樹狀資料結構（只能有一個根節點）。因此若有多個節點要再用一個共同的父元素包起來，而 React 為此也創建了一個內建的特殊元素類型：Fragment，它可以作為容器用途，但不會產生對應實際的 DOM element，我們通常會使用簡寫的 <> 空標籤來表達一個 fragment 類型的 React element 元素。\n\n另外一個要注意的地方是各種資料型別作為 React element 的子元素並轉換到 DOM 時的處理行為包含：字串會直接印出；數字會轉字串型別後印出；布林值的 false、null、undefined 會直接忽略；陣列會攤開成多個子元素後依序全部印出；最後要小心的是物件、函式無法轉換，會發生錯誤。\n\n實際語法操作上，JSX 語法為嚴格標籤閉合，所以就算是在 HTML 語法中不需要閉合的標籤（e.g., `<br>`、`<img>`、`<input>`），在寫 JSX 語法也一定要閉合。另外，我們也可以使用自我閉合的簡寫語法來表示沒有子元素的標籤（e.g., `const img = <img src=\"./image.jpg\" />`）。\n\n再來，JSX 語法有字面值（e.g., 字串）和表達式（e.g., 變數）兩大資料表達方式。其中字面值的資料表達會用像是 HTML 語法的格式寫：對於屬性的值的字面值會使用雙引號 “ “ 包住；對於子元素的字面值則可以直接寫。表達式的資料表達則會使用 JSX 的指定語法 { } 包住，像是「變數」或「在 JSX 語法中表達另一段 JSX 語法作為子元素」都算是表達式的類型，但在第二種情境下你不寫 { } 也可以，因為 JSX 語法也有支援直接在父元素的開標籤與閉標籤之間寫上子元素的標籤，為了可以更貼近過去寫 HTML 語法的開發體驗。\n\n## 開發者自定義的畫面元件藍圖：Component\n\n總結一下上面我們提到了 React 是以「單向資料流」為原則所設計的 UI 套件/框架，而在 DOM 渲染策略上，使用了「當資料更新後，一律將整個畫面的 DOM element 全部清除，再以最新的原始資料來全部重繪」的策略以實現單向資料流，但為了解決頻繁在 DOM 上進行全部清除又重繪所造成的效能浪費問題，React 並不會直接在 DOM 上做這樣的操作，而是引進 Virtual DOM 的概念先使用 JavaScript 的物件型別格式模擬實際 DOM 的畫面結構來進行全部重繪的動作，這邊的 Virtual DOM 概念在 React 中的實現就是 React element，所以 React element 其實是一個虛擬畫面結構元素，它是作為描述並組成畫面的最小單位。但是在實作上，我們通常不會直接寫一個 React element，而是會把 React element 包在 Component 之中。\n\nComponent 可以想像成是一個模板或積木零組件，是一種由開發者自定義的畫面元件藍圖，它會接收由開發者自訂格式的 props 資料作為參數，並回傳一個 React component 作為畫面區塊的結構。\n\n我們可以理解一個 Component 回傳的值實際上是一個 React element，而 Component 中除了可以包含對應實際 DOM 的 React element 元素之外，其實也可以包含並呼叫其他的 Component 作為子 Component，就像組裝積木那樣。\n\n設計 Component 的本質與意義是要依據需求以及邏輯意義進行抽象化，將那些關心的特徵與行為歸納出來，設計一套適用於特定情境和意義範圍的流程或邏輯，並將實作細節封裝起來以便於重用。\n\n在 function component 時代，我們會以「函式」來定義 Component，因為它所定義的內容是「特定畫面的產生流程與邏輯」，它是一種「描述」，而不是一塊已經產生好的固定畫面本身。所以同樣的 Component（想像成藍圖）被呼叫多次，每一次被呼叫出來的 Component（想像成實例）之間是相互獨立的，因此完全可以根據需求去分別做客製化。\n\n實際語法操作上，Component 命名中的首字母必須為大寫，不然會和一般的元素標籤搞混。這樣當標籤名稱為小寫時，React 在建立 React element 就會將它視為字串；當標籤名稱為大寫時，React 在建立 React element 就會將它視為變數名稱。\n\n另外，有兩種可以匯出 Component 的方式：default export 和 named export。一個 JS 檔案只能有一個 default export，但可以同時有多個 named export。以 default export 為例，我們可以使用 export default 來匯出 Component；使用 import 元件名稱 from ‘檔案路徑‘ 來匯入 Component。\n\n### 將特定參數從外部傳遞給 Component 內部的機制：Props\n\nProps 的全名是 properties (屬性)，所以 Props 是 Component 的 properties，它是一種可以讓我們在呼叫 Component 的時候，將特定的參數從外部傳遞給 Component 這個藍圖內部的機制，這樣我們就能夠根據傳入的參數來進行一些畫面產生流程的客製化，以應付更多的需求情境。\n\nReact 對於 Component 的 Props 可以傳遞什麼樣的資料型別沒有任何的限制。而值得一提的是，甚至一個 React element 也能作為 Props 的值來傳遞，因為 React element 本身就是個普通的 JavaScript 物件，這為 UI 抽象化設計提供了更多的可能性。\n\n而需要注意的是，Props 是從外部來的資料，所以在內部中是唯讀/不可被修改的。這實際上是為了維護單向資料流的可靠性，一般 React 會用 Object.freeze(props) 凍結 Props 讓你沒辦法修改，但是會有無法被偵測到的狀況（e.g., 當用像是 push 方法直接修改原本的陣列時），所以要小心！\n\n實際語法操作上，component function 接收的第一個參數會是 Props 物件，包含我們在調用 Component 時傳入的各種屬性。我們可以直接在定義參數的地方寫 props 或者直接解構取出所需的屬性資料。另外，React 有一個特殊的 Props 叫 children，這個 children prop 在純 React element 中有限制只能是特定型別（前面的 JSX 語法章節有提到各種資料型別作為 React element 的子元素並轉換到 DOM 時的處理行為，並有提醒物件、函式無法轉換，會發生錯誤。），但在 Component 類型的 React element 中則是可以讓 children prop 接受任何類型的值而不受限制，這是因為 Component 的 children prop 具體會被使用在何處，是由開發者自行在 Component 內部決定的。\n\n### 僅可在 function component 內頂層作用域中呼叫的特殊函式 aka React 提供的 API：Hooks\n\nHooks 是由 React 提供的 API，是一種僅可以在 function component 內的頂層作用域中才能呼叫的特殊函式，用於將各種 React 的核心特性或功能注入到 Component 當中。\n\n至於為什麼 Hooks 只可以在 function component 內的頂層作用域中呼叫？這是為了確保 Hooks 的一些內部機制能夠正常的運作，避免造成資料丟失等意外問題，其中最主要的內部機制就是 Component 中的所有 Hooks 在每次 render 中都會依賴於固定的呼叫順序來區別彼此，所以規定這個限制就是為了保證所有 Hooks 在每次的 render 過程中都會被呼叫到。舉一個具體的例子，如果今天有一個 Hook 被放在 if 的條件式內而非頂層作用域中，若第一次 render 此 Component 時 if 的條件為 true，所以這個 Hook 有被執行到；但第二次 render 此 Component 時 if 的條件變成 false，所以裡面的 Hook 就不會被執行到，這邊我們就會發現一個問題：記得前面有說過「Component 中的所有 Hooks 在每次 render 中都會依賴於固定的呼叫順序來區別彼此」，但是如果 Component 中的每一個 Hooks 不是每次 render 時都一定會全部被呼叫到的話，就會導致順序對不起來，所以才會有「Hooks 只可以在 function component 內的頂層作用域中呼叫」的這個限制。\n\n再往更上層看，為什麼要用呼叫的「順序」，而不是其他方式（e.g., 名稱）來區別彼此？這是因為以順序性函式呼叫的設計可以解決鑽石問題(diamond problem)。\n\nReact 中較常見的 Hooks 包含 useState、useEffect、useCallback、useMemo、useRef、useContext 等，這邊特別針對 useState 和 useEffect 這兩個 Hooks 做初步的介紹：\n\n- **定義與存取 State 的 Hook：useState**\n\n在 function component 中，我們可以透過呼叫 useState 這個 Hook 來定義與存取 State。在 React 開發的慣例中，我們通常會以陣列解構的語法來將 useState 回傳的 state 值以及 setState 方法根據商業邏輯上的意義重命名為自訂的變數名稱（e.g., 將代表計數器狀態資料的 state 值變數重命名為 count，並將對應的 setState 方法名為 setCount）。\n\n同一個 Component 中是可以有多個 state 的，而 React 之所以有辦法辨認同一個 component 中的不同的 state 是因為上面有說明過 Hooks 會用「順序」的方式來記憶和區別彼此的這個特性。\n\n觸發 Component re-render 的唯一合法方法是透過呼叫 setState 方法去更新 state 值，但要注意的是 setState 方法是非同步的，在呼叫 setState 方法後，React 並不會立即性的觸發 re-render，而是會等待正在執行的事件內的所有程式都結束後，才會開始進行 re-render。\n\n需要注意的是，上面在介紹 Props 時，我們有提到為了維護單向資料流的可靠性，Props 在 Component 內部中是唯讀/不可被修改的；同理，State 也是一樣，immutable state 是維持 React 資料流可靠性的重要關鍵，State 是用於表示 Component 某個歷史時刻（某次 render）的狀態資料，是一經建立後就不該再被修改的，否則有可能會導致資料流的可靠性被破壞，或是某些機制無法正常運作（e.g., 呼叫 setState 方法時的資料新舊檢查需求、過去 render 的舊 State 仍有被讀取的需求、React 效能優化機制的參考檢查需求），因此在 React 中我們不應該去 mutate 一個物件或陣列型別的 State 資料，而是應該與對待原始型別的值一樣，產生一個新的物件或陣列去取代舊的，但因為這並不是 JavaScript 在物件資料型別的原生特性，所以是必須完全靠開發者自己手動維持並遵守的一個重要原則。\n\n- **處理副作用的 Hook：useEffect**\n\n在介紹 useEffect 前，我們可以先來了解 effect：effect = side effect，當一個函式除了回傳一個結果值之外，還會依賴或影響函式外某些系統狀態，又或是與外部環境產生互動時，我們就稱這個函式是帶有副作用的（e.g., 修改函式外的全域變數、讀寫檔案、資料庫操作、網路請求…都是常見的副作用）。而可預測性降低、測試困難、高耦合度、難以維護和理解、優化限制是 effect 會有的負面影響。\n\n大致了解完 effect 和其會有的負面影響後，我們可以來細看 React component function 中的 effect 可能會有的負面影響包含：\n\n1. 在 React component function 中副作用可能會拖慢甚至阻塞函式本身的計算流程。\n\n2. 在 React component function 中函式多次執行所疊加造成的副作用影響難以預測。\n\n3. 在 React component function 中副作用的處理涉及到非同步的後續影響時，副作用被多次執行的順序不一定與非同步事件的回應順序相同，而導致 race condition 的問題。\n\n4. 在 React component function 中當一個副作用會啟動持續性的監聽類工作（例如註冊某個事件的訂閱），但是沒有處理對應的取消訂閱時，就有可能在 Component unmount 之後仍持續監聽，導致 memory leak 的問題。\n\n而在 React 中要解決副作用可能帶來的負面影響的方法就是使用 useEffect 這個 Hook。\n\n在使用上需要注意的是，useEffect 是屬於「宣告式(declarative)」的程式設計，我們只會關注預期的結果是什麼模樣（也就是目的地），而不在乎過程中是如何一步一步走到結果的，因此如果你嘗試去控制 effect 函式只會在第一次的 render 才執行的話，其實是違反了 useEffect 本身的設計思維。當我們的 effect 函式的執行效果是依賴於「過程的執行時機」而不是「目的地為何」，則很容易寫出不可靠的副作用處理邏輯。另外也需要了解，useEffect 的用途是「將原始資料同步化到畫面以外的副作用處理上」，而非生命週期 API。\n\n使用 useEffect 大致包含三大步驟：\n\n1. 定義一個 effect 函式：useEffect 可以從 Component render 的過程中隔離副作用的執行時機，其會將副作用的處理隔離到每次的 render 流程完成之後才執行，以避免副作用的處理直接阻塞畫面的產生與更新，也就是解決上面提到的 React component function 中的 effect 可能會有的第一個負面影響（拖慢/阻塞函式本身的計算流程）。\n\n2. 加上 cleanup 函式來清理副作用（如果有需要的話）：useEffect 讓開發者能夠在 component function 中定義副作用的同時，也可以透過定義「cleanup 函式」來指定如何清除該副作用所造成的影響。cleanup 函式會在每次副作用重新執行前以及 Component unmount 時被執行，以避免副作用所造成的影響不斷疊加，也就是解決上面提到的 React component function 中的 effect 可能會有的第二至四個負面影響（包含函式多次執行所疊加造成的副作用影響難以預測、副作用處理涉及到非同步的後續影響時會有 race condition 問題，以及 memory leak 問題）。\n\n3. 指定 effect 函式的 dependencies 陣列，以跳過某些不必要的副作用處理（選填）：dependencies 是一種效能優化，而非執行時機的控制，它是用來判斷「何時可以安全地跳過」而不是指定「只有何時才會執行」，當 dependencies 沒有更新時，「跳過執行副作用」的行為並不是絕對保證的，因此請不要欺諞 dependencies！另外要注意的是，「直接不提供 dependencies 參數」與「提供一個空陣列 \\[ \\] 作為 dependencies 參數」，兩者的意義和執行效果是完全不同的。直接不提供 dependencies 參數代表維持 useEffect 的預設行為，也就是每次 render 後都會執行一次 effect 函式；提供一個空陣列 \\[ \\] 作為 dependencies 參數則代表這個 effect 函式沒有依賴任何資料，component 可以在每次 re-render 時都安全的跳過 effect 函式的執行。\n\n## Component 的三大生命週期\n\nComponent 有三大生命週期，分別為 mount、update，和 unmount\n\n### mount = render\n\n當一個 component function 首次被呼叫並執行時，它會進行第一次的 render 來產生初始狀態的畫面，這個階段的流程也被稱為 mount。\n\nmount 的過程會經歷兩個階段，分別為 render phase 和 commit phase：\n\n- render phase 會執行 component function，以 Props 與 State 等資料來產生初始畫面的 React element，並將產生好的 React element 交給 commit phase 繼續處理。\n\n- commit phase 會將 Component 在 render phase 所產生的 React element 全部進行轉換（因為第一次 render 時，瀏覽器的實際 DOM 中還沒有任何這個 Component 實例的畫面區塊所對應的 DOM element），並建立成對應的實際 DOM element，然後透過瀏覽器的 DOM API appendchild() 全部放置到實際畫面中。\n\nmount 流程完成的狀態被稱為「mounted」，意思是 Component 首次的 render 流程執行完成且已經成功的「掛載」到實際的瀏覽器畫面中了，這意謂著你必須在 mounted 之後才能夠從瀏覽器的 DOM 結構中找到這個 Component 所對應的那些 DOM element。\n\n整個 render 流程可以看作是一種由上而下、由外而內的過程。\n\n### update = re-render = reconciliation\n\n當一個 Component 內部的狀態資料發生更新時，React 會再次執行 component function 來產生對應新版資料的新版畫面，這個過程我們稱之為 re-render（再次渲染畫面）或是 reconciliation，也就是 update 階段。\n\nupdate 的過程也同樣會經歷到 render phase 和 commit phase 這兩個階段：\n\n- 在進入到 render phase 之前，會先從呼叫 setState() 開始（前面在介紹 useState 這個 Hook 時我們有簡單提到觸發 Component re-render 的唯一合法方法就是透過呼叫 setState 方法去更新 state 值，因此 update 階段一定是從呼叫 setState() 開始），再來會用 [Object.is](Object.is)() 比較既有 state 值與新指定的 state 值是否相同。若是，則直接中斷後續流程；若否，則進入到 render phase。\n\n- render phase 會先更新 State 資料並 re-render component function，以產生新版的 React element，再來會將新舊版本的兩份 React element 以 diffing 演算法進行結構比較，找出其中差異之處，接著會進入 commit phase。\n\n- commit phase 會操作更新那些新舊 React element 差異之處所對應的實際 DOM element，以完成瀏覽器的畫面更新。\n\n最後補充說明，雖然觸發 Component re-render 的唯一合法手段是透過呼叫 setState 方法去更新 State 值，但其實觸發 Component re-render 可以分成兩種可能的情況：\n\n1. Component 本身有定義 State，且該 State 對應的 setState 方法被呼叫時。\n\n2. Component 的父代或祖父代 Component 因為 setState 呼叫而發生了 re-render，所以身為子 Component 的自己也連帶被 re-render。\n\n### unmount\n\n當該位置上 Component 類型的 React element 在 re-render 後的新畫面結構中不再出現時，該處所對應的 Component 實例就會進入「unmount」階段，意謂著「該區塊不再需要存在於畫面中」。React 會進行副作用的清理，並且將該 Component 實例所對應的實際 DOM element 從瀏覽器中移除，流程大致如下：\n\n1. 當應用程式新一次 render 的畫面結構中，有某個 Component 類型的 React element 與前一次 render 相比之下不見了，則 React 就會認為該處對應的 Component 實例應該被 unmount。\n\n2. 執行 Component 最後一次副作用處理所對應的 cleanup 函式，以清理剩餘的副作用影響。\n\n3. 將 Component 實例所對應的實際 DOM element 從瀏覽器中移除。\n\n4. React 會在內部移除對應的 Component 實例，也就是接下來我們要介紹的 Fiber node。這意謂著 Component 實例內的所有 State 等狀態資料都會被丟棄。\n\n## 最新應用程式狀態與畫面結構的本體：Fiber node\n\nFiber node 在 React 中是作為核心的最新應用程式狀態與畫面結構的本體，其工作是負責保存並維護目前 React 應用程式的最新狀態資料，因此我們會看到 Fiber node 裡面存放了 Component 中各種 Hooks 的相關最新狀態資料，像是當我們在 Component 中呼叫多個 useState 時，Fiber node 就會以 linked list 的資料結構儲存 State 的資料。而除了 State 的資料會被存放在 Fiber node 中，當連續呼叫 setState 方法時的待執行計算序列也會被存放在 Fiber node。\n\n在 mount 階段，當我們在畫面結構中某處首次 render 出一個 Component 類型的 React element 時，React 就會在整個應用程式的 Fiber node 樹的對應位置建立一個新的 Component 實例，因此精確來說，一個 Component 實例就是指一個 Fiber node。\n\n在 update 階段，reconciler 會負責去調度 Component 的 render 並將資料的改動更新到 Fiber node 裡，接著將該次 render 出來的 React element 與前一次 render 的 React element 進行比較，並移交 renderer 處理實際 DOM 的操作更新。\n\n## 總結\n\n在理解完 React 的大致輪廓後，我想從我們寫程式的角度出發來說明我想像中在使用 React 時整個流程大概是如何運作的：通常使用 React 這個 UI 套件/框架來寫前端應用程式時，我們會從使用 JSX 語法來撰寫 Component 出發，而 Component 會回傳一個 React element，產生 React element 後 React 就會在整個應用程式的 Fiber node 樹的對應位置建立/更新 Component 實例，並在裡面存放 Component 中各種 Hooks 的相關最新狀態資料。再來，React 會將產生的 React element 進行轉換並建立成對應的實際 DOM element，以完成瀏覽器的畫面繪製/更新。最後，如果 Component 有用到 useEffect，則會在畫面繪製/更新完成後執行本次 render 版本的 effect 函式，而如果 useEffect 有提供 cleanup 函式，則在執行本次 render 版本的 effect 函式前會先執行前一次 render 版本的 cleanup 函式（若為首次 render 則跳過此環節）。\n\n## Reference\n\n[React 思維進化：一次打破常見的觀念誤解，躍升專業前端開發者](https://www.tenlong.com.tw/products/9786263336841)","src/content/zh-tw/react-overview.md","b6885dd8d2f0acf0",{html:1379,metadata:1380},"<p>前陣子花了非常多的時間在理解 React，想要試著寫出自己目前對於它粗淺輪廓的認識，因此這篇文章會試著用綜覽的角度去撰寫，希望可以藉此看到整個 React 的 big picture，如果有較深入的細節想撰寫則會另外再寫成其他篇文章。</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#%E8%B5%B7%E6%BA%90\">起源</a></li>\n<li><a href=\"#%E9%96%8B%E5%A7%8B%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E5%85%88%E7%9F%A5%E9%81%93%E7%9A%84%E5%85%A9%E5%80%8B%E5%90%8D%E8%A9%9E%E6%A6%82%E5%BF%B5\">開始之前需要先知道的兩個名詞/概念</a>\n<ul>\n<li><a href=\"#%E7%80%8F%E8%A6%BD%E5%99%A8%E9%96%8B%E7%B5%A6%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E6%93%8D%E4%BD%9C%E7%9A%84-api-%E4%BB%8B%E9%9D%A2dom\">瀏覽器開給其他程式語言操作的 API 介面：DOM</a></li>\n<li><a href=\"#%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E5%96%AE%E5%90%91%E8%B3%87%E6%96%99%E6%B5%81\">設計模式：單向資料流</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AF%A6%E7%8F%BE%E5%96%AE%E5%90%91%E8%B3%87%E6%96%99%E6%B5%81%E7%9A%84-dom-%E6%B8%B2%E6%9F%93%E7%AD%96%E7%95%A5\">實現單向資料流的 DOM 渲染策略</a></li>\n<li><a href=\"#%E7%94%A8-virtual-dom-%E7%9A%84%E6%A6%82%E5%BF%B5%E9%80%B2%E8%A1%8C%E5%85%A8%E9%83%A8%E9%87%8D%E7%B9%AA%E4%BB%A5%E8%A7%A3%E6%B1%BA%E7%9B%B4%E6%8E%A5%E5%9C%A8-dom-%E4%B8%8A%E9%80%B2%E8%A1%8C%E5%85%A8%E9%83%A8%E9%87%8D%E7%B9%AA%E7%9A%84%E6%95%88%E8%83%BD%E5%95%8F%E9%A1%8C\">用 Virtual DOM 的概念進行全部重繪，以解決直接在 DOM 上進行全部重繪的效能問題</a>\n<ul>\n<li><a href=\"#%E7%94%A8-virtual-dom-%E6%A6%82%E5%BF%B5%E7%9A%84%E9%A1%8D%E5%A4%96%E5%A5%BD%E8%99%95%E5%B0%87%E7%95%AB%E9%9D%A2%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%E5%88%86%E9%9B%A2%E6%88%90%E5%85%A9%E5%80%8B%E7%8D%A8%E7%AB%8B%E7%9A%84%E9%9A%8E%E6%AE%B5%E5%88%86%E5%88%A5%E7%82%BA%E5%AE%9A%E7%BE%A9%E9%9A%8E%E6%AE%B5%E5%92%8C%E5%AF%A6%E9%9A%9B%E7%B9%AA%E8%A3%BD%E9%9A%8E%E6%AE%B5\">用 Virtual DOM 概念的額外好處：將畫面管理流程分離成兩個獨立的階段，分別為「定義階段」和「實際繪製階段」</a></li>\n</ul>\n</li>\n<li><a href=\"#virtual-dom-%E6%A6%82%E5%BF%B5%E5%9C%A8-react-%E4%B8%AD%E7%9A%84%E5%AF%A6%E7%8F%BEreact-element\">Virtual DOM 概念在 React 中的實現：React element</a></li>\n<li><a href=\"#%E5%BB%BA%E7%AB%8B-react-element-%E6%96%B9%E6%B3%95%E7%9A%84%E8%AA%9E%E6%B3%95%E7%B3%96jsx-%E8%AA%9E%E6%B3%95\">建立 React element 方法的「語法糖」：JSX 語法</a></li>\n<li><a href=\"#%E9%96%8B%E7%99%BC%E8%80%85%E8%87%AA%E5%AE%9A%E7%BE%A9%E7%9A%84%E7%95%AB%E9%9D%A2%E5%85%83%E4%BB%B6%E8%97%8D%E5%9C%96component\">開發者自定義的畫面元件藍圖：Component</a>\n<ul>\n<li><a href=\"#%E5%B0%87%E7%89%B9%E5%AE%9A%E5%8F%83%E6%95%B8%E5%BE%9E%E5%A4%96%E9%83%A8%E5%82%B3%E9%81%9E%E7%B5%A6-component-%E5%85%A7%E9%83%A8%E7%9A%84%E6%A9%9F%E5%88%B6props\">將特定參數從外部傳遞給 Component 內部的機制：Props</a></li>\n<li><a href=\"#%E5%83%85%E5%8F%AF%E5%9C%A8-function-component-%E5%85%A7%E9%A0%82%E5%B1%A4%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E5%91%BC%E5%8F%AB%E7%9A%84%E7%89%B9%E6%AE%8A%E5%87%BD%E5%BC%8F-aka-react-%E6%8F%90%E4%BE%9B%E7%9A%84-api-hooks\">僅可在 function component 內頂層作用域中呼叫的特殊函式 aka React 提供的 API：Hooks</a></li>\n</ul>\n</li>\n<li><a href=\"#component-%E7%9A%84%E4%B8%89%E5%A4%A7%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F\">Component 的三大生命週期</a>\n<ul>\n<li><a href=\"#mount--render\">mount = render</a></li>\n<li><a href=\"#update--re-render--reconciliation\">update = re-render = reconciliation</a></li>\n<li><a href=\"#unmount\">unmount</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%9C%80%E6%96%B0%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E7%8B%80%E6%85%8B%E8%88%87%E7%95%AB%E9%9D%A2%E7%B5%90%E6%A7%8B%E7%9A%84%E6%9C%AC%E9%AB%94fiber-node\">最新應用程式狀態與畫面結構的本體：Fiber node</a></li>\n<li><a href=\"#%E7%B8%BD%E7%B5%90\">總結</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<h2 id=\"起源\">起源</h2>\n<p>關於 React 的起源這邊沒有打算要談，但是有興趣的話很推薦可以看 YouTube <a href=\"https://www.youtube.com/@Honeypotio/videos\">Honeypot</a> 頻道製作的 <a href=\"https://www.youtube.com/watch?v=8pDqJVdNa44\">How A Small Team of Developers Created React at Facebook | React.js: The Documentary</a> 這部關於 React 的紀錄片；或者也可以看 <a href=\"https://www.explainthis.io/zh-hant\">ExplainThis</a> 寫的 <a href=\"https://www.explainthis.io/zh-hant/swe/react-documentary/part1\">React 紀錄片心得 1 — 重新思考最佳實踐</a> 和 <a href=\"https://www.explainthis.io/zh-hant/swe/react-documentary/part2\">React 紀錄片心得 2 — 社群驅動創新</a> 這兩篇針對這部 React 紀錄片寫的心得。</p>\n<h2 id=\"開始之前需要先知道的兩個名詞概念\">開始之前需要先知道的兩個名詞/概念</h2>\n<h3 id=\"瀏覽器開給其他程式語言操作的-api-介面dom\">瀏覽器開給其他程式語言操作的 API 介面：DOM</h3>\n<p>React 是 JavaScript 的 UI 套件，而在撰寫網頁應用程式時，若要操作瀏覽器的 UI 畫面，就一定要透過瀏覽器開給其他程式語言操作的 API 介面：DOM，它是採用 tree (樹狀結構) 來儲存網頁元素，樹狀裡每一個部分叫做 node (節點)，其中最上面的根節點是 document，代表網頁本身。</p>\n<h3 id=\"設計模式單向資料流\">設計模式：單向資料流</h3>\n<p>React 是使用「單向資料流」的設計模式，單向資料流的核心概念是「以資料驅動畫面」，所以只有當資料改變時畫面才會跟著更新。由於這是一個單向的流程，因此畫面不會因為資料變化以外的任何原因隨意改變，這樣就可以保證將 UI 產生的主要變因限縮在「資料」上，並且當資料更新時對應綁定的畫面就會自動發生變化，進而提升前端應用程式的可靠性與可維護性。</p>\n<h2 id=\"實現單向資料流的-dom-渲染策略\">實現單向資料流的 DOM 渲染策略</h2>\n<p>大致了解 DOM 和單向資料流這兩個名詞/概念後，再來必須理解 React 是如何用單向資料流的設計模式來操作 DOM 以實現瀏覽器畫面的渲染/更新的？</p>\n<p>在開始說明 React 所採用的做法前，我們可以先有一個認知是其實直接操作 DOM 的效能成本很高，因為它會連動瀏覽器的渲染引擎重繪畫面，因此前端效能優化有一個重要關鍵就是減少 DOM 的操作，也就是盡量以最小範圍的 DOM 操作來完成所需的畫面變動。</p>\n<p>而在這樣的前提下，實現單向資料流的 DOM 渲染策略比較直覺的做法是「當資料更新後，人工判斷並手動修改所有應受到連動更新的 DOM element」，這樣做的優點是減少多餘 DOM 操作的效能浪費，但缺點是完全依賴人為操作 DOM，在複雜的應用中要有周全的判斷和精確的操作非常困難，而 Vue.js 就是解決了人為操作 DOM 的困難問題並採用此方法的套件/框架。</p>\n<p>除了上述的做法，實現單向資料流的 DOM 渲染策略還有一個比較瘋狂的想法是「當資料更新後，一律將整個畫面的 DOM element 全部清除，再以最新的原始資料來全部重繪」，這樣做就可以直接解決上述人為操作 DOM 的困難問題，開發者只需要關注資料更新和模板定義，不需手動維護，因此較為直覺簡單，但缺點就是全部重繪明顯違反了我們想要達成前端效能優化的關鍵原則：減少 DOM 的操作，因此會造成很大的效能浪費，在龐大複雜的應用程式中，會影響使用者體驗，而 React 就是解決了全部重繪所造成的效能浪費問題並採用此方法的套件/框架。</p>\n<h2 id=\"用-virtual-dom-的概念進行全部重繪以解決直接在-dom-上進行全部重繪的效能問題\">用 Virtual DOM 的概念進行全部重繪，以解決直接在 DOM 上進行全部重繪的效能問題</h2>\n<p>但 React 是如何解決全部重繪所造成的效能浪費問題的？答案是用「Virtual DOM」的概念進行全部重繪。</p>\n<p>至於什麼是 Virtual DOM？Virtual DOM 只是一種概念，它的本質是普通的 JavaScript 物件資料，這個概念的核心是以一種「虛擬畫面結構」的自創資料（可以想像成畫面繪製的試做品），來模擬並對應實際 DOM 的畫面結構。實作流程是當畫面需要更新時，透過先產生新的 Virtual DOM 畫面結構 → 與舊有畫面的 Virtual DOM 結構進行細節比較 → 根據差異之處來執行最小範圍的 DOM 操作，以減少效能成本。</p>\n<h3 id=\"用-virtual-dom-概念的額外好處將畫面管理流程分離成兩個獨立的階段分別為定義階段和實際繪製階段\">用 Virtual DOM 概念的額外好處：將畫面管理流程分離成兩個獨立的階段，分別為「定義階段」和「實際繪製階段」</h3>\n<p>Virtual DOM 除了可以優化 DOM 操作的效能外，還有一個好處是將畫面管理流程分離成兩個獨立的階段：「定義及管理畫面結構描述(reconciler)」與「將畫面結構的描述繪製成實際畫面成品(renderer)」，其中 reconciler 是各環境都能通用的（只要有辦法在該環境中跑 JavaScript）、而 renderer 則可以被任意替換，讓 React 也可以用於管理並產生瀏覽器 DOM 以外的 UI 或畫面（e.g., Android/iOS APP 畫面的 React Native、產生 PDF 文件的 React-pdf）。</p>\n<h2 id=\"virtual-dom-概念在-react-中的實現react-element\">Virtual DOM 概念在 React 中的實現：React element</h2>\n<p>React element 是 React 基於 Virtual DOM 概念所實現的虛擬畫面結構元素，它是作為描述並組成畫面的最小單位。更具體說明，它是一個普通的 JavaScript 物件資料，用於描述一個預期的實際 DOM element 結構。</p>\n<p>需要注意的是，React element 在建立後是不可被修改的，因為它是在描述某個時間版本的畫面結構，就像是一種畫面結構的歷史紀錄。也因為 React element 不可被修改的特性，當重新產生新的 React element 時，React 才可以和上一個舊版本的 React element 進行結構的比較，進而找出具體是哪些地方的 DOM 需要真正被操作更新，達成最小範圍的 DOM 操作目的，以減少效能成本。</p>\n<p>實際語法操作上，我們可以透過呼叫 React 提供 createElement 方法來建立一個 React element。另外，React element 和 DOM element 雖然有對應關係，但在某些屬性的命名會有所差異：常見的像是所有的 property 和 attribute（包括 event handler）都會改以 camel case 命名（例外：aria-* 和 data-*）、涉及到 JavaScript 內建保留字的屬性會改名，以避免意外情況（e.g., class → className）等。</p>\n<h2 id=\"建立-react-element-方法的語法糖jsx-語法\">建立 React element 方法的「語法糖」：JSX 語法</h2>\n<p>JSX 語法是 React.createElement 方法的「語法糖」，它長的很像 HTML 語法只是因為它被刻意設計成模仿 HTML 語法的撰寫與開發體驗，但是它在本質上完全和 HTML 是不同的東西。</p>\n<p>JSX 的程式碼在 build time 時就會被轉譯，常見的轉譯工具有 Babel 和 TypeScript compiler。而 React.createElement 有一個可以在轉譯時的優化方法是呼叫 jsx-runtime 的 _jsx 方法（React 17 開始支援）；React.createElement() 和 _jsx() 都是用來建立 React element 的方法，差別只在於 _jsx 方法會包含一些額外的優化，另外要注意的是 jsx-runtime 的 _jsx 方法只能由 transpiler 透過 JSX 語法的轉譯而呼叫，不能像 React.createElement 方法直接撰寫。</p>\n<p>在寫 JSX 語法有一些要注意的地方，像是 JSX 語法的第一層只能有一個節點，因為一段 JSX ＝ 呼叫一次 React.createElement 的方法，所以它只會回傳「一個 React element」，而一個 React element 代表一段樹狀資料結構（只能有一個根節點）。因此若有多個節點要再用一個共同的父元素包起來，而 React 為此也創建了一個內建的特殊元素類型：Fragment，它可以作為容器用途，但不會產生對應實際的 DOM element，我們通常會使用簡寫的 &#x3C;> 空標籤來表達一個 fragment 類型的 React element 元素。</p>\n<p>另外一個要注意的地方是各種資料型別作為 React element 的子元素並轉換到 DOM 時的處理行為包含：字串會直接印出；數字會轉字串型別後印出；布林值的 false、null、undefined 會直接忽略；陣列會攤開成多個子元素後依序全部印出；最後要小心的是物件、函式無法轉換，會發生錯誤。</p>\n<p>實際語法操作上，JSX 語法為嚴格標籤閉合，所以就算是在 HTML 語法中不需要閉合的標籤（e.g., <code>&#x3C;br></code>、<code>&#x3C;img></code>、<code>&#x3C;input></code>），在寫 JSX 語法也一定要閉合。另外，我們也可以使用自我閉合的簡寫語法來表示沒有子元素的標籤（e.g., <code>const img = &#x3C;img src=\"./image.jpg\" /></code>）。</p>\n<p>再來，JSX 語法有字面值（e.g., 字串）和表達式（e.g., 變數）兩大資料表達方式。其中字面值的資料表達會用像是 HTML 語法的格式寫：對於屬性的值的字面值會使用雙引號 “ “ 包住；對於子元素的字面值則可以直接寫。表達式的資料表達則會使用 JSX 的指定語法 { } 包住，像是「變數」或「在 JSX 語法中表達另一段 JSX 語法作為子元素」都算是表達式的類型，但在第二種情境下你不寫 { } 也可以，因為 JSX 語法也有支援直接在父元素的開標籤與閉標籤之間寫上子元素的標籤，為了可以更貼近過去寫 HTML 語法的開發體驗。</p>\n<h2 id=\"開發者自定義的畫面元件藍圖component\">開發者自定義的畫面元件藍圖：Component</h2>\n<p>總結一下上面我們提到了 React 是以「單向資料流」為原則所設計的 UI 套件/框架，而在 DOM 渲染策略上，使用了「當資料更新後，一律將整個畫面的 DOM element 全部清除，再以最新的原始資料來全部重繪」的策略以實現單向資料流，但為了解決頻繁在 DOM 上進行全部清除又重繪所造成的效能浪費問題，React 並不會直接在 DOM 上做這樣的操作，而是引進 Virtual DOM 的概念先使用 JavaScript 的物件型別格式模擬實際 DOM 的畫面結構來進行全部重繪的動作，這邊的 Virtual DOM 概念在 React 中的實現就是 React element，所以 React element 其實是一個虛擬畫面結構元素，它是作為描述並組成畫面的最小單位。但是在實作上，我們通常不會直接寫一個 React element，而是會把 React element 包在 Component 之中。</p>\n<p>Component 可以想像成是一個模板或積木零組件，是一種由開發者自定義的畫面元件藍圖，它會接收由開發者自訂格式的 props 資料作為參數，並回傳一個 React component 作為畫面區塊的結構。</p>\n<p>我們可以理解一個 Component 回傳的值實際上是一個 React element，而 Component 中除了可以包含對應實際 DOM 的 React element 元素之外，其實也可以包含並呼叫其他的 Component 作為子 Component，就像組裝積木那樣。</p>\n<p>設計 Component 的本質與意義是要依據需求以及邏輯意義進行抽象化，將那些關心的特徵與行為歸納出來，設計一套適用於特定情境和意義範圍的流程或邏輯，並將實作細節封裝起來以便於重用。</p>\n<p>在 function component 時代，我們會以「函式」來定義 Component，因為它所定義的內容是「特定畫面的產生流程與邏輯」，它是一種「描述」，而不是一塊已經產生好的固定畫面本身。所以同樣的 Component（想像成藍圖）被呼叫多次，每一次被呼叫出來的 Component（想像成實例）之間是相互獨立的，因此完全可以根據需求去分別做客製化。</p>\n<p>實際語法操作上，Component 命名中的首字母必須為大寫，不然會和一般的元素標籤搞混。這樣當標籤名稱為小寫時，React 在建立 React element 就會將它視為字串；當標籤名稱為大寫時，React 在建立 React element 就會將它視為變數名稱。</p>\n<p>另外，有兩種可以匯出 Component 的方式：default export 和 named export。一個 JS 檔案只能有一個 default export，但可以同時有多個 named export。以 default export 為例，我們可以使用 export default 來匯出 Component；使用 import 元件名稱 from ‘檔案路徑‘ 來匯入 Component。</p>\n<h3 id=\"將特定參數從外部傳遞給-component-內部的機制props\">將特定參數從外部傳遞給 Component 內部的機制：Props</h3>\n<p>Props 的全名是 properties (屬性)，所以 Props 是 Component 的 properties，它是一種可以讓我們在呼叫 Component 的時候，將特定的參數從外部傳遞給 Component 這個藍圖內部的機制，這樣我們就能夠根據傳入的參數來進行一些畫面產生流程的客製化，以應付更多的需求情境。</p>\n<p>React 對於 Component 的 Props 可以傳遞什麼樣的資料型別沒有任何的限制。而值得一提的是，甚至一個 React element 也能作為 Props 的值來傳遞，因為 React element 本身就是個普通的 JavaScript 物件，這為 UI 抽象化設計提供了更多的可能性。</p>\n<p>而需要注意的是，Props 是從外部來的資料，所以在內部中是唯讀/不可被修改的。這實際上是為了維護單向資料流的可靠性，一般 React 會用 Object.freeze(props) 凍結 Props 讓你沒辦法修改，但是會有無法被偵測到的狀況（e.g., 當用像是 push 方法直接修改原本的陣列時），所以要小心！</p>\n<p>實際語法操作上，component function 接收的第一個參數會是 Props 物件，包含我們在調用 Component 時傳入的各種屬性。我們可以直接在定義參數的地方寫 props 或者直接解構取出所需的屬性資料。另外，React 有一個特殊的 Props 叫 children，這個 children prop 在純 React element 中有限制只能是特定型別（前面的 JSX 語法章節有提到各種資料型別作為 React element 的子元素並轉換到 DOM 時的處理行為，並有提醒物件、函式無法轉換，會發生錯誤。），但在 Component 類型的 React element 中則是可以讓 children prop 接受任何類型的值而不受限制，這是因為 Component 的 children prop 具體會被使用在何處，是由開發者自行在 Component 內部決定的。</p>\n<h3 id=\"僅可在-function-component-內頂層作用域中呼叫的特殊函式-aka-react-提供的-apihooks\">僅可在 function component 內頂層作用域中呼叫的特殊函式 aka React 提供的 API：Hooks</h3>\n<p>Hooks 是由 React 提供的 API，是一種僅可以在 function component 內的頂層作用域中才能呼叫的特殊函式，用於將各種 React 的核心特性或功能注入到 Component 當中。</p>\n<p>至於為什麼 Hooks 只可以在 function component 內的頂層作用域中呼叫？這是為了確保 Hooks 的一些內部機制能夠正常的運作，避免造成資料丟失等意外問題，其中最主要的內部機制就是 Component 中的所有 Hooks 在每次 render 中都會依賴於固定的呼叫順序來區別彼此，所以規定這個限制就是為了保證所有 Hooks 在每次的 render 過程中都會被呼叫到。舉一個具體的例子，如果今天有一個 Hook 被放在 if 的條件式內而非頂層作用域中，若第一次 render 此 Component 時 if 的條件為 true，所以這個 Hook 有被執行到；但第二次 render 此 Component 時 if 的條件變成 false，所以裡面的 Hook 就不會被執行到，這邊我們就會發現一個問題：記得前面有說過「Component 中的所有 Hooks 在每次 render 中都會依賴於固定的呼叫順序來區別彼此」，但是如果 Component 中的每一個 Hooks 不是每次 render 時都一定會全部被呼叫到的話，就會導致順序對不起來，所以才會有「Hooks 只可以在 function component 內的頂層作用域中呼叫」的這個限制。</p>\n<p>再往更上層看，為什麼要用呼叫的「順序」，而不是其他方式（e.g., 名稱）來區別彼此？這是因為以順序性函式呼叫的設計可以解決鑽石問題(diamond problem)。</p>\n<p>React 中較常見的 Hooks 包含 useState、useEffect、useCallback、useMemo、useRef、useContext 等，這邊特別針對 useState 和 useEffect 這兩個 Hooks 做初步的介紹：</p>\n<ul>\n<li><strong>定義與存取 State 的 Hook：useState</strong></li>\n</ul>\n<p>在 function component 中，我們可以透過呼叫 useState 這個 Hook 來定義與存取 State。在 React 開發的慣例中，我們通常會以陣列解構的語法來將 useState 回傳的 state 值以及 setState 方法根據商業邏輯上的意義重命名為自訂的變數名稱（e.g., 將代表計數器狀態資料的 state 值變數重命名為 count，並將對應的 setState 方法名為 setCount）。</p>\n<p>同一個 Component 中是可以有多個 state 的，而 React 之所以有辦法辨認同一個 component 中的不同的 state 是因為上面有說明過 Hooks 會用「順序」的方式來記憶和區別彼此的這個特性。</p>\n<p>觸發 Component re-render 的唯一合法方法是透過呼叫 setState 方法去更新 state 值，但要注意的是 setState 方法是非同步的，在呼叫 setState 方法後，React 並不會立即性的觸發 re-render，而是會等待正在執行的事件內的所有程式都結束後，才會開始進行 re-render。</p>\n<p>需要注意的是，上面在介紹 Props 時，我們有提到為了維護單向資料流的可靠性，Props 在 Component 內部中是唯讀/不可被修改的；同理，State 也是一樣，immutable state 是維持 React 資料流可靠性的重要關鍵，State 是用於表示 Component 某個歷史時刻（某次 render）的狀態資料，是一經建立後就不該再被修改的，否則有可能會導致資料流的可靠性被破壞，或是某些機制無法正常運作（e.g., 呼叫 setState 方法時的資料新舊檢查需求、過去 render 的舊 State 仍有被讀取的需求、React 效能優化機制的參考檢查需求），因此在 React 中我們不應該去 mutate 一個物件或陣列型別的 State 資料，而是應該與對待原始型別的值一樣，產生一個新的物件或陣列去取代舊的，但因為這並不是 JavaScript 在物件資料型別的原生特性，所以是必須完全靠開發者自己手動維持並遵守的一個重要原則。</p>\n<ul>\n<li><strong>處理副作用的 Hook：useEffect</strong></li>\n</ul>\n<p>在介紹 useEffect 前，我們可以先來了解 effect：effect = side effect，當一個函式除了回傳一個結果值之外，還會依賴或影響函式外某些系統狀態，又或是與外部環境產生互動時，我們就稱這個函式是帶有副作用的（e.g., 修改函式外的全域變數、讀寫檔案、資料庫操作、網路請求…都是常見的副作用）。而可預測性降低、測試困難、高耦合度、難以維護和理解、優化限制是 effect 會有的負面影響。</p>\n<p>大致了解完 effect 和其會有的負面影響後，我們可以來細看 React component function 中的 effect 可能會有的負面影響包含：</p>\n<ol>\n<li>\n<p>在 React component function 中副作用可能會拖慢甚至阻塞函式本身的計算流程。</p>\n</li>\n<li>\n<p>在 React component function 中函式多次執行所疊加造成的副作用影響難以預測。</p>\n</li>\n<li>\n<p>在 React component function 中副作用的處理涉及到非同步的後續影響時，副作用被多次執行的順序不一定與非同步事件的回應順序相同，而導致 race condition 的問題。</p>\n</li>\n<li>\n<p>在 React component function 中當一個副作用會啟動持續性的監聽類工作（例如註冊某個事件的訂閱），但是沒有處理對應的取消訂閱時，就有可能在 Component unmount 之後仍持續監聽，導致 memory leak 的問題。</p>\n</li>\n</ol>\n<p>而在 React 中要解決副作用可能帶來的負面影響的方法就是使用 useEffect 這個 Hook。</p>\n<p>在使用上需要注意的是，useEffect 是屬於「宣告式(declarative)」的程式設計，我們只會關注預期的結果是什麼模樣（也就是目的地），而不在乎過程中是如何一步一步走到結果的，因此如果你嘗試去控制 effect 函式只會在第一次的 render 才執行的話，其實是違反了 useEffect 本身的設計思維。當我們的 effect 函式的執行效果是依賴於「過程的執行時機」而不是「目的地為何」，則很容易寫出不可靠的副作用處理邏輯。另外也需要了解，useEffect 的用途是「將原始資料同步化到畫面以外的副作用處理上」，而非生命週期 API。</p>\n<p>使用 useEffect 大致包含三大步驟：</p>\n<ol>\n<li>\n<p>定義一個 effect 函式：useEffect 可以從 Component render 的過程中隔離副作用的執行時機，其會將副作用的處理隔離到每次的 render 流程完成之後才執行，以避免副作用的處理直接阻塞畫面的產生與更新，也就是解決上面提到的 React component function 中的 effect 可能會有的第一個負面影響（拖慢/阻塞函式本身的計算流程）。</p>\n</li>\n<li>\n<p>加上 cleanup 函式來清理副作用（如果有需要的話）：useEffect 讓開發者能夠在 component function 中定義副作用的同時，也可以透過定義「cleanup 函式」來指定如何清除該副作用所造成的影響。cleanup 函式會在每次副作用重新執行前以及 Component unmount 時被執行，以避免副作用所造成的影響不斷疊加，也就是解決上面提到的 React component function 中的 effect 可能會有的第二至四個負面影響（包含函式多次執行所疊加造成的副作用影響難以預測、副作用處理涉及到非同步的後續影響時會有 race condition 問題，以及 memory leak 問題）。</p>\n</li>\n<li>\n<p>指定 effect 函式的 dependencies 陣列，以跳過某些不必要的副作用處理（選填）：dependencies 是一種效能優化，而非執行時機的控制，它是用來判斷「何時可以安全地跳過」而不是指定「只有何時才會執行」，當 dependencies 沒有更新時，「跳過執行副作用」的行為並不是絕對保證的，因此請不要欺諞 dependencies！另外要注意的是，「直接不提供 dependencies 參數」與「提供一個空陣列 [ ] 作為 dependencies 參數」，兩者的意義和執行效果是完全不同的。直接不提供 dependencies 參數代表維持 useEffect 的預設行為，也就是每次 render 後都會執行一次 effect 函式；提供一個空陣列 [ ] 作為 dependencies 參數則代表這個 effect 函式沒有依賴任何資料，component 可以在每次 re-render 時都安全的跳過 effect 函式的執行。</p>\n</li>\n</ol>\n<h2 id=\"component-的三大生命週期\">Component 的三大生命週期</h2>\n<p>Component 有三大生命週期，分別為 mount、update，和 unmount</p>\n<h3 id=\"mount--render\">mount = render</h3>\n<p>當一個 component function 首次被呼叫並執行時，它會進行第一次的 render 來產生初始狀態的畫面，這個階段的流程也被稱為 mount。</p>\n<p>mount 的過程會經歷兩個階段，分別為 render phase 和 commit phase：</p>\n<ul>\n<li>\n<p>render phase 會執行 component function，以 Props 與 State 等資料來產生初始畫面的 React element，並將產生好的 React element 交給 commit phase 繼續處理。</p>\n</li>\n<li>\n<p>commit phase 會將 Component 在 render phase 所產生的 React element 全部進行轉換（因為第一次 render 時，瀏覽器的實際 DOM 中還沒有任何這個 Component 實例的畫面區塊所對應的 DOM element），並建立成對應的實際 DOM element，然後透過瀏覽器的 DOM API appendchild() 全部放置到實際畫面中。</p>\n</li>\n</ul>\n<p>mount 流程完成的狀態被稱為「mounted」，意思是 Component 首次的 render 流程執行完成且已經成功的「掛載」到實際的瀏覽器畫面中了，這意謂著你必須在 mounted 之後才能夠從瀏覽器的 DOM 結構中找到這個 Component 所對應的那些 DOM element。</p>\n<p>整個 render 流程可以看作是一種由上而下、由外而內的過程。</p>\n<h3 id=\"update--re-render--reconciliation\">update = re-render = reconciliation</h3>\n<p>當一個 Component 內部的狀態資料發生更新時，React 會再次執行 component function 來產生對應新版資料的新版畫面，這個過程我們稱之為 re-render（再次渲染畫面）或是 reconciliation，也就是 update 階段。</p>\n<p>update 的過程也同樣會經歷到 render phase 和 commit phase 這兩個階段：</p>\n<ul>\n<li>\n<p>在進入到 render phase 之前，會先從呼叫 setState() 開始（前面在介紹 useState 這個 Hook 時我們有簡單提到觸發 Component re-render 的唯一合法方法就是透過呼叫 setState 方法去更新 state 值，因此 update 階段一定是從呼叫 setState() 開始），再來會用 <a href=\"Object.is\">Object.is</a>() 比較既有 state 值與新指定的 state 值是否相同。若是，則直接中斷後續流程；若否，則進入到 render phase。</p>\n</li>\n<li>\n<p>render phase 會先更新 State 資料並 re-render component function，以產生新版的 React element，再來會將新舊版本的兩份 React element 以 diffing 演算法進行結構比較，找出其中差異之處，接著會進入 commit phase。</p>\n</li>\n<li>\n<p>commit phase 會操作更新那些新舊 React element 差異之處所對應的實際 DOM element，以完成瀏覽器的畫面更新。</p>\n</li>\n</ul>\n<p>最後補充說明，雖然觸發 Component re-render 的唯一合法手段是透過呼叫 setState 方法去更新 State 值，但其實觸發 Component re-render 可以分成兩種可能的情況：</p>\n<ol>\n<li>\n<p>Component 本身有定義 State，且該 State 對應的 setState 方法被呼叫時。</p>\n</li>\n<li>\n<p>Component 的父代或祖父代 Component 因為 setState 呼叫而發生了 re-render，所以身為子 Component 的自己也連帶被 re-render。</p>\n</li>\n</ol>\n<h3 id=\"unmount\">unmount</h3>\n<p>當該位置上 Component 類型的 React element 在 re-render 後的新畫面結構中不再出現時，該處所對應的 Component 實例就會進入「unmount」階段，意謂著「該區塊不再需要存在於畫面中」。React 會進行副作用的清理，並且將該 Component 實例所對應的實際 DOM element 從瀏覽器中移除，流程大致如下：</p>\n<ol>\n<li>\n<p>當應用程式新一次 render 的畫面結構中，有某個 Component 類型的 React element 與前一次 render 相比之下不見了，則 React 就會認為該處對應的 Component 實例應該被 unmount。</p>\n</li>\n<li>\n<p>執行 Component 最後一次副作用處理所對應的 cleanup 函式，以清理剩餘的副作用影響。</p>\n</li>\n<li>\n<p>將 Component 實例所對應的實際 DOM element 從瀏覽器中移除。</p>\n</li>\n<li>\n<p>React 會在內部移除對應的 Component 實例，也就是接下來我們要介紹的 Fiber node。這意謂著 Component 實例內的所有 State 等狀態資料都會被丟棄。</p>\n</li>\n</ol>\n<h2 id=\"最新應用程式狀態與畫面結構的本體fiber-node\">最新應用程式狀態與畫面結構的本體：Fiber node</h2>\n<p>Fiber node 在 React 中是作為核心的最新應用程式狀態與畫面結構的本體，其工作是負責保存並維護目前 React 應用程式的最新狀態資料，因此我們會看到 Fiber node 裡面存放了 Component 中各種 Hooks 的相關最新狀態資料，像是當我們在 Component 中呼叫多個 useState 時，Fiber node 就會以 linked list 的資料結構儲存 State 的資料。而除了 State 的資料會被存放在 Fiber node 中，當連續呼叫 setState 方法時的待執行計算序列也會被存放在 Fiber node。</p>\n<p>在 mount 階段，當我們在畫面結構中某處首次 render 出一個 Component 類型的 React element 時，React 就會在整個應用程式的 Fiber node 樹的對應位置建立一個新的 Component 實例，因此精確來說，一個 Component 實例就是指一個 Fiber node。</p>\n<p>在 update 階段，reconciler 會負責去調度 Component 的 render 並將資料的改動更新到 Fiber node 裡，接著將該次 render 出來的 React element 與前一次 render 的 React element 進行比較，並移交 renderer 處理實際 DOM 的操作更新。</p>\n<h2 id=\"總結\">總結</h2>\n<p>在理解完 React 的大致輪廓後，我想從我們寫程式的角度出發來說明我想像中在使用 React 時整個流程大概是如何運作的：通常使用 React 這個 UI 套件/框架來寫前端應用程式時，我們會從使用 JSX 語法來撰寫 Component 出發，而 Component 會回傳一個 React element，產生 React element 後 React 就會在整個應用程式的 Fiber node 樹的對應位置建立/更新 Component 實例，並在裡面存放 Component 中各種 Hooks 的相關最新狀態資料。再來，React 會將產生的 React element 進行轉換並建立成對應的實際 DOM element，以完成瀏覽器的畫面繪製/更新。最後，如果 Component 有用到 useEffect，則會在畫面繪製/更新完成後執行本次 render 版本的 effect 函式，而如果 useEffect 有提供 cleanup 函式，則在執行本次 render 版本的 effect 函式前會先執行前一次 render 版本的 cleanup 函式（若為首次 render 則跳過此環節）。</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.tenlong.com.tw/products/9786263336841\">React 思維進化：一次打破常見的觀念誤解，躍升專業前端開發者</a></p>",{headings:1381,localImagePaths:1430,remoteImagePaths:1431,frontmatter:1432,imagePaths:1436},[1382,1383,1385,1388,1391,1394,1397,1400,1403,1406,1409,1412,1415,1418,1421,1422,1423,1424,1427,1429],{depth:32,slug:145,text:146},{depth:32,slug:1384,text:1384},"起源",{depth:32,slug:1386,text:1387},"開始之前需要先知道的兩個名詞概念","開始之前需要先知道的兩個名詞/概念",{depth:62,slug:1389,text:1390},"瀏覽器開給其他程式語言操作的-api-介面dom","瀏覽器開給其他程式語言操作的 API 介面：DOM",{depth:62,slug:1392,text:1393},"設計模式單向資料流","設計模式：單向資料流",{depth:32,slug:1395,text:1396},"實現單向資料流的-dom-渲染策略","實現單向資料流的 DOM 渲染策略",{depth:32,slug:1398,text:1399},"用-virtual-dom-的概念進行全部重繪以解決直接在-dom-上進行全部重繪的效能問題","用 Virtual DOM 的概念進行全部重繪，以解決直接在 DOM 上進行全部重繪的效能問題",{depth:62,slug:1401,text:1402},"用-virtual-dom-概念的額外好處將畫面管理流程分離成兩個獨立的階段分別為定義階段和實際繪製階段","用 Virtual DOM 概念的額外好處：將畫面管理流程分離成兩個獨立的階段，分別為「定義階段」和「實際繪製階段」",{depth:32,slug:1404,text:1405},"virtual-dom-概念在-react-中的實現react-element","Virtual DOM 概念在 React 中的實現：React element",{depth:32,slug:1407,text:1408},"建立-react-element-方法的語法糖jsx-語法","建立 React element 方法的「語法糖」：JSX 語法",{depth:32,slug:1410,text:1411},"開發者自定義的畫面元件藍圖component","開發者自定義的畫面元件藍圖：Component",{depth:62,slug:1413,text:1414},"將特定參數從外部傳遞給-component-內部的機制props","將特定參數從外部傳遞給 Component 內部的機制：Props",{depth:62,slug:1416,text:1417},"僅可在-function-component-內頂層作用域中呼叫的特殊函式-aka-react-提供的-apihooks","僅可在 function component 內頂層作用域中呼叫的特殊函式 aka React 提供的 API：Hooks",{depth:32,slug:1419,text:1420},"component-的三大生命週期","Component 的三大生命週期",{depth:62,slug:585,text:586},{depth:62,slug:588,text:589},{depth:62,slug:591,text:591},{depth:32,slug:1425,text:1426},"最新應用程式狀態與畫面結構的本體fiber-node","最新應用程式狀態與畫面結構的本體：Fiber node",{depth:32,slug:1428,text:1428},"總結",{depth:32,slug:33,text:34},[],[],{title:1370,subtitle:1371,author:16,imageWebp:531,imagePng:532,imgAlt:529,creationDate:1433,updateDate:1434,tags:1435,featured:136},["Date","2024-08-18T00:00:00.000Z"],["Date","2024-08-18T00:00:00.000Z"],[536],[],{id:607,data:1438,body:1444,filePath:1445,digest:1446,rendered:1447,legacyId:633},{title:1439,subtitle:1440,author:16,imageWebp:612,imagePng:613,imgAlt:610,creationDate:1441,updateDate:1442,tags:1443,featured:23},"HTML 語意化","HTML 語意化就是用合乎語意的 HTML 標籤開發。",["Date","2024-04-07T00:00:00.000Z"],["Date","2024-04-07T00:00:00.000Z"],[617],"HTML 語意化就是用合乎語意的 HTML 標籤開發，像是 `<form>` 標籤或是 `<table>` 標籤。\r\n\r\n目前語意化標籤大約有 100 多項，所有標籤列表可參考 [HTML elements reference - HTML: HyperText Markup Language | MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\r\n\r\n我們會看到標籤會清楚定義它的內容，這樣做的目的是為了可以提升 SEO、提升程式碼可讀性，和增加可訪問性，方便其他設備(像是螢幕閱讀器)解析內容。\r\n\r\n### Reference\r\n\r\n[什麼是 HTML 語意化?｜ExplainThis](https://www.explainthis.io/zh-hant/swe/semantics-in-html)","src/content/zh-tw/semantic-html.md","f1419b9d503b0dde",{html:1448,metadata:1449},"<p>HTML 語意化就是用合乎語意的 HTML 標籤開發，像是 <code>&#x3C;form></code> 標籤或是 <code>&#x3C;table></code> 標籤。</p>\n<p>目前語意化標籤大約有 100 多項，所有標籤列表可參考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">HTML elements reference - HTML: HyperText Markup Language | MDN</a></p>\n<p>我們會看到標籤會清楚定義它的內容，這樣做的目的是為了可以提升 SEO、提升程式碼可讀性，和增加可訪問性，方便其他設備(像是螢幕閱讀器)解析內容。</p>\n<h3 id=\"reference\">Reference</h3>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/semantics-in-html\">什麼是 HTML 語意化?｜ExplainThis</a></p>",{headings:1450,localImagePaths:1452,remoteImagePaths:1453,frontmatter:1454,imagePaths:1458},[1451],{depth:62,slug:33,text:34},[],[],{title:1439,subtitle:1440,author:16,imageWebp:612,imagePng:613,imgAlt:610,creationDate:1455,updateDate:1456,tags:1457,featured:23},["Date","2024-04-07T00:00:00.000Z"],["Date","2024-04-07T00:00:00.000Z"],[617],[],{id:500,data:1460,body:1466,filePath:1467,digest:1468,rendered:1469,legacyId:525},{title:1461,subtitle:1462,author:16,imageWebp:505,imagePng:506,imgAlt:503,creationDate:1463,updateDate:1464,tags:1465,featured:136},"征服 RWD","RWD 是一種設計方式，讓網站能夠在各種設備和螢幕尺寸下進行調整，以最佳化的方式呈現內容。",["Date","2024-03-10T00:00:00.000Z"],["Date","2024-03-10T00:00:00.000Z"],[53],"RWD = Responsive Web Design = 響應式網頁設計，它是一種設計方式，讓網站能夠在各種設備和螢幕尺寸下自適應顯示。\r\n\r\n這代表無論使用者使用的是桌面、筆記型電腦、平板還是手機，網站都會根據設備螢幕大小進行調整，以最佳化的方式呈現內容。\r\n\r\nRWD 的核心目標是提供一致且良好的使用體驗，不需要針對不同設備開發多個版本的網頁。\r\n\r\n而在看了 CSS 大師 [Kevin Powell](https://www.youtube.com/kevinpowell) 推出的 [Conquering Responsive Layouts](https://courses.kevinpowell.co/conquering-responsive-layouts) 這堂課程後，分享一些我整理寫出具有 RWD 網頁可以注意的事和要擁有的思維：\r\n\r\n- 預設的版面都是 responsive 的，是我們設定的 css 破壞了它。\r\n\r\n- 不要設固定尺寸的 width，這樣會無法根據多螢幕自動調整大小，**要使用百分比取代**。\r\n\r\n- 能不用到 heights 就不要用，使用 heights 會因不同螢幕尺寸而破壞版面。\r\n\r\n- 在設定 font-size 時，使用 rem 為相對單位的參考基準點是 html element 的 font-size 大小(預設為 16 px)；使用 em 為相對單位的參考基準點則是它的 parent element 的 font-size 大小(預設為 16 px)。\r\n\r\n- 在設定 margin, padding 以及其他非 font-size 的 css 時，使用 rem 為相對單位的參考基準點是 html element 的 font-size 大小；使用 em 為相對單位的參考基準點則是同一 element 的 font-size 大小。\r\n\r\n- 大部分情況，設定 font-size 較適合使用 rem；設定 margin, padding 較適合使用 em。\r\n\r\n- 使用相對單位可以讓我們在實作 responsive layouts 時，一切變得更簡單。\r\n\r\n  e.g., 只要簡單在 media query 中更改 html element 的 font-size 大小，就可以輕易讓整個網頁在大螢幕上放大。\r\n\r\n  <!-- ```css\r\n  @media (min-width: 700px) {\r\n    html {\r\n      font-size: 25px;\r\n    }\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-1.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n- 使用 max-width 以防止在大螢幕檢視時寬度過大。e.g. 如下：\r\n\r\n  <!-- ```css\r\n  .container {\r\n    background: #23424a;\r\n    color: white;\r\n\r\n    width: 80%;\r\n    max-width: 750px;\r\n    margin: 0 auto;\r\n\r\n    padding: 2em;\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-2.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n- CSS Units: vh, vw, vmin, vmax\r\n\r\n  - vh = viewport height、vw = viewport width。\r\n\r\n  - 若想要讓某元素置中版面，可以將高度直接設定 100vh，並使用 align-items/justify-content: center。\r\n\r\n  - 若想要讓圖片寬度佔總版面寬度的一半，那就是 50vw。\r\n\r\n  - vmin 和 vmax 兩者的差異，在於 min 指的是 vw 和 vh 中較小的一邊；max 則是 vm 和 vh 中較大的一邊。舉例來說，1280px \\* 1600px 的長寬視窗比，vmin 指的就是 1280px；vmax 則是 1600px。而設定的則是比率，例如 120vmin 指的是 1280px \\* 120% 的意思；而 80vmax 指的是 1600px \\* 80% 的意思。\r\n\r\n- 下述兩個設定其實本質上是一樣的，但第一個寫法比較符合直覺，所以我會選擇用第一個。\r\n\r\n  <!-- ```css\r\n  .container {\r\n    width: 100%;\r\n    max-width: 600px;\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-3.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n  <br />\r\n\r\n  <!-- ```css\r\n  .container {\r\n    width: 600px;\r\n    max-width: 100%;\r\n  }\r\n  ``` -->\r\n\r\n  <picture>\r\n    <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-4.webp\" type=\"image/webp\">\r\n    <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n  </picture>\r\n\r\n- 補充: min(), max() and clamp()\r\n\r\n  - min() 寫法：：\r\n\r\n    <!-- ```css\r\n    .content {\r\n      width: min(500px, 70%);\r\n    }\r\n    ``` -->\r\n\r\n    <picture>\r\n      <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-5.webp\" type=\"image/webp\">\r\n      <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n    </picture>\r\n\r\n    上述寫法等同於：\r\n\r\n    <!-- ```css\r\n    .content {\r\n      width: 70%\r\n      max-width: 500px;\r\n    }\r\n    ``` -->\r\n\r\n    <picture>\r\n      <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-6.webp\" type=\"image/webp\">\r\n      <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n    </picture>\r\n\r\n  - clamp() 寫法：\r\n\r\n    <!-- ```css\r\n    .title {\r\n      font-size: clamp(2rem, 5vw, 5rem);\r\n    }\r\n\r\n    .p {\r\n      font-size: clamp(1rem, 1.25vw, 1.25rem);\r\n    }\r\n    ``` -->\r\n\r\n    <picture>\r\n      <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-7.webp\" type=\"image/webp\">\r\n      <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n    </picture>\r\n\r\n### Reference\r\n\r\n[Conquering Responsive Layouts](https://courses.kevinpowell.co/view/courses/conquering-responsive-layouts)","src/content/zh-tw/mastering-responsive-web-design-rwd.md","42990914eff6d08a",{html:1470,metadata:1471},"<p>RWD = Responsive Web Design = 響應式網頁設計，它是一種設計方式，讓網站能夠在各種設備和螢幕尺寸下自適應顯示。</p>\n<p>這代表無論使用者使用的是桌面、筆記型電腦、平板還是手機，網站都會根據設備螢幕大小進行調整，以最佳化的方式呈現內容。</p>\n<p>RWD 的核心目標是提供一致且良好的使用體驗，不需要針對不同設備開發多個版本的網頁。</p>\n<p>而在看了 CSS 大師 <a href=\"https://www.youtube.com/kevinpowell\">Kevin Powell</a> 推出的 <a href=\"https://courses.kevinpowell.co/conquering-responsive-layouts\">Conquering Responsive Layouts</a> 這堂課程後，分享一些我整理寫出具有 RWD 網頁可以注意的事和要擁有的思維：</p>\n<ul>\n<li>\n<p>預設的版面都是 responsive 的，是我們設定的 css 破壞了它。</p>\n</li>\n<li>\n<p>不要設固定尺寸的 width，這樣會無法根據多螢幕自動調整大小，<strong>要使用百分比取代</strong>。</p>\n</li>\n<li>\n<p>能不用到 heights 就不要用，使用 heights 會因不同螢幕尺寸而破壞版面。</p>\n</li>\n<li>\n<p>在設定 font-size 時，使用 rem 為相對單位的參考基準點是 html element 的 font-size 大小(預設為 16 px)；使用 em 為相對單位的參考基準點則是它的 parent element 的 font-size 大小(預設為 16 px)。</p>\n</li>\n<li>\n<p>在設定 margin, padding 以及其他非 font-size 的 css 時，使用 rem 為相對單位的參考基準點是 html element 的 font-size 大小；使用 em 為相對單位的參考基準點則是同一 element 的 font-size 大小。</p>\n</li>\n<li>\n<p>大部分情況，設定 font-size 較適合使用 rem；設定 margin, padding 較適合使用 em。</p>\n</li>\n<li>\n<p>使用相對單位可以讓我們在實作 responsive layouts 時，一切變得更簡單。</p>\n<p>e.g., 只要簡單在 media query 中更改 html element 的 font-size 大小，就可以輕易讓整個網頁在大螢幕上放大。</p>\n<!-- ```css\n@media (min-width: 700px) {\n  html {\n    font-size: 25px;\n  }\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>使用 max-width 以防止在大螢幕檢視時寬度過大。e.g. 如下：</p>\n<!-- ```css\n.container {\n  background: #23424a;\n  color: white;\n\n  width: 80%;\n  max-width: 750px;\n  margin: 0 auto;\n\n  padding: 2em;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>CSS Units: vh, vw, vmin, vmax</p>\n<ul>\n<li>\n<p>vh = viewport height、vw = viewport width。</p>\n</li>\n<li>\n<p>若想要讓某元素置中版面，可以將高度直接設定 100vh，並使用 align-items/justify-content: center。</p>\n</li>\n<li>\n<p>若想要讓圖片寬度佔總版面寬度的一半，那就是 50vw。</p>\n</li>\n<li>\n<p>vmin 和 vmax 兩者的差異，在於 min 指的是 vw 和 vh 中較小的一邊；max 則是 vm 和 vh 中較大的一邊。舉例來說，1280px * 1600px 的長寬視窗比，vmin 指的就是 1280px；vmax 則是 1600px。而設定的則是比率，例如 120vmin 指的是 1280px * 120% 的意思；而 80vmax 指的是 1600px * 80% 的意思。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>下述兩個設定其實本質上是一樣的，但第一個寫法比較符合直覺，所以我會選擇用第一個。</p>\n<!-- ```css\n.container {\n  width: 100%;\n  max-width: 600px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<br>\n<!-- ```css\n.container {\n  width: 600px;\n  max-width: 100%;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>補充: min(), max() and clamp()</p>\n<ul>\n<li>\n<p>min() 寫法：：</p>\n<!-- ```css\n.content {\n  width: min(500px, 70%);\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>上述寫法等同於：</p>\n<!-- ```css\n.content {\n  width: 70%\n  max-width: 500px;\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-6.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>clamp() 寫法：</p>\n<!-- ```css\n.title {\n  font-size: clamp(2rem, 5vw, 5rem);\n}\n\n.p {\n  font-size: clamp(1rem, 1.25vw, 1.25rem);\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/mastering-responsive-web-design-rwd/code-7.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/mastering-responsive-web-design-rwd/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"reference\">Reference</h3>\n<p><a href=\"https://courses.kevinpowell.co/view/courses/conquering-responsive-layouts\">Conquering Responsive Layouts</a></p>",{headings:1472,localImagePaths:1474,remoteImagePaths:1475,frontmatter:1476,imagePaths:1480},[1473],{depth:62,slug:33,text:34},[],[],{title:1461,subtitle:1462,author:16,imageWebp:505,imagePng:506,imgAlt:503,creationDate:1477,updateDate:1478,tags:1479,featured:136},["Date","2024-03-10T00:00:00.000Z"],["Date","2024-03-10T00:00:00.000Z"],[53],[],{id:634,data:1482,body:1488,filePath:1489,digest:1490,rendered:1491,legacyId:679},{title:1483,subtitle:1484,author:16,imageWebp:639,imagePng:640,imgAlt:637,creationDate:1485,updateDate:1486,tags:1487,featured:136},"軟體團隊與 GAI-與 AI 協作的成與敗","分享 AI Your Summer 此系列活動 2023/6/13 場次的筆記。",["Date","2023-07-17T00:00:00.000Z"],["Date","2023-07-17T00:00:00.000Z"],[425],"本文為 [AI Your Summer](https://gai-2023.alphacamp.co/) 此系列活動 [2023/6/13 場次](https://www.accupass.com/event/2305221045441859361432) 筆記分享，內容有經過個人的重新架構，並非當天講座流程，歡迎一起討論交流。\r\n\r\nSpeaker:\r\n\r\n- Mosky（Pinkoi / Architect）\r\n- Caesar (TransIot / Chief Technology Officer)\r\n\r\nHost:\r\n\r\n- Bernard（ALPHA Camp / CEO, Founder）\r\n\r\n## 影響面\r\n\r\n### Q: AI 時代對軟體工程師的影響？(相關問題: 未來軟體工程師這個工作的轉變？Junior 職缺會不會變少？企業以後會不會不需要軟體工程師了？)\r\n\r\nCaesar:「短時間內工程師不會失業，因為目前 AI 還沒有辦法幫忙處理一些抽象的事情，我們目前所需要軟體工程師的工作，都還是基於一些抽象的連結，包含老闆的需求、客戶的需求、天馬行空的需求，他其實都是很不一樣的連結，雖然說很多底層當然都還是 CRUD，可是當你有抽象連結的時候，目前的 AI 它沒有辦法去處理抽象連結這件事情，他是透過人去跟他講一個抽象的問題 > 然後他給予一個具體的結果 > 然後逼近於我們想要的答案 > 然後我們繼續一步步往下走，才有辦法去進行這個結果的過程，所以在這個過程裡面軟體工程師還是有必要。」\r\n\r\nMosky:「我不確定市場會如何去平衡 junior 和 senior 的需求，我聽過很多版本，但我自己也沒有一個很肯定的答案，但是我還滿確定的是你在學習的路上，你的學習方式會跟我們以前很不一樣，也不是說舊的方式就會被丟棄了，我覺得 google 還是很好用，而是他會給你一個嶄新的路，說不定對你而言是更適合的，那一定要去多嘗試多使用這些工具，但也不要全然的相信( ChatGPT 會唬爛 )。整體而言，我不會那麼焦慮，反而會更樂觀看待。」\r\n\r\n### Q: 公司對於工作上 AI 的使用有沒有訂出目標或期待？\r\n\r\nCaesar:「希望 50% 以上的工作使用 AI，可能一個 engineer 搭配一個 AI Assistant；engineer 負責發想、架構、理解整個需求，AI 負責任何一個 framework 和 CRUD 等。」\r\n\r\nMosky:「請大家去探索 AI 可以節省你幾 ％ 的時間？根據這個 metrics 再去衡量大家是不是應該都要使用 AI 到某個節省程度的時間(擴大使用)。公司目前的態度是非常強烈鼓勵大家去嘗試，其實在 Generative AI 年會前原本是比較保守的，但經過 Generative AI 年會後覺得好像不能那麼保守，所以每一個 AI 服務我個人都會代表公司去認真讀過，然後明定說什麼樣的服務是可以用到什麼程度 ex. ChatGPT 絕對不可以傳跟公司有關的資料，因為他東西都會拿來 train。\r\nsum up: 我會用時間當作是衡量的指標，內部會有明確的 guideline 讓大家知道什麼樣的東西可以怎麼樣子用。」\r\n\r\n### Q: AI 時代對程式學習者的影響？軟體工程師需要投入培育的能力技能樹發展有不一樣嗎？有工具後可以往一些更橫向的東西發展？會需要做哪些調整？\r\n\r\nCaesar:「對於 junior 來說必經的路還是會需要經過，以前端工程師為例，我自己的職能就會是 JavaScript、HTML、CSS，這些你還是要懂，甚至是跳一層 React / Vue / Angular 這些東西你有興趣，或是公司在用的，你還是要知道框架怎麼去運作，甚至是 virtual DOM、fiber，或者是整個 event 怎麼去做處理，他的整個 lifecycle 怎麼去進行，這個雖然說 ChatGPT 會跟你講答案，可是你要知道這整個事情是怎麼樣去運作的，那為什麼還是需要知道這件事情呢？因為當你已經知道答案的時候，你才知道怎麼去問答案，如果當你連答案都不曉得的時候，你連他的 lifecycle 定位在哪邊，或者是問題出現在哪個定位點都不曉得，那你怎麼會期待他產出一個對的答案？所以我覺得這是 junior 要面對的課題，然後我覺得嚴峻的未來有可能發生的是其實大部分的工作、大部分的 CRUD、大部分的所有基礎 coding 能力，可能 AI 都已經可以取代你了，然後一個 senior 他搭配一個 AI 就可以做完可能 1 個或 1.5 個 junior developer 能做的事情，那 junior 如果你是從零到想要入門的時候，這一段你可能自己要練苦工、不斷學習，所以 junior 的門檻會提高，工程師的發展需要用更宏觀、抽象的角度去思考。」\r\n\r\nMosky:「我覺得一定是有一個起點，然後你要到達那個終點。以前必須自己敲鍵盤，現在是下 prompt 就可以加速你到終點，可是有一件很重要的事情是你還是必須知道你的終點在哪裡，ChatGPT 是幫助你更快的跑到這個終點，所以對於所有工程師來說，有一件非常重要的事情是，你還是需要知道你的終點在哪裡，這個技能你還是必須培養，而且在人類還需要為產出負責的前提下，一定要有人知道那個終點在哪裡，無論你是 senior 還是 junior，所以一定程度的硬實力是需要培養的，所以我會認為 ChatGPT 他不是取代你，而是去加速你到終點。ex. 終點: 學習到某個技能、完成公司某個需求，那 ChatGPT 可以做的是提供另外一個途徑，幫助你達到你想要獲得的硬實力/軟實力。sum up: 要知道你的終點在哪裡、該培養的硬實力/軟實力還是要去培養，但是在這個過程中，AI 可以幫助你達到你想要做到的事情。」\r\n\r\n- Bernard 幫大家提問: 「我是 junior，我本來就不知道終點在哪裡，我不知道我不知道什麼，所以當我不知道終點在哪裡個時候，我要怎麼去知道終點在哪裡？對於一個要拼入行拿到門票的 junior，你給他的建議是什麼？」\r\n\r\n- Mosky:「junior 定義: 拿到一個擁有 software engineering 這個 title 的工作 (有人願意付錢請你做這件事情)，這個點是一直在變化的，他是一個範圍；十年前和現在的標準不一樣、每間公司的標準也不一樣，每個人需要自己去決定。JD 看一下 > summary & 列出來 > 利用 AI 幫助你學你需要學到的東西 > 應徵上一個願意付錢請你做 software engineering 的工作」\r\n\r\n- Caesar:「AI 工具落地已經是一個既定的事實，所以你要如何習慣/了解 AI 工具能夠幫助你達到什麼樣的境界，然後同時間 AI 的產出你必須要去不斷的質疑他，因為你不知道他到底回答的是正確與否，因為你沒有經驗，然後你其實很多東西還在揣摩的階段，所以當你從 ChatGPT 去 copy paste 一段程式碼的時候，你要知道你 copy paste 這一段到底它代表的意義是什麼，我們以前被稱為 copy paste 大師 > 現在變成 tab 大師，但自然生成的背後，他到底幫你產了什麼東西，我覺得特別對於 junior 一定要去了解他後面到底幫你 import 了什麼 library、幫你加了什麼魔法……」\r\n\r\n## 實作面\r\n\r\n### 有幫助的 use case\r\n\r\n- 本身已經有想法，實作上交給 ChatGPT 做時，ex. refactor / convert (已經知道怎麼改，但又很懶的自己去改的時候)。以下提供範例 (Caesar 提供):\r\n1. js, how to covert to await async [下面提供原程式碼]\r\n2. (若對於上述 ChatGPT 的回答還不滿意，你可以這樣做) plz make it readable, and ez understand\r\n\r\n- 想要了解別人的程式碼時\r\n\r\n- 貼一段你喜歡的 code 風格給他，然後叫他按照那樣的 style 生成\r\n\r\n### 不適合的 use case\r\n\r\nMosky:「需求是人類寫的，還需要另外一個人類再去探索過的東西。」> Bernard 補充: 「換句話說需求需要明確，或許 PM 的工作還可以需要存在???」\r\n\r\nCaesar:「你對於這個結果是不確定的 / 你在問問題的時候就已經沒有方向，在和 ChatGPT 聊，無法往下收斂時，其實會得不到你要的結果。當你問問題的角度本身就不對了，或是你其實也不知道你要的是什麼樣的結果(沒有明確的定調)，你給不明確的東西，ChatGPT 它就像是一個對手一樣，對手越強，它就可以回答得越好；但對手越弱，它就像個弱智，所以你就會覺得它好像在跟一個不是那麼了解我的人在講。」\r\n\r\n**這裡補充一下個人目前使用的心得：**\r\nChatGPT 不一定會把最佳解法告述你，你或許還是可以用它來解決問題，但你知道的愈多，就有辦法引導它回答出更好的答案，所以有一定的基礎能力還是很重要！\r\n\r\nBernard:「做產品有一個 framework: frequency v.s. accuracy，其中 AI 較適合做 frequency 高 、accuracy 低的事情。」","src/content/zh-tw/software-teams-and-gai-successes-and-failures-in-ai-collaboration.md","d39a3de7b9de23ac",{html:1492,metadata:1493},"<p>本文為 <a href=\"https://gai-2023.alphacamp.co/\">AI Your Summer</a> 此系列活動 <a href=\"https://www.accupass.com/event/2305221045441859361432\">2023/6/13 場次</a> 筆記分享，內容有經過個人的重新架構，並非當天講座流程，歡迎一起討論交流。</p>\n<p>Speaker:</p>\n<ul>\n<li>Mosky（Pinkoi / Architect）</li>\n<li>Caesar (TransIot / Chief Technology Officer)</li>\n</ul>\n<p>Host:</p>\n<ul>\n<li>Bernard（ALPHA Camp / CEO, Founder）</li>\n</ul>\n<h2 id=\"影響面\">影響面</h2>\n<h3 id=\"q-ai-時代對軟體工程師的影響相關問題-未來軟體工程師這個工作的轉變junior-職缺會不會變少企業以後會不會不需要軟體工程師了\">Q: AI 時代對軟體工程師的影響？(相關問題: 未來軟體工程師這個工作的轉變？Junior 職缺會不會變少？企業以後會不會不需要軟體工程師了？)</h3>\n<p>Caesar:「短時間內工程師不會失業，因為目前 AI 還沒有辦法幫忙處理一些抽象的事情，我們目前所需要軟體工程師的工作，都還是基於一些抽象的連結，包含老闆的需求、客戶的需求、天馬行空的需求，他其實都是很不一樣的連結，雖然說很多底層當然都還是 CRUD，可是當你有抽象連結的時候，目前的 AI 它沒有辦法去處理抽象連結這件事情，他是透過人去跟他講一個抽象的問題 > 然後他給予一個具體的結果 > 然後逼近於我們想要的答案 > 然後我們繼續一步步往下走，才有辦法去進行這個結果的過程，所以在這個過程裡面軟體工程師還是有必要。」</p>\n<p>Mosky:「我不確定市場會如何去平衡 junior 和 senior 的需求，我聽過很多版本，但我自己也沒有一個很肯定的答案，但是我還滿確定的是你在學習的路上，你的學習方式會跟我們以前很不一樣，也不是說舊的方式就會被丟棄了，我覺得 google 還是很好用，而是他會給你一個嶄新的路，說不定對你而言是更適合的，那一定要去多嘗試多使用這些工具，但也不要全然的相信( ChatGPT 會唬爛 )。整體而言，我不會那麼焦慮，反而會更樂觀看待。」</p>\n<h3 id=\"q-公司對於工作上-ai-的使用有沒有訂出目標或期待\">Q: 公司對於工作上 AI 的使用有沒有訂出目標或期待？</h3>\n<p>Caesar:「希望 50% 以上的工作使用 AI，可能一個 engineer 搭配一個 AI Assistant；engineer 負責發想、架構、理解整個需求，AI 負責任何一個 framework 和 CRUD 等。」</p>\n<p>Mosky:「請大家去探索 AI 可以節省你幾 ％ 的時間？根據這個 metrics 再去衡量大家是不是應該都要使用 AI 到某個節省程度的時間(擴大使用)。公司目前的態度是非常強烈鼓勵大家去嘗試，其實在 Generative AI 年會前原本是比較保守的，但經過 Generative AI 年會後覺得好像不能那麼保守，所以每一個 AI 服務我個人都會代表公司去認真讀過，然後明定說什麼樣的服務是可以用到什麼程度 ex. ChatGPT 絕對不可以傳跟公司有關的資料，因為他東西都會拿來 train。\r\nsum up: 我會用時間當作是衡量的指標，內部會有明確的 guideline 讓大家知道什麼樣的東西可以怎麼樣子用。」</p>\n<h3 id=\"q-ai-時代對程式學習者的影響軟體工程師需要投入培育的能力技能樹發展有不一樣嗎有工具後可以往一些更橫向的東西發展會需要做哪些調整\">Q: AI 時代對程式學習者的影響？軟體工程師需要投入培育的能力技能樹發展有不一樣嗎？有工具後可以往一些更橫向的東西發展？會需要做哪些調整？</h3>\n<p>Caesar:「對於 junior 來說必經的路還是會需要經過，以前端工程師為例，我自己的職能就會是 JavaScript、HTML、CSS，這些你還是要懂，甚至是跳一層 React / Vue / Angular 這些東西你有興趣，或是公司在用的，你還是要知道框架怎麼去運作，甚至是 virtual DOM、fiber，或者是整個 event 怎麼去做處理，他的整個 lifecycle 怎麼去進行，這個雖然說 ChatGPT 會跟你講答案，可是你要知道這整個事情是怎麼樣去運作的，那為什麼還是需要知道這件事情呢？因為當你已經知道答案的時候，你才知道怎麼去問答案，如果當你連答案都不曉得的時候，你連他的 lifecycle 定位在哪邊，或者是問題出現在哪個定位點都不曉得，那你怎麼會期待他產出一個對的答案？所以我覺得這是 junior 要面對的課題，然後我覺得嚴峻的未來有可能發生的是其實大部分的工作、大部分的 CRUD、大部分的所有基礎 coding 能力，可能 AI 都已經可以取代你了，然後一個 senior 他搭配一個 AI 就可以做完可能 1 個或 1.5 個 junior developer 能做的事情，那 junior 如果你是從零到想要入門的時候，這一段你可能自己要練苦工、不斷學習，所以 junior 的門檻會提高，工程師的發展需要用更宏觀、抽象的角度去思考。」</p>\n<p>Mosky:「我覺得一定是有一個起點，然後你要到達那個終點。以前必須自己敲鍵盤，現在是下 prompt 就可以加速你到終點，可是有一件很重要的事情是你還是必須知道你的終點在哪裡，ChatGPT 是幫助你更快的跑到這個終點，所以對於所有工程師來說，有一件非常重要的事情是，你還是需要知道你的終點在哪裡，這個技能你還是必須培養，而且在人類還需要為產出負責的前提下，一定要有人知道那個終點在哪裡，無論你是 senior 還是 junior，所以一定程度的硬實力是需要培養的，所以我會認為 ChatGPT 他不是取代你，而是去加速你到終點。ex. 終點: 學習到某個技能、完成公司某個需求，那 ChatGPT 可以做的是提供另外一個途徑，幫助你達到你想要獲得的硬實力/軟實力。sum up: 要知道你的終點在哪裡、該培養的硬實力/軟實力還是要去培養，但是在這個過程中，AI 可以幫助你達到你想要做到的事情。」</p>\n<ul>\n<li>\n<p>Bernard 幫大家提問: 「我是 junior，我本來就不知道終點在哪裡，我不知道我不知道什麼，所以當我不知道終點在哪裡個時候，我要怎麼去知道終點在哪裡？對於一個要拼入行拿到門票的 junior，你給他的建議是什麼？」</p>\n</li>\n<li>\n<p>Mosky:「junior 定義: 拿到一個擁有 software engineering 這個 title 的工作 (有人願意付錢請你做這件事情)，這個點是一直在變化的，他是一個範圍；十年前和現在的標準不一樣、每間公司的標準也不一樣，每個人需要自己去決定。JD 看一下 > summary &#x26; 列出來 > 利用 AI 幫助你學你需要學到的東西 > 應徵上一個願意付錢請你做 software engineering 的工作」</p>\n</li>\n<li>\n<p>Caesar:「AI 工具落地已經是一個既定的事實，所以你要如何習慣/了解 AI 工具能夠幫助你達到什麼樣的境界，然後同時間 AI 的產出你必須要去不斷的質疑他，因為你不知道他到底回答的是正確與否，因為你沒有經驗，然後你其實很多東西還在揣摩的階段，所以當你從 ChatGPT 去 copy paste 一段程式碼的時候，你要知道你 copy paste 這一段到底它代表的意義是什麼，我們以前被稱為 copy paste 大師 > 現在變成 tab 大師，但自然生成的背後，他到底幫你產了什麼東西，我覺得特別對於 junior 一定要去了解他後面到底幫你 import 了什麼 library、幫你加了什麼魔法……」</p>\n</li>\n</ul>\n<h2 id=\"實作面\">實作面</h2>\n<h3 id=\"有幫助的-use-case\">有幫助的 use case</h3>\n<ul>\n<li>本身已經有想法，實作上交給 ChatGPT 做時，ex. refactor / convert (已經知道怎麼改，但又很懶的自己去改的時候)。以下提供範例 (Caesar 提供):</li>\n</ul>\n<ol>\n<li>js, how to covert to await async [下面提供原程式碼]</li>\n<li>(若對於上述 ChatGPT 的回答還不滿意，你可以這樣做) plz make it readable, and ez understand</li>\n</ol>\n<ul>\n<li>\n<p>想要了解別人的程式碼時</p>\n</li>\n<li>\n<p>貼一段你喜歡的 code 風格給他，然後叫他按照那樣的 style 生成</p>\n</li>\n</ul>\n<h3 id=\"不適合的-use-case\">不適合的 use case</h3>\n<p>Mosky:「需求是人類寫的，還需要另外一個人類再去探索過的東西。」> Bernard 補充: 「換句話說需求需要明確，或許 PM 的工作還可以需要存在???」</p>\n<p>Caesar:「你對於這個結果是不確定的 / 你在問問題的時候就已經沒有方向，在和 ChatGPT 聊，無法往下收斂時，其實會得不到你要的結果。當你問問題的角度本身就不對了，或是你其實也不知道你要的是什麼樣的結果(沒有明確的定調)，你給不明確的東西，ChatGPT 它就像是一個對手一樣，對手越強，它就可以回答得越好；但對手越弱，它就像個弱智，所以你就會覺得它好像在跟一個不是那麼了解我的人在講。」</p>\n<p><strong>這裡補充一下個人目前使用的心得：</strong>\r\nChatGPT 不一定會把最佳解法告述你，你或許還是可以用它來解決問題，但你知道的愈多，就有辦法引導它回答出更好的答案，所以有一定的基礎能力還是很重要！</p>\n<p>Bernard:「做產品有一個 framework: frequency v.s. accuracy，其中 AI 較適合做 frequency 高 、accuracy 低的事情。」</p>",{headings:1494,localImagePaths:1514,remoteImagePaths:1515,frontmatter:1516,imagePaths:1520},[1495,1497,1500,1503,1506,1508,1511],{depth:32,slug:1496,text:1496},"影響面",{depth:62,slug:1498,text:1499},"q-ai-時代對軟體工程師的影響相關問題-未來軟體工程師這個工作的轉變junior-職缺會不會變少企業以後會不會不需要軟體工程師了","Q: AI 時代對軟體工程師的影響？(相關問題: 未來軟體工程師這個工作的轉變？Junior 職缺會不會變少？企業以後會不會不需要軟體工程師了？)",{depth:62,slug:1501,text:1502},"q-公司對於工作上-ai-的使用有沒有訂出目標或期待","Q: 公司對於工作上 AI 的使用有沒有訂出目標或期待？",{depth:62,slug:1504,text:1505},"q-ai-時代對程式學習者的影響軟體工程師需要投入培育的能力技能樹發展有不一樣嗎有工具後可以往一些更橫向的東西發展會需要做哪些調整","Q: AI 時代對程式學習者的影響？軟體工程師需要投入培育的能力技能樹發展有不一樣嗎？有工具後可以往一些更橫向的東西發展？會需要做哪些調整？",{depth:32,slug:1507,text:1507},"實作面",{depth:62,slug:1509,text:1510},"有幫助的-use-case","有幫助的 use case",{depth:62,slug:1512,text:1513},"不適合的-use-case","不適合的 use case",[],[],{title:1483,subtitle:1484,author:16,imageWebp:639,imagePng:640,imgAlt:637,creationDate:1517,updateDate:1518,tags:1519,featured:136},["Date","2023-07-17T00:00:00.000Z"],["Date","2023-07-17T00:00:00.000Z"],[425],[],{id:706,data:1522,body:1528,filePath:1529,digest:1530,rendered:1531,legacyId:731},{title:1523,subtitle:1524,author:16,imageWebp:711,imagePng:712,imgAlt:709,creationDate:1525,updateDate:1526,tags:1527,featured:23},"JavaScript 中 null、undefined 與 undeclared 的區別","null 可以理解為沒有；undefined 可以理解為尚未；undeclared 則是指從未被宣告過。",["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],"null 可以理解為「沒有」，代表的是一個變數的空值。\n\nundefined 可以理解為「尚未」，表示還未定義值，所以如果宣告了某變數但還沒有賦值，就會出現 undefined。\n\nundeclared 則是指從未被宣告過，當還沒宣告某變數就使用會出現 ReferenceError 的錯誤，此時就是屬於 undeclared 的狀態。\n\n## Reference\n\n[JavaScript null、undefined 與 undeclared 的區別?｜ExplainThis](https://www.explainthis.io/zh-hant/swe/js-undefined-null-undeclared)","src/content/zh-tw/the-differences-between-null-undefined-and-undeclared-in-javascript.md","293ca11ee986119b",{html:1532,metadata:1533},"<p>null 可以理解為「沒有」，代表的是一個變數的空值。</p>\n<p>undefined 可以理解為「尚未」，表示還未定義值，所以如果宣告了某變數但還沒有賦值，就會出現 undefined。</p>\n<p>undeclared 則是指從未被宣告過，當還沒宣告某變數就使用會出現 ReferenceError 的錯誤，此時就是屬於 undeclared 的狀態。</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-undefined-null-undeclared\">JavaScript null、undefined 與 undeclared 的區別?｜ExplainThis</a></p>",{headings:1534,localImagePaths:1536,remoteImagePaths:1537,frontmatter:1538,imagePaths:1542},[1535],{depth:32,slug:33,text:34},[],[],{title:1523,subtitle:1524,author:16,imageWebp:711,imagePng:712,imgAlt:709,creationDate:1539,updateDate:1540,tags:1541,featured:23},["Date","2024-11-03T00:00:00.000Z"],["Date","2024-11-03T00:00:00.000Z"],[22],[],{id:776,data:1544,body:1550,filePath:1551,digest:1552,rendered:1553,legacyId:801},{title:1545,subtitle:1546,author:16,imageWebp:781,imagePng:782,imgAlt:779,creationDate:1547,updateDate:1548,tags:1549,featured:23},"JavaScript 的提升(Hoisting)","提升是形容 JavaScript 編譯階段將變數和函式的宣告存入記憶體的概念。",["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],"提升(Hoisting)是用來形容 JavaScript 編譯階段將變數和函式的宣告存入記憶體的概念。其中 var 的提升(hoisting)是指在編譯階段，JavaScript 引擎會將所有的 var 變數宣告提升到該函式作用域的頂端，只不過雖然變數宣告被提升了，但並不會賦值，所以如果提早呼叫該變數會出現 undefined；至於 let/const，如果我們再宣告前就使用會出現 ReferenceError 的錯誤，這會讓人誤以為 let/const 不會提升(hoisting)，但其實 let/const 同樣會有提升(hoisting)的行為，只是和 var 的提升(hoisting)有兩個差異：\n\n- var 會提升到函式作用域(function scope)，但 let/const 只會提升到區塊作用域(block scope)。\n\n- var 在創建變數與定義變數範圍時，會同時將變數值自動初始化為 undefined；但當 let/const 在提升變數到區塊作用域(block scope)範圍時，並不會初始化此變數，這個狀態可以稱之為 uninitialized，也有另一個常見的說法是，let/const 定義的變數目前存在於暫時死區(TDZ, Temporal dead zone)。暫時死區(TDZ, Temporal dead zone)錯誤最主要是為了 const 所設計的，因為如果 const 的提升行為與 var 相同，當我們在宣告前就使用 const 宣告的變數時，會拿到 undefined 的值，但是因為 const 是常數，照規定來說同個作用域中值不應該變動，所以如果先拿到 undefined 後再拿到不同值的設計會不符合規範，因此才要設計暫時死區的錯誤來避免這種情況發生。\n\n再來是函式的宣告也會有提升，與 var 提升的差異是函式提升也會創建好函式物件，因此可以在宣告前呼叫。\n\n但函式提升要注意的是，如果是函式表達式，提升行為會與它宣告的變數一樣，所以如果用 var 宣告的 foo 函式，在宣告前使用時，當時值會是 undefined，因此呼叫 undefined 會報錯：\n\n<!-- ```js\nfoo(); // Uncaught TypeError: foo is not a function\nvar foo = function () {};\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n用 let 宣告的 foo 函式，在宣告前使用時，此時 foo 在暫時死區，因此呼叫 foo 會報錯：\n\n<!-- ```js\nfoo(); // Uncaught ReferenceError: foo is not defined\nlet foo = function () {};\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[什麼是提升 (Hoisting)？｜ExplainThis](https://www.explainthis.io/zh-hant/swe/hoisting)","src/content/zh-tw/understanding-javascript-hoisting.md","7ea642b993ce9cbe",{html:1554,metadata:1555},"<p>提升(Hoisting)是用來形容 JavaScript 編譯階段將變數和函式的宣告存入記憶體的概念。其中 var 的提升(hoisting)是指在編譯階段，JavaScript 引擎會將所有的 var 變數宣告提升到該函式作用域的頂端，只不過雖然變數宣告被提升了，但並不會賦值，所以如果提早呼叫該變數會出現 undefined；至於 let/const，如果我們再宣告前就使用會出現 ReferenceError 的錯誤，這會讓人誤以為 let/const 不會提升(hoisting)，但其實 let/const 同樣會有提升(hoisting)的行為，只是和 var 的提升(hoisting)有兩個差異：</p>\n<ul>\n<li>\n<p>var 會提升到函式作用域(function scope)，但 let/const 只會提升到區塊作用域(block scope)。</p>\n</li>\n<li>\n<p>var 在創建變數與定義變數範圍時，會同時將變數值自動初始化為 undefined；但當 let/const 在提升變數到區塊作用域(block scope)範圍時，並不會初始化此變數，這個狀態可以稱之為 uninitialized，也有另一個常見的說法是，let/const 定義的變數目前存在於暫時死區(TDZ, Temporal dead zone)。暫時死區(TDZ, Temporal dead zone)錯誤最主要是為了 const 所設計的，因為如果 const 的提升行為與 var 相同，當我們在宣告前就使用 const 宣告的變數時，會拿到 undefined 的值，但是因為 const 是常數，照規定來說同個作用域中值不應該變動，所以如果先拿到 undefined 後再拿到不同值的設計會不符合規範，因此才要設計暫時死區的錯誤來避免這種情況發生。</p>\n</li>\n</ul>\n<p>再來是函式的宣告也會有提升，與 var 提升的差異是函式提升也會創建好函式物件，因此可以在宣告前呼叫。</p>\n<p>但函式提升要注意的是，如果是函式表達式，提升行為會與它宣告的變數一樣，所以如果用 var 宣告的 foo 函式，在宣告前使用時，當時值會是 undefined，因此呼叫 undefined 會報錯：</p>\n<!-- ```js\nfoo(); // Uncaught TypeError: foo is not a function\nvar foo = function () {};\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>用 let 宣告的 foo 函式，在宣告前使用時，此時 foo 在暫時死區，因此呼叫 foo 會報錯：</p>\n<!-- ```js\nfoo(); // Uncaught ReferenceError: foo is not defined\nlet foo = function () {};\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-hoisting/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-hoisting/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/hoisting\">什麼是提升 (Hoisting)？｜ExplainThis</a></p>",{headings:1556,localImagePaths:1558,remoteImagePaths:1559,frontmatter:1560,imagePaths:1564},[1557],{depth:32,slug:33,text:34},[],[],{title:1545,subtitle:1546,author:16,imageWebp:781,imagePng:782,imgAlt:779,creationDate:1561,updateDate:1562,tags:1563,featured:23},["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],[],{id:732,data:1566,body:1572,filePath:1573,digest:1574,rendered:1575,legacyId:775},{title:1567,subtitle:1568,author:16,imageWebp:737,imagePng:738,imgAlt:735,creationDate:1569,updateDate:1570,tags:1571,featured:23},"JavaScript 的閉包(Closure)","閉包就是內部函式能夠取得函式外部的變數，並且記住這個變數。",["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],"## 什麼是閉包?\n\n閉包就是內部函式能夠取得函式外部的變數，並且記住這個變數。\n\n## 閉包的應用場景\n\n### 狀態保存\n\n在寫程式時，我們很常會需要記住某個狀態，React 套件就有提供一個 useState 讓開發者來管理狀態。\n\n簡化版 useState 實作範例：\n\n<!-- ```js\nfunction useState(initialState) {\n  let state = initialState;\n\n  function getState() {\n    return state;\n  }\n\n  function setState(updatedState) {\n    state = updatedState;\n  }\n\n  return [getState, setState];\n}\n\nconst [count, setCount] = useState(0);\n\ncount(); // 0\nsetCount(1);\ncount(); // 1\nsetCount(500);\ncount(); // 500\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n### 快取(cache)機制\n\n因為閉包可以讓內部函式記住外部的變數，我們可以依照這個特性，透過閉包來實現快取(cache)機制。\n\n手寫快取(cache)機制：\n\n<!-- ```js\nfunction memoize(fn) {\n  const cache = {};\n\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (key in cache) {\n      return cache[key];\n    } else {\n      const val = fn(...args);\n      cache[key] = val;\n      return val;\n    }\n  };\n}\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n### 模擬私有變數\n\n許多程式語言有宣告私有方法的語法，這些私有變數對於外部來講是隱藏的，這是一項很重要的特性，因為有時候我們在開發的程式碼內部細節，並不想讓外部來獲取。JavaScript 並不支援私有變數，但我們可以透過閉包做出類似的功能。\n\n模擬私有變數實作範例：\n\n<!-- ```js\nvar counter = (function () {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function () {\n      changeBy(1);\n    },\n    decrement: function () {\n      changeBy(-1);\n    },\n    value: function () {\n      return privateCounter;\n    },\n  };\n})();\n\nconsole.log(counter.value()); // logs 0\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // logs 2\ncounter.decrement();\nconsole.log(counter.value()); // logs 1\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## 閉包的缺點：記憶體洩漏(memory leak)\n\n閉包雖然很好用，但由於閉包會讓內部函式記得外部的變數，所以當閉包保持對不再需要的變數的引用時，這些變數會無法被垃圾回收機制釋放，導致變數常駐在記憶體當中，如果使用過多可能會造成記憶體洩漏(memory leak)，需要小心使用。\n\n上面提到的垃圾回收機制是 JavaScript 提供的一個機制，幫助開發者管理記憶體，而不需要手動釋放記憶體。在 JavaScript 中，垃圾回收算法稱為標記清除 (Mark-and-sweep)。它從根（即全局對象）開始，找到所有從根引用的對象，然後找到這些對象引用的所有對象，依此反覆進行。如果一個對象無法通過這個算法到達，它將被垃圾回收。一個對象是否仍然可以從根到達，是決定該對象是否會被垃圾回收的關鍵。而記憶體洩漏則發生在你實際上不再使用一個對象，但它仍然是可達的情況下。具體來說，會是當你不再需要某個東西，但對該東西的引用仍存在，所以該東西不會被垃圾回收，進而導致記憶體洩漏。\n\n## Reference\n\n[什麼是閉包 (Closure)？｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/what-is-closure)","src/content/zh-tw/understanding-javascript-closures.md","978bb4e5109c16aa",{html:1576,metadata:1577},"<h2 id=\"什麼是閉包\">什麼是閉包?</h2>\n<p>閉包就是內部函式能夠取得函式外部的變數，並且記住這個變數。</p>\n<h2 id=\"閉包的應用場景\">閉包的應用場景</h2>\n<h3 id=\"狀態保存\">狀態保存</h3>\n<p>在寫程式時，我們很常會需要記住某個狀態，React 套件就有提供一個 useState 讓開發者來管理狀態。</p>\n<p>簡化版 useState 實作範例：</p>\n<!-- ```js\nfunction useState(initialState) {\n  let state = initialState;\n\n  function getState() {\n    return state;\n  }\n\n  function setState(updatedState) {\n    state = updatedState;\n  }\n\n  return [getState, setState];\n}\n\nconst [count, setCount] = useState(0);\n\ncount(); // 0\nsetCount(1);\ncount(); // 1\nsetCount(500);\ncount(); // 500\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"快取cache機制\">快取(cache)機制</h3>\n<p>因為閉包可以讓內部函式記住外部的變數，我們可以依照這個特性，透過閉包來實現快取(cache)機制。</p>\n<p>手寫快取(cache)機制：</p>\n<!-- ```js\nfunction memoize(fn) {\n  const cache = {};\n\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (key in cache) {\n      return cache[key];\n    } else {\n      const val = fn(...args);\n      cache[key] = val;\n      return val;\n    }\n  };\n}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h3 id=\"模擬私有變數\">模擬私有變數</h3>\n<p>許多程式語言有宣告私有方法的語法，這些私有變數對於外部來講是隱藏的，這是一項很重要的特性，因為有時候我們在開發的程式碼內部細節，並不想讓外部來獲取。JavaScript 並不支援私有變數，但我們可以透過閉包做出類似的功能。</p>\n<p>模擬私有變數實作範例：</p>\n<!-- ```js\nvar counter = (function () {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function () {\n      changeBy(1);\n    },\n    decrement: function () {\n      changeBy(-1);\n    },\n    value: function () {\n      return privateCounter;\n    },\n  };\n})();\n\nconsole.log(counter.value()); // logs 0\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); // logs 2\ncounter.decrement();\nconsole.log(counter.value()); // logs 1\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-closures/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-closures/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"閉包的缺點記憶體洩漏memory-leak\">閉包的缺點：記憶體洩漏(memory leak)</h2>\n<p>閉包雖然很好用，但由於閉包會讓內部函式記得外部的變數，所以當閉包保持對不再需要的變數的引用時，這些變數會無法被垃圾回收機制釋放，導致變數常駐在記憶體當中，如果使用過多可能會造成記憶體洩漏(memory leak)，需要小心使用。</p>\n<p>上面提到的垃圾回收機制是 JavaScript 提供的一個機制，幫助開發者管理記憶體，而不需要手動釋放記憶體。在 JavaScript 中，垃圾回收算法稱為標記清除 (Mark-and-sweep)。它從根（即全局對象）開始，找到所有從根引用的對象，然後找到這些對象引用的所有對象，依此反覆進行。如果一個對象無法通過這個算法到達，它將被垃圾回收。一個對象是否仍然可以從根到達，是決定該對象是否會被垃圾回收的關鍵。而記憶體洩漏則發生在你實際上不再使用一個對象，但它仍然是可達的情況下。具體來說，會是當你不再需要某個東西，但對該東西的引用仍存在，所以該東西不會被垃圾回收，進而導致記憶體洩漏。</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-closure\">什麼是閉包 (Closure)？｜ ExplainThis</a></p>",{headings:1578,localImagePaths:1595,remoteImagePaths:1596,frontmatter:1597,imagePaths:1601},[1579,1582,1584,1586,1589,1591,1594],{depth:32,slug:1580,text:1581},"什麼是閉包","什麼是閉包?",{depth:32,slug:1583,text:1583},"閉包的應用場景",{depth:62,slug:1585,text:1585},"狀態保存",{depth:62,slug:1587,text:1588},"快取cache機制","快取(cache)機制",{depth:62,slug:1590,text:1590},"模擬私有變數",{depth:32,slug:1592,text:1593},"閉包的缺點記憶體洩漏memory-leak","閉包的缺點：記憶體洩漏(memory leak)",{depth:32,slug:33,text:34},[],[],{title:1567,subtitle:1568,author:16,imageWebp:737,imagePng:738,imgAlt:735,creationDate:1598,updateDate:1599,tags:1600,featured:23},["Date","2024-12-08T00:00:00.000Z"],["Date","2024-12-08T00:00:00.000Z"],[22],[],{id:680,data:1603,body:1609,filePath:1610,digest:1611,rendered:1612,legacyId:705},{title:1604,subtitle:1605,author:16,imageWebp:685,imagePng:686,imgAlt:683,creationDate:1606,updateDate:1607,tags:1608,featured:23},"JavaScript 的 this","在 JavaScript 中，this 的值是動態的，通常會由被呼叫的函式來決定。所以，影響 this 的值不是宣告的時機，關鍵在於在哪裡被調用。",["Date","2024-10-15T00:00:00.000Z"],["Date","2024-10-15T00:00:00.000Z"],[22],"在 JavaScript 中，this  的值是動態的，通常會由被呼叫的函式來決定。所以，影響  this  的值不是宣告的時機，關鍵在於在哪裡被調用。\n\n而 this 值有 5 種判斷的方式，包含：\n\n1. 一般函式調用會指向全局物件，若是在非嚴格模式下的瀏覽器會默認為  Window；嚴格模式下 this  則為  undefined。\n\n2. 當一個函式是做為一個物件的方法來調用時，this  會指向這個物件。\n\n3. 當一個函式用  new  關鍵字調用時，此函式執行前會先創造一個新的物件，this  會指向這個新組成的物件。\n\n4. 我們也可以使用  apply、call、bind  方法來指定  this  指向的物件。\n\n5. ES6 後出現的箭頭函式(arrow function)並沒有屬於自己的  this  值，它會從本身最近的外在函式繼承他的 this，如果它的外在函式也是箭頭函式，就會再繼續往上尋找，直到找到全域環境的預設  this  值(例如：瀏覽器中就是  window)。\n\n## Reference\n\n[解釋 JavaScript 中 this 的值?｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/what-is-this)","src/content/zh-tw/this-in-javascript.md","435b798c9f056d88",{html:1613,metadata:1614},"<p>在 JavaScript 中，this  的值是動態的，通常會由被呼叫的函式來決定。所以，影響  this  的值不是宣告的時機，關鍵在於在哪裡被調用。</p>\n<p>而 this 值有 5 種判斷的方式，包含：</p>\n<ol>\n<li>\n<p>一般函式調用會指向全局物件，若是在非嚴格模式下的瀏覽器會默認為  Window；嚴格模式下 this  則為  undefined。</p>\n</li>\n<li>\n<p>當一個函式是做為一個物件的方法來調用時，this  會指向這個物件。</p>\n</li>\n<li>\n<p>當一個函式用  new  關鍵字調用時，此函式執行前會先創造一個新的物件，this  會指向這個新組成的物件。</p>\n</li>\n<li>\n<p>我們也可以使用  apply、call、bind  方法來指定  this  指向的物件。</p>\n</li>\n<li>\n<p>ES6 後出現的箭頭函式(arrow function)並沒有屬於自己的  this  值，它會從本身最近的外在函式繼承他的 this，如果它的外在函式也是箭頭函式，就會再繼續往上尋找，直到找到全域環境的預設  this  值(例如：瀏覽器中就是  window)。</p>\n</li>\n</ol>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/what-is-this\">解釋 JavaScript 中 this 的值?｜ ExplainThis</a></p>",{headings:1615,localImagePaths:1617,remoteImagePaths:1618,frontmatter:1619,imagePaths:1623},[1616],{depth:32,slug:33,text:34},[],[],{title:1604,subtitle:1605,author:16,imageWebp:685,imagePng:686,imgAlt:683,creationDate:1620,updateDate:1621,tags:1622,featured:23},["Date","2024-10-15T00:00:00.000Z"],["Date","2024-10-15T00:00:00.000Z"],[22],[],{id:802,data:1625,body:1631,filePath:1632,digest:1633,rendered:1634,legacyId:842},{title:1626,subtitle:1627,author:16,imageWebp:807,imagePng:808,imgAlt:805,creationDate:1628,updateDate:1629,tags:1630,featured:23},"JavaScript 原型(prototype)相關","在 JavaScript 中，原型(prototype)是物件導向程式語言中非常重要的概念，它們是 JavaScript 中實現繼承和屬性共享的關鍵。",["Date","2024-10-16T00:00:00.000Z"],["Date","2024-10-16T00:00:00.000Z"],[22],"## 原型(`prototype`)\n\nJavaScript 是一個以「原型」為基礎的物件導向程式語言。在 JavaScript 中，每個物件都包含了一個  `[[Prototype]]`  內部隱藏屬性，這個屬性對應到的就是該物件的原型(`prototype`)，值有可能是  null 或是指向另一個物件。\n\n## `[[Prototype]]`  和 `__proto__`\n\n在 JavaScript 中，每個物件都包含了一個 `[[Prototype]]`  內部隱藏屬性，這個屬性對應到的就是該物件的原型(`prototype`)，值有可能是 null 或是指向另一個物件。\n\n因為  `[[Prototype]]`  為內部隱藏屬性並無法直接被訪問到，所以瀏覽器提供了 `__proto__` 的訪問方法。但要注意的是，`__proto__`  方法並不在 ECMAScript 規範中，實際上開發要取得物件的原型會使用 `Object.getPrototypeOf`。\n\n`prototype`、`__proto__`、`Object.getPrototypeOf` 方法實作範例：\n\n<!-- ```js\nfunction Person() {}\nconst personA = new Person();\nconsole.log(personA.__proto__); // {constructor: ƒ}\n\npersonA.__proto__ === Person.prototype; // true\nObject.getPrototypeOf(personA) === Person.prototype; // true\npersonA.__proto__ === Object.getPrototypeOf(personA); // true\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## `__proto__`  屬性和  `prototype` 屬性\n\n`__proto__` 和 `prototype`  是不同的屬性。 `__proto__`  是每個物件的一個隱藏屬性，每個物件可以由  `__proto__`  訪問到它的原型。而  `prototype` 是存在於所有構造函式中的一個屬性，構造函式的 `prototype`  其實和 `__proto__`  會指向同一個地方的，這個地方就叫做原型對象。\n\n<!-- ```js\n// Person is a constructor function\nfunction Person() {}\n\n// Create a personA object\n// through the Person constructor function\nconst personA = new Person();\n\npersonA.__proto__ === Person.prototype; // true\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## 原型鏈(prototype chain)\n\n原型(prototype)本身是一種物件，因此它也擁有自己的原型。當我們試圖訪問某個物件的屬性時，如果這個物件沒有所需的屬性，它會在其原型(prototype)中尋找。如果原型(prototype)中仍然沒有找到，它將會繼續往上一層查找，直到找到，或者到達 null 為止。這條連續的路徑被稱為原型鏈(prototype chain)，鏈的終點值為 null。\n\n- 原型鏈(prototype chain)的終點值為 null：\n\n  <!-- ```js\n  personA.__proto__.__proto__.__proto__ === null;\n  ``` -->\n\n  <picture>\n    <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-3.webp\" type=\"image/webp\">\n    <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n  </picture>\n\n- 原型鏈(prototype chain)的實作範例：\n\n  我們經常使用陣列的 filter  方法。假設現在有一個陣列 「list」，我們在這個陣列上使用  filter 方法。但事實上，filter 方法並不存在於這個 list，它存在於 Array  這個構造函式上。我們今天能使用 filter  方法，也是通過原型鏈(prototype chain)實現的。\n\n## 原型繼承(prototypal inheritance)\n\n原型繼承可以讓本來沒有某個屬性的物件去存取其他物件的屬性。所以假設今天有一個物件「animal」，這個物件擁有自己的屬性和方法。同時我們又想建立兩個基於「animal」的物件，分別為分別為「cat」和「dog」，這兩個物件會有一些獨特的方法和屬性，但同時又需要用到「animal」物件的方法和屬性。在這樣的情境下，我們不需要透過複製或重新實現，可以透過原型繼承來達成這個目的。\n\n原型繼承(prototypal inheritance)實作範例：\n\n<!-- ```js\n// Constructor function Animal\nfunction Animal() {}\n\n// Instance of Animal\nconst cat = new Animal();\n\n// Add a method to the prototype object\nAnimal.prototype.sleep = function () {\n  console.log(\"sleep\");\n};\n\n// Use the method of\n// the constructor function's prototype\ncat.sleep(); // sleep\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[原型 (prototype)、原型鏈 (prototype chain) 、原型繼承 (prototypal inheritance)｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/most-common-js-prototype-questions)","src/content/zh-tw/understanding-javascript-prototype.md","363380d548acc791",{html:1635,metadata:1636},"<h2 id=\"原型prototype\">原型(<code>prototype</code>)</h2>\n<p>JavaScript 是一個以「原型」為基礎的物件導向程式語言。在 JavaScript 中，每個物件都包含了一個  <code>[[Prototype]]</code>  內部隱藏屬性，這個屬性對應到的就是該物件的原型(<code>prototype</code>)，值有可能是  null 或是指向另一個物件。</p>\n<h2 id=\"prototype-和-__proto__\"><code>[[Prototype]]</code>  和 <code>__proto__</code></h2>\n<p>在 JavaScript 中，每個物件都包含了一個 <code>[[Prototype]]</code>  內部隱藏屬性，這個屬性對應到的就是該物件的原型(<code>prototype</code>)，值有可能是 null 或是指向另一個物件。</p>\n<p>因為  <code>[[Prototype]]</code>  為內部隱藏屬性並無法直接被訪問到，所以瀏覽器提供了 <code>__proto__</code> 的訪問方法。但要注意的是，<code>__proto__</code>  方法並不在 ECMAScript 規範中，實際上開發要取得物件的原型會使用 <code>Object.getPrototypeOf</code>。</p>\n<p><code>prototype</code>、<code>__proto__</code>、<code>Object.getPrototypeOf</code> 方法實作範例：</p>\n<!-- ```js\nfunction Person() {}\nconst personA = new Person();\nconsole.log(personA.__proto__); // {constructor: ƒ}\n\npersonA.__proto__ === Person.prototype; // true\nObject.getPrototypeOf(personA) === Person.prototype; // true\npersonA.__proto__ === Object.getPrototypeOf(personA); // true\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"__proto__-屬性和-prototype-屬性\"><code>__proto__</code>  屬性和  <code>prototype</code> 屬性</h2>\n<p><code>__proto__</code> 和 <code>prototype</code>  是不同的屬性。 <code>__proto__</code>  是每個物件的一個隱藏屬性，每個物件可以由  <code>__proto__</code>  訪問到它的原型。而  <code>prototype</code> 是存在於所有構造函式中的一個屬性，構造函式的 <code>prototype</code>  其實和 <code>__proto__</code>  會指向同一個地方的，這個地方就叫做原型對象。</p>\n<!-- ```js\n// Person is a constructor function\nfunction Person() {}\n\n// Create a personA object\n// through the Person constructor function\nconst personA = new Person();\n\npersonA.__proto__ === Person.prototype; // true\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"原型鏈prototype-chain\">原型鏈(prototype chain)</h2>\n<p>原型(prototype)本身是一種物件，因此它也擁有自己的原型。當我們試圖訪問某個物件的屬性時，如果這個物件沒有所需的屬性，它會在其原型(prototype)中尋找。如果原型(prototype)中仍然沒有找到，它將會繼續往上一層查找，直到找到，或者到達 null 為止。這條連續的路徑被稱為原型鏈(prototype chain)，鏈的終點值為 null。</p>\n<ul>\n<li>\n<p>原型鏈(prototype chain)的終點值為 null：</p>\n<!-- ```js\npersonA.__proto__.__proto__.__proto__ === null;\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n</li>\n<li>\n<p>原型鏈(prototype chain)的實作範例：</p>\n<p>我們經常使用陣列的 filter  方法。假設現在有一個陣列 「list」，我們在這個陣列上使用  filter 方法。但事實上，filter 方法並不存在於這個 list，它存在於 Array  這個構造函式上。我們今天能使用 filter  方法，也是通過原型鏈(prototype chain)實現的。</p>\n</li>\n</ul>\n<h2 id=\"原型繼承prototypal-inheritance\">原型繼承(prototypal inheritance)</h2>\n<p>原型繼承可以讓本來沒有某個屬性的物件去存取其他物件的屬性。所以假設今天有一個物件「animal」，這個物件擁有自己的屬性和方法。同時我們又想建立兩個基於「animal」的物件，分別為分別為「cat」和「dog」，這兩個物件會有一些獨特的方法和屬性，但同時又需要用到「animal」物件的方法和屬性。在這樣的情境下，我們不需要透過複製或重新實現，可以透過原型繼承來達成這個目的。</p>\n<p>原型繼承(prototypal inheritance)實作範例：</p>\n<!-- ```js\n// Constructor function Animal\nfunction Animal() {}\n\n// Instance of Animal\nconst cat = new Animal();\n\n// Add a method to the prototype object\nAnimal.prototype.sleep = function () {\n  console.log(\"sleep\");\n};\n\n// Use the method of\n// the constructor function's prototype\ncat.sleep(); // sleep\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-javascript-prototype/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-javascript-prototype/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/most-common-js-prototype-questions\">原型 (prototype)、原型鏈 (prototype chain) 、原型繼承 (prototypal inheritance)｜ ExplainThis</a></p>",{headings:1637,localImagePaths:1654,remoteImagePaths:1655,frontmatter:1656,imagePaths:1660},[1638,1641,1644,1647,1650,1653],{depth:32,slug:1639,text:1640},"原型prototype","原型(prototype)",{depth:32,slug:1642,text:1643},"prototype-和-__proto__","[[Prototype]]  和 __proto__",{depth:32,slug:1645,text:1646},"__proto__-屬性和-prototype-屬性","__proto__  屬性和  prototype 屬性",{depth:32,slug:1648,text:1649},"原型鏈prototype-chain","原型鏈(prototype chain)",{depth:32,slug:1651,text:1652},"原型繼承prototypal-inheritance","原型繼承(prototypal inheritance)",{depth:32,slug:33,text:34},[],[],{title:1626,subtitle:1627,author:16,imageWebp:807,imagePng:808,imgAlt:805,creationDate:1657,updateDate:1658,tags:1659,featured:23},["Date","2024-10-16T00:00:00.000Z"],["Date","2024-10-16T00:00:00.000Z"],[22],[],{id:843,data:1662,body:1668,filePath:1669,digest:1670,rendered:1671,legacyId:900},{title:1663,subtitle:1664,author:16,imageWebp:848,imagePng:849,imgAlt:846,creationDate:1665,updateDate:1666,tags:1667,featured:23},"關於 JavaScript 的 Map、WeakMap、Set 和 WeakSet","Map/WeakMap 是類似於 Object 的資料結構；Set/WeakSet 的資料結構則類似於陣列。",["Date","2024-11-17T00:00:00.000Z"],["Date","2024-11-17T00:00:00.000Z"],[22],"## TL;DR\n\n### Map v.s. WeakMap\n\nMap 是類似於 Object 的資料結構，都是用鍵與值(key-value pair)的形式儲存資料格式；WeakMap 和 Map 的使用方法相似，但有兩個主要不同的地方，分別是只允許 Object 作為鍵(key)和鍵(key)所指向的對象可以被垃圾回收。\n\n### Set v.s. WeakSet\n\nSet 這個數據結構類似陣列，但是裡面的元素值都是唯一，不會有重複的值；WeakSet 和 Set 的使用方法相似，但有兩個主要不同的地方，分別是元素值只能是 Object 和元素可以被垃圾回收。\n\n## Map\n\n### 介紹\n\nMap 是類似於 Object 的資料結構，都是用鍵與值(key-value pair)的形式儲存資料格式。在 JavaScript 當中，Map 本身是一種構造函式，用來生成 Map 這種數據結構，具體做法是  new Map()  來生成實例。\n\n### 常見操作方法\n\n- get(key)：透過鍵(key)查詢特定元素，並返回 value\n\n- set(key, value)：Map 新增元素\n\n- delete(key)：透過鍵(key)從 Map 中移除特定元素\n\n- has(key)：判斷 Map 中是否存在某鍵(key)\n\n- size  方法：取得元素數量\n\n### 常見遍歷方法(遍歷順序會是置放到 Map 時的順序)\n\n- values()：返回 Map 中所有元素的值\n\n- keys()：返回 Map 中所有元素的鍵\n\n- entries()：返回 Map 中所有的元素，返回的會是  [key, value]  的形式\n\n## WeakMap\n\n和 Map 的使用方法相似，但有兩個主要不同的地方：\n\n- WeakMap 只允許 Object 作為鍵(key)，但是  null  除外。\n\n- WeakMap 中的鍵名是「弱引用」(weak reference)，鍵(key)所指向的對象可以被垃圾回收，此時的鍵(key)是無效的。\n\n## Set\n\n### 介紹\n\nSet 這個數據結構類似陣列，但是裡面的元素值都是唯一，不會有重複的值。在 JavaScript 當中，Set 本身是一種構造函式，用來生成 Set 這種數據結構，具體的做法是透過  new Set()  來生成實例。\n\n### 常見操作方法\n\n- add(value)：用來新增值\n\n- delete(value)：用來刪除每個 Set 中的值\n\n- has(value)：判斷 Set 中是否存在每個值\n\n- size  方法：取得元素數量\n\n## WeakSet\n\n和 Set 的使用方法相似，但有兩個主要不同的地方：\n\n- WeakSet 內的元素值只能是 Object（Set 可接受各種資料類型的值）。\n\n- WeakSet 內的元素都是「弱引用」(weak reference)，可以被垃圾回收機制回收。\n\n## Reference\n\n[請解釋 Set、Map、WeakSet 和 WeakMap 的區別？｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/set-map-weakset-weakmap)","src/content/zh-tw/understanding-map-weakmap-set-and-weakset-in-javascript.md","ce19455f6e35d7c9",{html:1672,metadata:1673},"<h2 id=\"tldr\">TL;DR</h2>\n<h3 id=\"map-vs-weakmap\">Map v.s. WeakMap</h3>\n<p>Map 是類似於 Object 的資料結構，都是用鍵與值(key-value pair)的形式儲存資料格式；WeakMap 和 Map 的使用方法相似，但有兩個主要不同的地方，分別是只允許 Object 作為鍵(key)和鍵(key)所指向的對象可以被垃圾回收。</p>\n<h3 id=\"set-vs-weakset\">Set v.s. WeakSet</h3>\n<p>Set 這個數據結構類似陣列，但是裡面的元素值都是唯一，不會有重複的值；WeakSet 和 Set 的使用方法相似，但有兩個主要不同的地方，分別是元素值只能是 Object 和元素可以被垃圾回收。</p>\n<h2 id=\"map\">Map</h2>\n<h3 id=\"介紹\">介紹</h3>\n<p>Map 是類似於 Object 的資料結構，都是用鍵與值(key-value pair)的形式儲存資料格式。在 JavaScript 當中，Map 本身是一種構造函式，用來生成 Map 這種數據結構，具體做法是  new Map()  來生成實例。</p>\n<h3 id=\"常見操作方法\">常見操作方法</h3>\n<ul>\n<li>\n<p>get(key)：透過鍵(key)查詢特定元素，並返回 value</p>\n</li>\n<li>\n<p>set(key, value)：Map 新增元素</p>\n</li>\n<li>\n<p>delete(key)：透過鍵(key)從 Map 中移除特定元素</p>\n</li>\n<li>\n<p>has(key)：判斷 Map 中是否存在某鍵(key)</p>\n</li>\n<li>\n<p>size  方法：取得元素數量</p>\n</li>\n</ul>\n<h3 id=\"常見遍歷方法遍歷順序會是置放到-map-時的順序\">常見遍歷方法(遍歷順序會是置放到 Map 時的順序)</h3>\n<ul>\n<li>\n<p>values()：返回 Map 中所有元素的值</p>\n</li>\n<li>\n<p>keys()：返回 Map 中所有元素的鍵</p>\n</li>\n<li>\n<p>entries()：返回 Map 中所有的元素，返回的會是  [key, value]  的形式</p>\n</li>\n</ul>\n<h2 id=\"weakmap\">WeakMap</h2>\n<p>和 Map 的使用方法相似，但有兩個主要不同的地方：</p>\n<ul>\n<li>\n<p>WeakMap 只允許 Object 作為鍵(key)，但是  null  除外。</p>\n</li>\n<li>\n<p>WeakMap 中的鍵名是「弱引用」(weak reference)，鍵(key)所指向的對象可以被垃圾回收，此時的鍵(key)是無效的。</p>\n</li>\n</ul>\n<h2 id=\"set\">Set</h2>\n<h3 id=\"介紹-1\">介紹</h3>\n<p>Set 這個數據結構類似陣列，但是裡面的元素值都是唯一，不會有重複的值。在 JavaScript 當中，Set 本身是一種構造函式，用來生成 Set 這種數據結構，具體的做法是透過  new Set()  來生成實例。</p>\n<h3 id=\"常見操作方法-1\">常見操作方法</h3>\n<ul>\n<li>\n<p>add(value)：用來新增值</p>\n</li>\n<li>\n<p>delete(value)：用來刪除每個 Set 中的值</p>\n</li>\n<li>\n<p>has(value)：判斷 Set 中是否存在每個值</p>\n</li>\n<li>\n<p>size  方法：取得元素數量</p>\n</li>\n</ul>\n<h2 id=\"weakset\">WeakSet</h2>\n<p>和 Set 的使用方法相似，但有兩個主要不同的地方：</p>\n<ul>\n<li>\n<p>WeakSet 內的元素值只能是 Object（Set 可接受各種資料類型的值）。</p>\n</li>\n<li>\n<p>WeakSet 內的元素都是「弱引用」(weak reference)，可以被垃圾回收機制回收。</p>\n</li>\n</ul>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/set-map-weakset-weakmap\">請解釋 Set、Map、WeakSet 和 WeakMap 的區別？｜ ExplainThis</a></p>",{headings:1674,localImagePaths:1696,remoteImagePaths:1697,frontmatter:1698,imagePaths:1702},[1675,1676,1678,1680,1681,1683,1685,1688,1689,1690,1692,1694,1695],{depth:32,slug:861,text:862},{depth:62,slug:864,text:1677},"Map v.s. WeakMap",{depth:62,slug:867,text:1679},"Set v.s. WeakSet",{depth:32,slug:870,text:871},{depth:62,slug:1682,text:1682},"介紹",{depth:62,slug:1684,text:1684},"常見操作方法",{depth:62,slug:1686,text:1687},"常見遍歷方法遍歷順序會是置放到-map-時的順序","常見遍歷方法(遍歷順序會是置放到 Map 時的順序)",{depth:32,slug:880,text:881},{depth:32,slug:883,text:884},{depth:62,slug:1691,text:1682},"介紹-1",{depth:62,slug:1693,text:1684},"常見操作方法-1",{depth:32,slug:890,text:891},{depth:32,slug:33,text:34},[],[],{title:1663,subtitle:1664,author:16,imageWebp:848,imagePng:849,imgAlt:846,creationDate:1699,updateDate:1700,tags:1701,featured:23},["Date","2024-11-17T00:00:00.000Z"],["Date","2024-11-17T00:00:00.000Z"],[22],[],{id:939,data:1704,body:1710,filePath:1711,digest:1712,rendered:1713,legacyId:976},{title:1705,subtitle:1706,author:16,imageWebp:944,imagePng:945,imgAlt:942,creationDate:1707,updateDate:1708,tags:1709,featured:136},"JavaScript 的 splice、slice、split 傻傻分不清楚","splice 用於修改原陣列，可以進行插入、刪除或同時進行；slice 用於提取陣列或字串的部分，並返回新陣列或字串，且不改變原內容；split 會將字串依照指定分隔符號切分為新的陣列，原字串則保持不變。",["Date","2023-08-05T00:00:00.000Z"],["Date","2023-08-05T00:00:00.000Z"],[22],"開始之前直接先附上我整理的總結表格：\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\nsplice、slice、split 在分開看它們時沒什麼感覺，但當三個都遇到一遍後就會覺得似曾相識，分不太清楚彼此的差異，就好像丸子三兄弟一樣，不仔細看清楚並停下來好好分析一番，就會不知道到底什麼情況下應該要用誰？\r\n\r\n<iframe \r\n  width=\"560\" \r\n  height=\"315\" \r\n  src=\"https://www.youtube.com/embed/xTwgS1V_8zQ?si=W21_GQRuBA5UP8Vk\" \r\n  title=\"YouTube video player\" \r\n  frameborder=\"0\" \r\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \r\n  referrerpolicy=\"strict-origin-when-cross-origin\" \r\n  allowfullscreen \r\n  style=\"width: 80%; margin: 0 auto; border-radius: 10px;\"\r\n>\r\n</iframe>\r\n\r\n「丸子三兄弟」是日本 NHK 兒童教育節目《與媽媽同樂》於 1999 年 1 月推出的歌曲，在日本非常紅，歌曲風格超可愛又好聽，推薦可以聽聽看紓壓一下！\r\n\r\n## Table of Contents\r\n\r\n- [長男 splice](#長男-splice)\r\n- [次男 slice](#次男-slice)\r\n- [三男 split](#三男-split)\r\n- [為什麼 slice 可以操作 array 和 string，但 splice 就只能夠操作 array，卻不能操作 string ?](#為什麼-slice-可以操作-array-和-string但-splice-就只能夠操作-array卻不能操作-string)\r\n\r\n## 長男 splice\r\n\r\n[mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) 解釋( Array.prototype.splice() )：\r\n\r\nThe splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.\r\n\r\n在說明 splice 的功能前，先來提醒一下以後在服用「陣列」類型的常用函式時需要注意的事項，就是**知道它所回傳的型態、方式是什麼很重要**。\r\ne.g., 是回傳「陣列」還是「字串」? 回傳的是「一個新的陣列」還是「改變原本的陣列」? 知道後在服用時才比較不會寫出錯誤的程式碼。\r\n\r\n那我們就開始吧！\r\n\r\n**splice 可以做 2 件事：在原「陣列」中 1. 插入元素 2. 刪除元素，也可以兩者同時做 → 它會改變原本的「陣列」，並可以自行定義一個新的變數名稱來接住「被刪除的元素」，若沒有被刪除的元素則會回傳空陣列。**\r\n\r\n來寫一些例子：\r\n\r\n從索引 2 的位置開始，刪除 0 個元素並插入「a」：\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 0, \"a\");\r\nconsole.log(arr1);\r\n// [\r\n//   0, 1, 'a', 2,\r\n//   3, 4, 5, 6\r\n// ]\r\nconsole.log(arr2);\r\n// []\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-1.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n從索引 2 的位置開始，刪除 1 個元素：\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 1);\r\nconsole.log(arr1);\r\n// [ 0, 1, 3, 4, 5, 6 ]\r\nconsole.log(arr2);\r\n// [ 2 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-2.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n從索引 2 的位置開始，刪除 1 個元素並插入「a」：\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 1, \"a\");\r\nconsole.log(arr1);\r\n// [\r\n//   0, 1, 'a', 3,\r\n//   4, 5, 6\r\n// ]\r\nconsole.log(arr2);\r\n// [ 2 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-3.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n從索引 2 的位置開始，刪除 1 個元素並插入「a, b, c」：\r\n\r\n<!-- ```js\r\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\r\narr2 = arr1.splice(2, 1, \"a\", \"b\", \"c\");\r\nconsole.log(arr1);\r\n// [\r\n//   0, 1, 'a', 'b', 'c',\r\n//   3, 4, 5, 6\r\n// ]\r\nconsole.log(arr2);\r\n// [ 2 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-4.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n## 次男 slice\r\n\r\n[mdn](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) 解釋( Array.prototype.slice() )：\r\n\r\nThe slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.\r\n\r\n[mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) 解釋( String.prototype.slice() )：\r\n\r\nThe slice() method extracts a section of a string and returns it as a new string, without modifying the original string.\r\n\r\n**slice 可以提取「陣列」或「字串」的一部分 → 它會回傳一個新的「陣列」或「字串」，也就是被提取的片段，而原本的「陣列」或「字串」並不會被改變。**\r\n\r\n來寫一些例子：\r\n\r\n從位置 3 開始切：\r\n\r\n<!-- ```js\r\nlet arr = [0, 1, 2, 3, 4, 5, 6];\r\nconsole.log(arr.slice(3));\r\n// [ 3, 4, 5, 6 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-5.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n從位置 3 開始切，切到位置 6 (不包含位置 6 )：\r\n\r\n<!-- ```js\r\nlet arr = [0, 1, 2, 3, 4, 5, 6];\r\nconsole.log(arr.slice(3, 6));\r\n// [ 3, 4, 5 ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-6.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n以上只有舉出提取「陣列」的例子，至於提取「字串」的部分，就請發揮想像力，自行舉一反三了。(翻譯：我懶得寫了 😂)\r\n\r\n## 三男 split\r\n\r\n[mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) 解釋( String.prototype.split() )：\r\n\r\nThe split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.\r\n\r\n**split 的作用就是「將字串分割成陣列」，使用時必須告訴它你想要用原本字串裡面的什麼符號作為分隔 → 它會回傳一個新的「陣列」，而原本的「字串」並不會被改變。**\r\n\r\n直接用以下例子進行說明：\r\n\r\n<!-- ```js\r\nconst myString = \"hello!nihao!你好\";\r\nconst myNewArray = myString.split(\"!\");\r\nconsole.log(myNewArray);\r\n// [ 'hello', 'nihao', '你好' ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-7.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n要注意使用的分隔符號在回傳的新「陣列」中會不見，以上述的例子來看，我們指定用「!」作為分隔符號，所以回傳的新陣列，也就是原本字串的分割，就不會有「!」出現。\r\n\r\n這個方法在處理 .csv 檔案時會非常好用！(.csv 是 Excel 或 Google Sheet 最常見的匯出格式之一，會把 spreadsheet 裡的欄位變成用逗號隔開的文字檔案)\r\n\r\n再來也看一下 [mdn](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) 提供的 Demo：\r\n\r\n<!-- ```js\r\nconst str = \"The quick brown fox jumps over the lazy dog.\";\r\nconst words = str.split(\" \");\r\nconsole.log(words);\r\n// [\r\n//   'The',   'quick',\r\n//   'brown', 'fox',\r\n//   'jumps', 'over',\r\n//   'the',   'lazy',\r\n//   'dog.'\r\n// ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-8.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-8.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```js\r\nconst str = \"The quick brown fox jumps over the lazy dog.\";\r\nconst chars = str.split(\"\");\r\nconsole.log(chars);\r\n// [\r\n//   'T', 'h', 'e', ' ', 'q', 'u', 'i',\r\n//   'c', 'k', ' ', 'b', 'r', 'o', 'w',\r\n//   'n', ' ', 'f', 'o', 'x', ' ', 'j',\r\n//   'u', 'm', 'p', 's', ' ', 'o', 'v',\r\n//   'e', 'r', ' ', 't', 'h', 'e', ' ',\r\n//   'l', 'a', 'z', 'y', ' ', 'd', 'o',\r\n//   'g', '.'\r\n// ]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-9.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-9.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n<!-- ```js\r\nconst str = \"The quick brown fox jumps over the lazy dog.\";\r\nconst strCopy = str.split();\r\nconsole.log(strCopy);\r\n// ['The quick brown fox jumps over the lazy dog.']\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-10.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-10.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n這邊可以發現若原本的字串是一個完整的句子，使用「' '」(中間有空格)作為分隔符號會拆分成一個一個單子、使用「''」(中間沒有空格)作為分隔符號會拆分成一個一個字母，使用「」(沒有放入任何東西)作為分隔符號則會把原本完整的字串(這裡是一個完整的句子)，直接放進新的陣列中，成為此陣列唯一的元素。\r\n\r\n好了，「大家來找碴」遊戲到這裡暫時告一段落，這之中大概還有很多功能我沒有列舉出來，這些就等以後如果我有機會碰到再說了。\r\n\r\n## 為什麼 slice 可以操作 array 和 string，但 splice 就只能夠操作 array，卻不能操作 string？\r\n\r\n這個是我玩完「找不同」遊戲後心裡所產生的疑問，目前我的理解是，通常可以拿來操作 array 的函式應該大部分也可以用來操作 string，畢竟這樣能夠一舉兩得，是再好不過的了，但是 splice 為什麼就偏偏只能操作 array？\r\n\r\n這是因為在 JavaScript 中，若變數型態為 Primitive Types (包含 string)，它會有 Immutable (不可變的) 的特性，也就是你不能直接修改變數型態為 Primitive Types 的內容。注意這邊是指不能直接呼叫任何內建函式去做修改，但是還是可以重新賦值讓內容改變。以下舉個簡單的例子做說明：\r\n\r\n若變數型態為 Primitive Types，只呼叫任何內建函式，變數的值並不會改變，e.g.,\r\n\r\n<!-- ```js\r\nlet a = \"hello\";\r\na.toUpperCase();\r\nconsole.log(a); // hello\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-11.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-11.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n必須要重新賦值，a 才會被改變：\r\n\r\n<!-- ```js\r\nlet a = \"hello\";\r\na = a.toUpperCase();\r\nconsole.log(a); // HELLO\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-12.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-12.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n回到原本的問題，我們知道 splice 函式本身的功能是會直接改變原本的值的，這樣就會和 JavaScript 中 Immutable (不可變的) 的特性相互違背，這也就是為什麼 splice 函式不能操作 string 的原因，就好像是法律上會有憲法的最高原則掛在那邊，如果底下的民法、刑法等違背了憲法，就會不適用的道理一樣。但是因為 array 在 JavaScript 中的變數型態為 Object，沒有 Immutable (不可變的) 的特性，所以直接操作原本的值並不會有問題。以下也舉個簡單的例子說明：\r\n\r\n<!-- ```js\r\nlet arr = [1, 2, 3];\r\narr.push(4);\r\nconsole.log(arr); // [1, 2, 3, 4]\r\n``` -->\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-13.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-13.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>\r\n\r\n從上述的例子可以看到，若變數型態是 Object，直接呼叫內建函式，變數的值就會被改變。\r\n\r\n至於 slice 函式，因為它本身的功能並不會改變原本的值，所以就不會有上述相互違背的情況發生，用在 array 和 string 的操作上都不會有問題。\r\n\r\n最後，再貼一次我整理的總結表格，希望以後可以輕鬆分辨出這三位丸子三兄弟，不要再傻傻分不清楚了。\r\n\r\n<picture>\r\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\r\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\r\n</picture>","src/content/zh-tw/understanding-splice-slice-and-split-in-javascript.md","f9775983a2beb2ef",{html:1714,metadata:1715},"<p>開始之前直接先附上我整理的總結表格：</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>splice、slice、split 在分開看它們時沒什麼感覺，但當三個都遇到一遍後就會覺得似曾相識，分不太清楚彼此的差異，就好像丸子三兄弟一樣，不仔細看清楚並停下來好好分析一番，就會不知道到底什麼情況下應該要用誰？</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xTwgS1V_8zQ?si=W21_GQRuBA5UP8Vk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen style=\"width: 80%; margin: 0 auto; border-radius: 10px;\">\n</iframe>\n<p>「丸子三兄弟」是日本 NHK 兒童教育節目《與媽媽同樂》於 1999 年 1 月推出的歌曲，在日本非常紅，歌曲風格超可愛又好聽，推薦可以聽聽看紓壓一下！</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#%E9%95%B7%E7%94%B7-splice\">長男 splice</a></li>\n<li><a href=\"#%E6%AC%A1%E7%94%B7-slice\">次男 slice</a></li>\n<li><a href=\"#%E4%B8%89%E7%94%B7-split\">三男 split</a></li>\n<li><a href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC-slice-%E5%8F%AF%E4%BB%A5%E6%93%8D%E4%BD%9C-array-%E5%92%8C-string%E4%BD%86-splice-%E5%B0%B1%E5%8F%AA%E8%83%BD%E5%A4%A0%E6%93%8D%E4%BD%9C-array%E5%8D%BB%E4%B8%8D%E8%83%BD%E6%93%8D%E4%BD%9C-string\">為什麼 slice 可以操作 array 和 string，但 splice 就只能夠操作 array，卻不能操作 string ?</a></li>\n</ul>\n<h2 id=\"長男-splice\">長男 splice</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">mdn</a> 解釋( Array.prototype.splice() )：</p>\n<p>The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.</p>\n<p>在說明 splice 的功能前，先來提醒一下以後在服用「陣列」類型的常用函式時需要注意的事項，就是<strong>知道它所回傳的型態、方式是什麼很重要</strong>。\r\ne.g., 是回傳「陣列」還是「字串」? 回傳的是「一個新的陣列」還是「改變原本的陣列」? 知道後在服用時才比較不會寫出錯誤的程式碼。</p>\n<p>那我們就開始吧！</p>\n<p><strong>splice 可以做 2 件事：在原「陣列」中 1. 插入元素 2. 刪除元素，也可以兩者同時做 → 它會改變原本的「陣列」，並可以自行定義一個新的變數名稱來接住「被刪除的元素」，若沒有被刪除的元素則會回傳空陣列。</strong></p>\n<p>來寫一些例子：</p>\n<p>從索引 2 的位置開始，刪除 0 個元素並插入「a」：</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 0, \"a\");\nconsole.log(arr1);\n// [\n//   0, 1, 'a', 2,\n//   3, 4, 5, 6\n// ]\nconsole.log(arr2);\n// []\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>從索引 2 的位置開始，刪除 1 個元素：</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 1);\nconsole.log(arr1);\n// [ 0, 1, 3, 4, 5, 6 ]\nconsole.log(arr2);\n// [ 2 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>從索引 2 的位置開始，刪除 1 個元素並插入「a」：</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 1, \"a\");\nconsole.log(arr1);\n// [\n//   0, 1, 'a', 3,\n//   4, 5, 6\n// ]\nconsole.log(arr2);\n// [ 2 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>從索引 2 的位置開始，刪除 1 個元素並插入「a, b, c」：</p>\n<!-- ```js\nlet arr1 = [0, 1, 2, 3, 4, 5, 6];\narr2 = arr1.splice(2, 1, \"a\", \"b\", \"c\");\nconsole.log(arr1);\n// [\n//   0, 1, 'a', 'b', 'c',\n//   3, 4, 5, 6\n// ]\nconsole.log(arr2);\n// [ 2 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"次男-slice\">次男 slice</h2>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">mdn</a> 解釋( Array.prototype.slice() )：</p>\n<p>The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">mdn</a> 解釋( String.prototype.slice() )：</p>\n<p>The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.</p>\n<p><strong>slice 可以提取「陣列」或「字串」的一部分 → 它會回傳一個新的「陣列」或「字串」，也就是被提取的片段，而原本的「陣列」或「字串」並不會被改變。</strong></p>\n<p>來寫一些例子：</p>\n<p>從位置 3 開始切：</p>\n<!-- ```js\nlet arr = [0, 1, 2, 3, 4, 5, 6];\nconsole.log(arr.slice(3));\n// [ 3, 4, 5, 6 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>從位置 3 開始切，切到位置 6 (不包含位置 6 )：</p>\n<!-- ```js\nlet arr = [0, 1, 2, 3, 4, 5, 6];\nconsole.log(arr.slice(3, 6));\n// [ 3, 4, 5 ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-6.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-6.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>以上只有舉出提取「陣列」的例子，至於提取「字串」的部分，就請發揮想像力，自行舉一反三了。(翻譯：我懶得寫了 😂)</p>\n<h2 id=\"三男-split\">三男 split</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\">mdn</a> 解釋( String.prototype.split() )：</p>\n<p>The split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.</p>\n<p><strong>split 的作用就是「將字串分割成陣列」，使用時必須告訴它你想要用原本字串裡面的什麼符號作為分隔 → 它會回傳一個新的「陣列」，而原本的「字串」並不會被改變。</strong></p>\n<p>直接用以下例子進行說明：</p>\n<!-- ```js\nconst myString = \"hello!nihao!你好\";\nconst myNewArray = myString.split(\"!\");\nconsole.log(myNewArray);\n// [ 'hello', 'nihao', '你好' ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-7.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-7.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>要注意使用的分隔符號在回傳的新「陣列」中會不見，以上述的例子來看，我們指定用「!」作為分隔符號，所以回傳的新陣列，也就是原本字串的分割，就不會有「!」出現。</p>\n<p>這個方法在處理 .csv 檔案時會非常好用！(.csv 是 Excel 或 Google Sheet 最常見的匯出格式之一，會把 spreadsheet 裡的欄位變成用逗號隔開的文字檔案)</p>\n<p>再來也看一下 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\">mdn</a> 提供的 Demo：</p>\n<!-- ```js\nconst str = \"The quick brown fox jumps over the lazy dog.\";\nconst words = str.split(\" \");\nconsole.log(words);\n// [\n//   'The',   'quick',\n//   'brown', 'fox',\n//   'jumps', 'over',\n//   'the',   'lazy',\n//   'dog.'\n// ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-8.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-8.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<!-- ```js\nconst str = \"The quick brown fox jumps over the lazy dog.\";\nconst chars = str.split(\"\");\nconsole.log(chars);\n// [\n//   'T', 'h', 'e', ' ', 'q', 'u', 'i',\n//   'c', 'k', ' ', 'b', 'r', 'o', 'w',\n//   'n', ' ', 'f', 'o', 'x', ' ', 'j',\n//   'u', 'm', 'p', 's', ' ', 'o', 'v',\n//   'e', 'r', ' ', 't', 'h', 'e', ' ',\n//   'l', 'a', 'z', 'y', ' ', 'd', 'o',\n//   'g', '.'\n// ]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-9.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-9.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<!-- ```js\nconst str = \"The quick brown fox jumps over the lazy dog.\";\nconst strCopy = str.split();\nconsole.log(strCopy);\n// ['The quick brown fox jumps over the lazy dog.']\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-10.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-10.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>這邊可以發現若原本的字串是一個完整的句子，使用「’ ’」(中間有空格)作為分隔符號會拆分成一個一個單子、使用「”」(中間沒有空格)作為分隔符號會拆分成一個一個字母，使用「」(沒有放入任何東西)作為分隔符號則會把原本完整的字串(這裡是一個完整的句子)，直接放進新的陣列中，成為此陣列唯一的元素。</p>\n<p>好了，「大家來找碴」遊戲到這裡暫時告一段落，這之中大概還有很多功能我沒有列舉出來，這些就等以後如果我有機會碰到再說了。</p>\n<h2 id=\"為什麼-slice-可以操作-array-和-string但-splice-就只能夠操作-array卻不能操作-string\">為什麼 slice 可以操作 array 和 string，但 splice 就只能夠操作 array，卻不能操作 string？</h2>\n<p>這個是我玩完「找不同」遊戲後心裡所產生的疑問，目前我的理解是，通常可以拿來操作 array 的函式應該大部分也可以用來操作 string，畢竟這樣能夠一舉兩得，是再好不過的了，但是 splice 為什麼就偏偏只能操作 array？</p>\n<p>這是因為在 JavaScript 中，若變數型態為 Primitive Types (包含 string)，它會有 Immutable (不可變的) 的特性，也就是你不能直接修改變數型態為 Primitive Types 的內容。注意這邊是指不能直接呼叫任何內建函式去做修改，但是還是可以重新賦值讓內容改變。以下舉個簡單的例子做說明：</p>\n<p>若變數型態為 Primitive Types，只呼叫任何內建函式，變數的值並不會改變，e.g.,</p>\n<!-- ```js\nlet a = \"hello\";\na.toUpperCase();\nconsole.log(a); // hello\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-11.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-11.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>必須要重新賦值，a 才會被改變：</p>\n<!-- ```js\nlet a = \"hello\";\na = a.toUpperCase();\nconsole.log(a); // HELLO\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-12.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-12.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>回到原本的問題，我們知道 splice 函式本身的功能是會直接改變原本的值的，這樣就會和 JavaScript 中 Immutable (不可變的) 的特性相互違背，這也就是為什麼 splice 函式不能操作 string 的原因，就好像是法律上會有憲法的最高原則掛在那邊，如果底下的民法、刑法等違背了憲法，就會不適用的道理一樣。但是因為 array 在 JavaScript 中的變數型態為 Object，沒有 Immutable (不可變的) 的特性，所以直接操作原本的值並不會有問題。以下也舉個簡單的例子說明：</p>\n<!-- ```js\nlet arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr); // [1, 2, 3, 4]\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/code-13.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/code-13.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>從上述的例子可以看到，若變數型態是 Object，直接呼叫內建函式，變數的值就會被改變。</p>\n<p>至於 slice 函式，因為它本身的功能並不會改變原本的值，所以就不會有上述相互違背的情況發生，用在 array 和 string 的操作上都不會有問題。</p>\n<p>最後，再貼一次我整理的總結表格，希望以後可以輕鬆分辨出這三位丸子三兄弟，不要再傻傻分不清楚了。</p>\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-splice-slice-and-split-in-javascript/summary-table.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-splice-slice-and-split-in-javascript/summary-table.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>",{headings:1716,localImagePaths:1730,remoteImagePaths:1731,frontmatter:1732,imagePaths:1736},[1717,1718,1721,1724,1727],{depth:32,slug:145,text:146},{depth:32,slug:1719,text:1720},"長男-splice","長男 splice",{depth:32,slug:1722,text:1723},"次男-slice","次男 slice",{depth:32,slug:1725,text:1726},"三男-split","三男 split",{depth:32,slug:1728,text:1729},"為什麼-slice-可以操作-array-和-string但-splice-就只能夠操作-array卻不能操作-string","為什麼 slice 可以操作 array 和 string，但 splice 就只能夠操作 array，卻不能操作 string？",[],[],{title:1705,subtitle:1706,author:16,imageWebp:944,imagePng:945,imgAlt:942,creationDate:1733,updateDate:1734,tags:1735,featured:136},["Date","2023-08-05T00:00:00.000Z"],["Date","2023-08-05T00:00:00.000Z"],[22],[],{id:901,data:1738,body:1744,filePath:1745,digest:1746,rendered:1747,legacyId:938},{title:1739,subtitle:1740,author:16,imageWebp:906,imagePng:907,imgAlt:904,creationDate:1741,updateDate:1742,tags:1743,featured:23},"關於 JavaScript 中的 var、let 和 const","var、let 和 const 都是在 JavaScript 用來做變數宣告的保留字，早期原本只有 var，直到 ES6 後才加入了 let 和 const。",["Date","2024-10-20T00:00:00.000Z"],["Date","2024-10-20T00:00:00.000Z"],[22],"var、let 和 const 都是在 JavaScript 用來做變數宣告的保留字，早期原本只有 var，直到 ES6 後才加入了 let 和 const。\n\n針對 var 和 let/const 的比較，主要有三個不同：\n\n## 1. 在作用域上，var 可以是全域、也可以是以函式作為範圍；let 與 const 則是以區塊作為範圍。\n\n在作用域上，var 可以是全域、也可以是以函式作為範圍，let 與 const 則是以區塊作為範圍。當我們在一個文件的最外層使用 var 來宣告變數，這時它的範圍會是全域，因此當我們在 console 當中輸入\n\n`var greeting = \"hello\";`\n\n我們可以接著輸入\n\n`window.greeting;` // \"hello\"\n\n其結果會是 hello，但是用 let 與 const 宣告則不會有同樣效果。 而除了全域，var 在某個函式中範圍則是該函式。\n\n## 2. 在宣告上，var 可以被重複宣告，但是 let 與 const 則不行。\n\n在宣告上，var 可以被重複宣告，但是 let 與 const 則不行。所以當使用 var 時，可以做到以下這樣：\n\n<!-- ```js\nvar greeting = \"Hello! This ExplainThis :)\";\nvar greeting = \"ExplainThis is a website that helps you learn programming!\";\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\nlet 則不能重複宣告，但可以重新賦值，所以會如下面這樣：\n\n<!-- ```js\n// there will be SyntaxError: \n// Identifier 'greeting' has already been declared\nlet greeting = \"Hello\";\nlet greeting = \"Hello, hello, everyone\";\n\n// it works like this for let declaration\nlet greeting = \"Hello\";\ngreeting = \"Hello, hello, everyone\";\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## 3. 在提升上，var 宣告的變數會自動初始化值為 undefined，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined ；但是 let 與 const 宣告的變數則不會自動初始化，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤。\n\n在提升上，var 宣告的變數會自動初始化，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined ，例如下面這樣：\n\n<!-- ```js\nconsole.log(greeting); // undefined\nvar greeting = \"hi there\";\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n但是 let 與 const 則不會，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤：\n\n<!-- ```js\nconsole.log(greeting); // Uncaught ReferenceError: greeting is not defined\nlet greeting = \"hi there\";\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## 而針對 let 和 const 的比較，最主要的一大區別在於，用 let 宣告的變數可以重新賦值，但是用 const 的不行。\n\nlet 與 const 在絕多數面向都是一樣，兩者的一大區別在於，用 let 宣告的變數可以重新賦值，但是用 const 的不行。\n\n特別注意，這邊指的差別是在於「賦值」，而不是改變某個變數。如果是改變某個變數，若該變數是原生值(primitive values)，例如字串、數字，let 與 const 都不能改變；但假如該變數是物件 (objects)，則不論 let 或 const 在宣告後，都仍是可以改變該物件。\n\n所以下面這個例子是可行的：\n\n<!-- ```js\nconst user = { name: \"John\" };\nuser.name = \"Mary\";\nconsole.log(user); // {name: 'Mary'}\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n至於何時用 let；何時用 const，沒有一個標準答案。業界目前普遍的觀點是多數時候都用 const，只有非得要重新賦值才用 let。\n\n## Reference\n\n[在 JavaScript 中用 var, let, 以及 const 有什麼差別？什麼時候該用哪個？ ｜ExplainThis](https://www.explainthis.io/zh-hant/swe/js-var-let-const-in-javascript)","src/content/zh-tw/understanding-var-let-and-const-in-javascript.md","875ec7c2ab5f0550",{html:1748,metadata:1749},"<p>var、let 和 const 都是在 JavaScript 用來做變數宣告的保留字，早期原本只有 var，直到 ES6 後才加入了 let 和 const。</p>\n<p>針對 var 和 let/const 的比較，主要有三個不同：</p>\n<h2 id=\"1-在作用域上var可以是全域也可以是以函式作為範圍let與const則是以區塊作為範圍\">1. 在作用域上，var 可以是全域、也可以是以函式作為範圍；let 與 const 則是以區塊作為範圍。</h2>\n<p>在作用域上，var 可以是全域、也可以是以函式作為範圍，let 與 const 則是以區塊作為範圍。當我們在一個文件的最外層使用 var 來宣告變數，這時它的範圍會是全域，因此當我們在 console 當中輸入</p>\n<p><code>var greeting = \"hello\";</code></p>\n<p>我們可以接著輸入</p>\n<p><code>window.greeting;</code> // “hello”</p>\n<p>其結果會是 hello，但是用 let 與 const 宣告則不會有同樣效果。 而除了全域，var 在某個函式中範圍則是該函式。</p>\n<h2 id=\"2-在宣告上var可以被重複宣告但是let與const則不行\">2. 在宣告上，var 可以被重複宣告，但是 let 與 const 則不行。</h2>\n<p>在宣告上，var 可以被重複宣告，但是 let 與 const 則不行。所以當使用 var 時，可以做到以下這樣：</p>\n<!-- ```js\nvar greeting = \"Hello! This ExplainThis :)\";\nvar greeting = \"ExplainThis is a website that helps you learn programming!\";\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-1.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-1.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>let 則不能重複宣告，但可以重新賦值，所以會如下面這樣：</p>\n<!-- ```js\n// there will be SyntaxError: \n// Identifier 'greeting' has already been declared\nlet greeting = \"Hello\";\nlet greeting = \"Hello, hello, everyone\";\n\n// it works like this for let declaration\nlet greeting = \"Hello\";\ngreeting = \"Hello, hello, everyone\";\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-2.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-2.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"3-在提升上var宣告的變數會自動初始化值為undefined因此在宣告前就使用變數不會出現錯誤而會是undefined但是let與const宣告的變數則不會自動初始化而是會進到暫時死區-tdz因此在let與const宣告變數前使用該變數會出現錯誤\">3. 在提升上，var 宣告的變數會自動初始化值為 undefined，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined ；但是 let 與 const 宣告的變數則不會自動初始化，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤。</h2>\n<p>在提升上，var 宣告的變數會自動初始化，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined ，例如下面這樣：</p>\n<!-- ```js\nconsole.log(greeting); // undefined\nvar greeting = \"hi there\";\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-3.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-3.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>但是 let 與 const 則不會，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤：</p>\n<!-- ```js\nconsole.log(greeting); // Uncaught ReferenceError: greeting is not defined\nlet greeting = \"hi there\";\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-4.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-4.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"而針對-let-和-const-的比較最主要的一大區別在於用let宣告的變數可以重新賦值但是用const的不行\">而針對 let 和 const 的比較，最主要的一大區別在於，用 let 宣告的變數可以重新賦值，但是用 const 的不行。</h2>\n<p>let 與 const 在絕多數面向都是一樣，兩者的一大區別在於，用 let 宣告的變數可以重新賦值，但是用 const 的不行。</p>\n<p>特別注意，這邊指的差別是在於「賦值」，而不是改變某個變數。如果是改變某個變數，若該變數是原生值(primitive values)，例如字串、數字，let 與 const 都不能改變；但假如該變數是物件 (objects)，則不論 let 或 const 在宣告後，都仍是可以改變該物件。</p>\n<p>所以下面這個例子是可行的：</p>\n<!-- ```js\nconst user = { name: \"John\" };\nuser.name = \"Mary\";\nconsole.log(user); // {name: 'Mary'}\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/understanding-var-let-and-const-in-javascript/code-5.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/understanding-var-let-and-const-in-javascript/code-5.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<p>至於何時用 let；何時用 const，沒有一個標準答案。業界目前普遍的觀點是多數時候都用 const，只有非得要重新賦值才用 let。</p>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-var-let-const-in-javascript\">在 JavaScript 中用 var, let, 以及 const 有什麼差別？什麼時候該用哪個？ ｜ExplainThis</a></p>",{headings:1750,localImagePaths:1764,remoteImagePaths:1765,frontmatter:1766,imagePaths:1770},[1751,1754,1757,1760,1763],{depth:32,slug:1752,text:1753},"1-在作用域上var可以是全域也可以是以函式作為範圍let與const則是以區塊作為範圍","1. 在作用域上，var 可以是全域、也可以是以函式作為範圍；let 與 const 則是以區塊作為範圍。",{depth:32,slug:1755,text:1756},"2-在宣告上var可以被重複宣告但是let與const則不行","2. 在宣告上，var 可以被重複宣告，但是 let 與 const 則不行。",{depth:32,slug:1758,text:1759},"3-在提升上var宣告的變數會自動初始化值為undefined因此在宣告前就使用變數不會出現錯誤而會是undefined但是let與const宣告的變數則不會自動初始化而是會進到暫時死區-tdz因此在let與const宣告變數前使用該變數會出現錯誤","3. 在提升上，var 宣告的變數會自動初始化值為 undefined，因此在宣告前就使用變數，不會出現錯誤，而會是 undefined ；但是 let 與 const 宣告的變數則不會自動初始化，而是會進到暫時死區 (TDZ)，因此在 let 與 const 宣告變數前使用該變數，會出現錯誤。",{depth:32,slug:1761,text:1762},"而針對-let-和-const-的比較最主要的一大區別在於用let宣告的變數可以重新賦值但是用const的不行","而針對 let 和 const 的比較，最主要的一大區別在於，用 let 宣告的變數可以重新賦值，但是用 const 的不行。",{depth:32,slug:33,text:34},[],[],{title:1739,subtitle:1740,author:16,imageWebp:906,imagePng:907,imgAlt:904,creationDate:1767,updateDate:1768,tags:1769,featured:23},["Date","2024-10-20T00:00:00.000Z"],["Date","2024-10-20T00:00:00.000Z"],[22],[],{id:977,data:1772,body:1778,filePath:1779,digest:1780,rendered:1781,legacyId:1003},{title:1773,subtitle:1774,author:16,imageWebp:982,imagePng:983,imgAlt:984,creationDate:1775,updateDate:1776,tags:1777,featured:23},"為什麼在 JavaScript 中 0.1 + 0.2 不會剛好是 0.3？","因為二進位制 + 電腦記憶體有限，所以 0.1 + 0.2 = 0.30000000000000004。",["Date","2024-11-24T00:00:00.000Z"],["Date","2024-11-24T00:00:00.000Z"],[22],"在 JavaScript 中 0.1 + 0.2 不會剛好是 0.3，這不是 JavaScript 獨有的現象，而是使用二進制浮點運算的程式語言都會遇到的問題。\n\n在一般生活中，我們多數情況是使用十進位，此時只有 1/2、1/4、1/5、1/8、1/10 這幾個數能夠被十進位的小數清楚表達；而像是 1/3、1/6、1/7、1/9 則不行。以 1/3 來說，我們知道會是 0.33333333 一路到無窮無盡。而對於二進位制來說，只有 1/2、1/4、1/8 等可以被清楚表達，其他則會無窮無盡地延伸下去，但是因為電腦的記憶體有限，程式語言會分配給一個數字的記憶體也是有限，所以在精准度的表達會有限制，這也是導致在 JavaScript 中 0.1 + 0.2 = 0.30000000000000004 這個怪異數字的原因。\n\n如果要避免上述問題，在 JavaScript 中有  toFixed  和  toPrecision  等給數字操作的方法，讓我們能夠設定我們要的精確度，舉例來說，可以設定精確到小數第一位。因此\n\n<!-- ```js\nconsole.log((0.1 + 0.2).toFixed(1)); // 0.3\nconsole.log((0.1 + 0.2).toPrecision(1)); // 0.3\n``` -->\n\n<picture>\n  <source srcset=\"/images/article-contents/webp/why-01-plus-02-equals-030000000000000004-in-javascript/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/why-01-plus-02-equals-030000000000000004-in-javascript/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n\n## Reference\n\n[在 JavaScript 中 0.1 + 0.2 會是多少？為什麼？如何避免相關問題？｜ ExplainThis](https://www.explainthis.io/zh-hant/swe/js-zero-point-one-plus-zero-point-two)","src/content/zh-tw/why-01-plus-02-equals-030000000000000004-in-javascript.md","5957bda5f87df33c",{html:1782,metadata:1783},"<p>在 JavaScript 中 0.1 + 0.2 不會剛好是 0.3，這不是 JavaScript 獨有的現象，而是使用二進制浮點運算的程式語言都會遇到的問題。</p>\n<p>在一般生活中，我們多數情況是使用十進位，此時只有 1/2、1/4、1/5、1/8、1/10 這幾個數能夠被十進位的小數清楚表達；而像是 1/3、1/6、1/7、1/9 則不行。以 1/3 來說，我們知道會是 0.33333333 一路到無窮無盡。而對於二進位制來說，只有 1/2、1/4、1/8 等可以被清楚表達，其他則會無窮無盡地延伸下去，但是因為電腦的記憶體有限，程式語言會分配給一個數字的記憶體也是有限，所以在精准度的表達會有限制，這也是導致在 JavaScript 中 0.1 + 0.2 = 0.30000000000000004 這個怪異數字的原因。</p>\n<p>如果要避免上述問題，在 JavaScript 中有  toFixed  和  toPrecision  等給數字操作的方法，讓我們能夠設定我們要的精確度，舉例來說，可以設定精確到小數第一位。因此</p>\n<!-- ```js\nconsole.log((0.1 + 0.2).toFixed(1)); // 0.3\nconsole.log((0.1 + 0.2).toPrecision(1)); // 0.3\n``` -->\n<picture>\n  <source srcset=\"/images/article-contents/webp/why-01-plus-02-equals-030000000000000004-in-javascript/code.webp\" type=\"image/webp\">\n  <img src=\"/images/article-contents/png/why-01-plus-02-equals-030000000000000004-in-javascript/code.png\" alt=\"\" loading=\"lazy\" style=\"width: 100%; border-radius: 10px;\">\n</picture>\n<h2 id=\"reference\">Reference</h2>\n<p><a href=\"https://www.explainthis.io/zh-hant/swe/js-zero-point-one-plus-zero-point-two\">在 JavaScript 中 0.1 + 0.2 會是多少？為什麼？如何避免相關問題？｜ ExplainThis</a></p>",{headings:1784,localImagePaths:1786,remoteImagePaths:1787,frontmatter:1788,imagePaths:1792},[1785],{depth:32,slug:33,text:34},[],[],{title:1773,subtitle:1774,author:16,imageWebp:982,imagePng:983,imgAlt:984,creationDate:1789,updateDate:1790,tags:1791,featured:23},["Date","2024-11-24T00:00:00.000Z"],["Date","2024-11-24T00:00:00.000Z"],[22],[]];

export { _astro_dataLayerContent as default };
